<div id="cha-beginning" data-tralics-id="cid1" class="chapter" data-number="1" data-chapter="beginning"><h1><a href="beginning_fragment.html#cha-beginning" class="heading hyperref"><span class="number">Chapter 1 </span>From zero to deploy</a></h1>
<p>Welcome to the <a href="http://www.railstutorial.org/ruby-on-rails-tutorial-book"><em>Ruby on Rails Tutorial</em></a>.<span class="intersentencespace"></span> The goal of this book is to be the best answer to the question, “If I want to learn web development with <a href="http://rubyonrails.org/">Ruby on Rails</a>, where should I start?”<span class="intersentencespace"></span> By the time you finish the <em>Ruby on Rails Tutorial</em>, you will have all the skills you need to develop and deploy your own custom web applications with Rails.<span class="intersentencespace"></span> You will also be ready to benefit from the many more advanced books, blogs, and screencasts that are part of the thriving Rails educational ecosystem.<span class="intersentencespace"></span> Finally, since the <em>Ruby on Rails Tutorial</em> uses Rails 4, the knowledge you gain here represents the state of the art in web development.<span class="intersentencespace"></span> (The most up-to-date version of the <em>Ruby on Rails Tutorial</em> can be found on the book’s website at <a href="http://www.railstutorial.org/">http://www.railstutorial.org/</a>; if you are reading this book offline, be sure to check the <a href="http://www.railstutorial.org/book">online version of the Rails Tutorial book</a> at <a href="http://www.railstutorial.org/book">http://www.railstutorial.org/book</a> for the latest updates.)</p>
<p>(<em>Note</em>: The present volume is the Rails 4.0 <em>version</em> of the book, which means that it has been revised to be compatible with Rails 4.0, but it is not yet a new <em>edition</em> because the changes in Rails don’t yet justify it.<span class="intersentencespace"></span> From the perspective of an introductory tutorial, the differences between Rails 4.0 and the previous version, Rails 3.2, are slight.<span class="intersentencespace"></span> Indeed, although there are a large number of miscellaneous small changes (<a href="beginning_fragment.html#sidebar-diffs" class="hyperref">Box <span class="ref">1.1</span></a>), for our purposes there is only one significant difference, a new security technique called <em>strong parameters</em>, covered in <a href="sign_up_fragment.html#sec-strong_parameters" class="hyperref">Section <span class="ref">7.3.2</span></a>.<span class="intersentencespace"></span> Once the changes in Rails justify the effort, I plan to prepare a full new edition of the <em>Rails Tutorial</em>, including coverage of topics such as <em>Turbolinks</em> and <em>Russian doll caching</em>, as well as some new aspects of RSpec, such as <em>feature specs</em>.)</p>
<div class="aside" id="sidebar-diffs" data-tralics-id="uid1" data-number="1.1"><div class="heading"><span class="number">Box 1.1.</span> 

<span class="description">Diffs from the 2nd edition</span></div>
<p>This is a (nearly) comprehensive list of differences between the 2nd edition of the <em>Ruby on Rails Tutorial</em> and the present version.<span class="intersentencespace"></span> (The only really important one is the change to strong parameters; the others are all relatively minor.)<span class="intersentencespace"></span> This list is presented for the convenience of those who read the 2nd edition (or are otherwise familiar with Rails 3.2) and want a summary of the diffs.<span class="intersentencespace"></span> If you don’t already have experience with Rails 3.2, you should probably ignore this list.</p>
<p>In what follows, each item includes a reference to a section or code listing with an example of the change in question.</p>
<ul><li>Change Rails 3.2 to Rails 4.0 (<a href="beginning_fragment.html#sec-rubygems" class="hyperref">Section <span class="ref">1.2.2</span></a>)
</li>
<li>Explicitly include Capybara DSL (<a href="static_pages_fragment.html#code-capybara_dsl" class="hyperref">Listing <span class="ref">3.10</span></a>)
</li>
<li>Change RSpec <code>.should</code> to <code>expect().to</code> (<a href="static_pages_fragment.html#sec-TDD" class="hyperref">Section <span class="ref">3.2.1</span></a>)
</li>
<li>Change <code>have_selector(’title’, …)</code> to <code>have_title(…)</code> (<a href="static_pages_fragment.html#sec-testing_a_title_change" class="hyperref">Section <span class="ref">3.3.1</span></a>)
</li>
<li>Change HTTP verb from <span class="tt">PUT</span> to <span class="tt">PATCH</span> for updates (<a href="static_pages_fragment.html#sidebar-get_etc" class="hyperref">Box <span class="ref">3.3</span></a>)
</li>
<li>Add hash arguments for Turbolinks to stylesheets and JavaScripts (<a href="static_pages_fragment.html#code-application_layout" class="hyperref">Listing <span class="ref">3.26</span></a>)
</li>
<li>Change <code>root to: ’path’</code> to <code>root ’path’</code> (<a href="filling_in_the_layout_fragment.html#code-root_route" class="hyperref">Listing <span class="ref">5.26</span></a>)
</li>
<li>Change <code>find_by_thing(…)</code> to <code>find_by(thing: …)</code> (<a href="modeling_users_fragment.html#sec-finding_user_objects" class="hyperref">Section <span class="ref">6.1.4</span></a>)
</li>
<li>Switch from <code>rake db:test:prepare</code> to <code>rake test:prepare</code> (<a href="modeling_users_fragment.html#sec-initial_user_tests" class="hyperref">Section <span class="ref">6.2.1</span></a>)
</li>
<li>Change from <code>attr_accessible</code> to strong parameters (<a href="sign_up_fragment.html#sec-strong_parameters" class="hyperref">Section <span class="ref">7.3.2</span></a>)
</li>
<li>Change to hashed remember tokens (<a href="sign_in_out_fragment.html#sec-remember_me" class="hyperref">Section <span class="ref">8.2.1</span></a>)
</li>
<li>Change <code>before_filter</code> to <code>before_action</code> (<a href="updating_and_deleting_users_fragment.html#code-authorize_before_filter" class="hyperref">Listing <span class="ref">9.12</span></a>)
</li>
<li>Use Capybara’s <code>match: :first</code> to click on the first matching link (<a href="updating_and_deleting_users_fragment.html#code-delete_link_tests" class="hyperref">Listing <span class="ref">9.42</span></a>)
</li>
<li>Change <code>default_scope</code> from a hash argument to a lambda (<a href="user_microposts_fragment.html#code-micropost_ordering" class="hyperref">Listing <span class="ref">10.11</span></a>)
</li>
<li>Change <code>dup</code> to <code>to_a</code> (<a href="user_microposts_fragment.html#code-micropost_dependency_test" class="hyperref">Listing <span class="ref">10.12</span></a>)
</li>
<li>Use XPath to test button toggling (<a href="following_users_fragment.html#sec-a_working_follow_button_the_standard_way" class="hyperref">Section <span class="ref">11.2.4</span></a>)
</li></ul></div><p>It’s worth emphasizing that the goal of this book is <em>not</em> merely to teach Rails, but rather to teach <em>web development with Rails</em>, which means acquiring (or expanding) the skills needed to develop software for the World Wide Web.<span class="intersentencespace"></span> In addition to Ruby on Rails, this skillset includes HTML &amp; CSS, databases, version control, testing, and deployment.<span class="intersentencespace"></span> To accomplish this goal, the <em>Ruby on Rails Tutorial</em> takes an integrated approach: you will learn Rails by example by building a substantial sample application from scratch.<span class="intersentencespace"></span> As <a href="http://sivers.org">Derek Sivers</a> notes in the foreword, this book is structured as a linear narrative, designed to be read from start to finish.<span class="intersentencespace"></span> If you are used to skipping around in technical books, taking this linear approach might require some adjustment, but I suggest giving it a try.<span class="intersentencespace"></span> You can think of the <em>Ruby on Rails Tutorial</em> as a video game where you are the main character, and where you level up as a Rails developer in each chapter.<span class="intersentencespace"></span> (The exercises are the <a href="http://en.wikipedia.org/wiki/Boss_(video_gaming)#Miniboss">minibosses</a>.)</p>
<p>In this first chapter, we’ll get started with Ruby on Rails by installing all the necessary software and by setting up our development environment (<a href="beginning_fragment.html#sec-up_and_running" class="hyperref">Section <span class="ref">1.2</span></a>).<span class="intersentencespace"></span> We’ll then create our first Rails application, called (appropriately enough) <code>first_app</code>.<span class="intersentencespace"></span> The <em>Rails Tutorial</em> emphasizes good software development practices, so immediately after creating our fresh new Rails project we’ll put it under version control with Git (<a href="beginning_fragment.html#sec-version_control" class="hyperref">Section <span class="ref">1.3</span></a>).<span class="intersentencespace"></span> And, believe it or not, in this chapter we’ll even put our first app on the wider web by <em>deploying</em> it to production (<a href="beginning_fragment.html#sec-deploying" class="hyperref">Section <span class="ref">1.4</span></a>).</p>
<p>In <a href="demo_app_fragment.html#cha-a_demo_app" class="hyperref">Chapter <span class="ref">2</span></a>, we’ll make a second project, whose purpose is to demonstrate the basic workings of a Rails application.<span class="intersentencespace"></span> To get up and running quickly, we’ll build this <em>demo app</em> (called <code>demo_app</code>) using scaffolding (<a href="beginning_fragment.html#sidebar-scaffolding" class="hyperref">Box <span class="ref">1.2</span></a>) to generate code; since this code is both ugly and complex, <a href="demo_app_fragment.html#cha-a_demo_app" class="hyperref">Chapter <span class="ref">2</span></a> will focus on interacting with the demo app through its <em>URIs</em> (often called <em>URLs</em>)<sup id="cha-1_footnote-ref-1" class="footnote"><a href="#cha-1_footnote-1">1</a></sup> using a web browser.</p>
<p>The rest of the tutorial focuses on developing a single large <em>sample application</em> (called <code>sample_app</code>), writing all the code from scratch.<span class="intersentencespace"></span> We’ll develop the sample app using <em>test-driven development</em> (TDD), getting started in <a href="static_pages_fragment.html#cha-static_pages" class="hyperref">Chapter <span class="ref">3</span></a> by creating static pages and then adding a little dynamic content.<span class="intersentencespace"></span> We’ll take a quick detour in <a href="rails_flavored_ruby_fragment.html#cha-rails_flavored_ruby" class="hyperref">Chapter <span class="ref">4</span></a> to learn a little about the Ruby language underlying Rails.<span class="intersentencespace"></span> Then, in <a href="filling_in_the_layout_fragment.html#cha-filling_in_the_layout" class="hyperref">Chapter <span class="ref">5</span></a> through <a href="updating_and_deleting_users_fragment.html#cha-updating_showing_and_deleting_users" class="hyperref">Chapter <span class="ref">9</span></a>, we’ll complete the foundation for the sample application by making a site layout, a user data model, and a full registration and authentication system.<span class="intersentencespace"></span> Finally, in <a href="user_microposts_fragment.html#cha-user_microposts" class="hyperref">Chapter <span class="ref">10</span></a> and <a href="following_users_fragment.html#cha-following_users" class="hyperref">Chapter <span class="ref">11</span></a> we’ll add microblogging and social features to make a working example site.</p>
<p>The final sample application will bear more than a passing resemblance to a certain popular <a href="http://twitter.com/">social microblogging site</a>—a site which, coincidentally, was also originally written in Rails.<span class="intersentencespace"></span> Though of necessity our efforts will focus on this specific sample application, the emphasis throughout the <em>Rails Tutorial</em> will be on general principles, so that you will have a solid foundation no matter what kinds of web applications you want to build.</p>
<div class="aside" id="sidebar-scaffolding" data-tralics-id="uid19" data-number="1.2"><div class="heading"><span class="number">Box 1.2.</span> 

<span class="description">Scaffolding: Quicker, easier, more seductive</span></div>
<p>From the beginning, Rails has benefited from a palpable sense of excitement, starting with the famous <a href="http://www.youtube.com/watch?v=Gzj723LkRJY">15-minute weblog video</a> by Rails creator David Heinemeier Hansson.<span class="intersentencespace"></span> That video and its successors are a great way to get a taste of Rails’ power, and I recommend watching them.<span class="intersentencespace"></span> But be warned: they accomplish their amazing fifteen-minute feat using a feature called <em>scaffolding</em>, which relies heavily on <em>generated code</em>, magically created by the Rails <code>generate</code> command.</p>
<p>When writing a Ruby on Rails tutorial, it is tempting to rely on the scaffolding approach—it’s <a href="http://en.wikipedia.org/wiki/Dark_side_(Star_Wars)">quicker, easier, more seductive</a>.<span class="intersentencespace"></span> But the complexity and sheer amount of code in the scaffolding can be utterly overwhelming to a beginning Rails developer; you may be able to use it, but you probably won’t understand it.<span class="intersentencespace"></span> Following the scaffolding approach risks turning you into a virtuoso script generator with little (and brittle) actual knowledge of Rails.</p>
<p>In the <em>Ruby on Rails Tutorial</em>, we’ll take the (nearly) polar opposite approach: although <a href="demo_app_fragment.html#cha-a_demo_app" class="hyperref">Chapter <span class="ref">2</span></a> will develop a small demo app using scaffolding, the core of the <em>Rails Tutorial</em> is the sample app, which we’ll start writing in <a href="static_pages_fragment.html#cha-static_pages" class="hyperref">Chapter <span class="ref">3</span></a>.<span class="intersentencespace"></span> At each stage of developing the sample application, we will write <em>small, bite-sized</em> pieces of code—simple enough to understand, yet novel enough to be challenging.<span class="intersentencespace"></span> The cumulative effect will be a deeper, more flexible knowledge of Rails, giving you a good background for writing nearly any type of web application.</p>

</div></div><div id="sec-introduction" data-tralics-id="cid2" class="section" data-number="1.1"><h2><a href="beginning_fragment.html#sec-introduction" class="heading hyperref"><span class="number">1.1 </span>Introduction</a></h2>
<p>Since its debut in 2004, Ruby on Rails has rapidly become one of the most powerful and popular frameworks for building dynamic web applications.<span class="intersentencespace"></span> Everyone from scrappy startups to huge companies have used Rails: <a href="http://37signals.com/">37signals</a>, <a href="http://github.com/">GitHub</a>, <a href="http://shopify.com/">Shopify</a>, <a href="http://scribd.com/">Scribd</a>, <a href="http://twitter.com/">Twitter</a>, <a href="http://disney.com/">Disney</a>, <a href="http://hulu.com/">Hulu</a>, the <a href="http://yellowpages.com/">Yellow Pages</a>—the list of sites using Rails goes on and on.<span class="intersentencespace"></span> There are also many web development shops that specialize in Rails, such as <a href="http://entp.com/">ENTP</a>, <a href="http://thoughtbot.com/">thoughtbot</a>, <a href="http://pivotallabs.com/">Pivotal Labs</a>, and <a href="http://hashrocket.com/">Hashrocket</a>, plus innumerable independent consultants, trainers, and contractors.</p>
<p>What makes Rails so great?<span class="intersentencespace"></span> First of all, Ruby on Rails is 100% open-source, available under the permissive <a href="http://www.opensource.org/licenses/mit-license.php">MIT License</a>, and as a result it also costs nothing to download or use.<span class="intersentencespace"></span> Rails also owes much of its success to its elegant and compact design; by exploiting the malleability of the underlying <a href="http://ruby-lang.org/">Ruby</a> language, Rails effectively creates a <a href="http://en.wikipedia.org/wiki/Domain_Specific_Language">domain-specific language</a> for writing web applications.<span class="intersentencespace"></span> As a result, many common web programming tasks—such as generating HTML, making data models, and routing URLs—are easy with Rails, and the resulting application code is concise and readable.</p>
<p>Rails also adapts rapidly to new developments in web technology and framework design.<span class="intersentencespace"></span> For example, Rails was one of the first frameworks to fully digest and implement the REST architectural style for structuring web applications (which we’ll be learning about throughout this tutorial).<span class="intersentencespace"></span> And when other frameworks develop successful new techniques, Rails creator <a href="http://loudthinking.com/">David Heinemeier Hansson</a> and the <a href="http://rubyonrails.org/core">Rails core team</a> don’t hesitate to incorporate their ideas.<span class="intersentencespace"></span> Perhaps the most dramatic example is the merger of Rails and Merb, a rival Ruby web framework, so that Rails now benefits from Merb’s modular design, stable <a href="http://en.wikipedia.org/wiki/Application_programming_interface">API</a>, and improved performance.</p>
<p>Finally, Rails benefits from an unusually enthusiastic and diverse community.<span class="intersentencespace"></span> The results include hundreds of open-source <a href="http://contributors.rubyonrails.org/">contributors</a>, well-attended <a href="http://railsconf.com/">conferences</a>, a huge number of <a href="https://rubygems.org/">gems</a> (self-contained solutions to specific problems such as pagination and image upload), a rich variety of informative blogs, and a cornucopia of discussion forums and IRC channels.<span class="intersentencespace"></span> The large number of Rails programmers also makes it easier to handle the inevitable application errors: the “Google the error message” algorithm nearly always produces a relevant blog post or discussion-forum thread.</p>
<div id="sec-comments_for_various_readers" data-tralics-id="uid20" class="subsection" data-number="1.1.1"><h3><a href="beginning_fragment.html#sec-comments_for_various_readers" class="heading hyperref"><span class="number">1.1.1 </span>Comments for various readers</a></h3>
<p>The <em>Rails Tutorial</em> contains integrated tutorials not only for Rails, but also for the underlying Ruby language, the RSpec testing framework, <a href="http://en.wikipedia.org/wiki/HTML">HTML</a>, <a href="http://en.wikipedia.org/wiki/CSS">CSS</a>, a small amount of <a href="http://en.wikipedia.org/wiki/JavaScript">JavaScript</a>, and even a little <a href="http://en.wikipedia.org/wiki/SQL">SQL</a>.<span class="intersentencespace"></span> This means that, no matter where you currently are in your knowledge of web development, by the time you finish this tutorial you will be ready for more advanced Rails resources, as well as for the more systematic treatments of the other subjects mentioned.<span class="intersentencespace"></span> It also means that there’s a <em>lot</em> of material to cover; if you don’t already have much experience programming computers, you might find it overwhelming.<span class="intersentencespace"></span> The comments below contain some suggestions for approaching the <em>Rails Tutorial</em> depending on your background.<span class="intersentencespace"></span> <span class="break"></span></p>
<p><strong>All readers:</strong> One common question when learning Rails is whether to learn Ruby first.<span class="intersentencespace"></span> The answer depends on your personal learning style and how much programming experience you already have.<span class="intersentencespace"></span> If you prefer to learn everything systematically from the ground up, or if you have never programmed before, then learning Ruby first might work well for you, and in this case I recommend <a href="http://www.amazon.com/gp/product/1430223634"><em>Beginning Ruby</em></a> by Peter Cooper.<span class="intersentencespace"></span> On the other hand, many beginning Rails developers are excited about making <em>web</em> applications, and would rather not slog through a 500-page book on pure Ruby before ever writing a single web page.<span class="intersentencespace"></span> In this case, I recommend following the short interactive tutorial at <a href="http://tryruby.org/">Try Ruby</a>,<sup id="cha-1_footnote-ref-2" class="footnote"><a href="#cha-1_footnote-2">2</a></sup> and then optionally do the free tutorial at <a href="http://railsforzombies.org/">Rails for Zombies</a><sup id="cha-1_footnote-ref-3" class="footnote"><a href="#cha-1_footnote-3">3</a></sup> to get a taste of what Rails can do.</p>
<p>Another common question is whether to use tests from the start.<span class="intersentencespace"></span> As noted in the introduction, the <em>Rails Tutorial</em> uses test-driven development (also called test-first development), which in my view is the best way to develop Rails applications, but it does introduce a substantial amount of overhead and complexity.<span class="intersentencespace"></span> If you find yourself getting bogged down by the tests, I suggest either skipping them on a first reading or (even better) using them as a tool to verify your code’s correctness without worrying about how they work.<span class="intersentencespace"></span> This latter strategy involves creating the necessary test files (called <em>specs</em>) and filling them with the test code <em>exactly</em> as it appears in the book.<span class="intersentencespace"></span> You can then run the test suite (as described in <a href="filling_in_the_layout_fragment.html#cha-filling_in_the_layout" class="hyperref">Chapter <span class="ref">5</span></a>) to watch it fail, then write the application code as described in the tutorial, and finally re-run the test suite to watch it pass.<span class="intersentencespace"></span> <span class="break"></span></p>
<p><strong>Inexperienced programmers:</strong> The <em>Rails Tutorial</em> is not aimed principally at beginning programmers, and web applications, even relatively simple ones, are by their nature fairly complex.<span class="intersentencespace"></span> If you are completely new to web programming and find the <em>Rails Tutorial</em> too difficult, I suggest learning the basics of HTML and CSS and then giving the <em>Rails Tutorial</em> another go.<span class="intersentencespace"></span> (Unfortunately, I don’t have a personal recommendation here, but <a href="http://headfirstlabs.com/books/hfhtml/"><em>Head First HTML</em></a> looks promising, and one reader recommends <a href="http://www.amazon.com/gp/product/0596526873"><em>CSS: The Missing Manual</em></a> by David Sawyer McFarland.)<span class="intersentencespace"></span> You might also consider reading the first few chapters of <a href="http://www.amazon.com/gp/product/1430223634"><em>Beginning Ruby</em></a> by Peter Cooper, which starts with sample applications much smaller than a full-blown web app.<span class="intersentencespace"></span> That said, a surprising number of beginners have used this tutorial to learn web development, so I suggest giving it a try, and I especially recommend the <a href="http://www.railstutorial.org/screencasts"><em>Rails Tutorial</em> screencast series</a><sup id="cha-1_footnote-ref-4" class="footnote"><a href="#cha-1_footnote-4">4</a></sup> to give you an “over-the-shoulder” look at Rails software development.<span class="intersentencespace"></span> <span class="break"></span></p>
<p><strong>Experienced programmers new to web development:</strong> Your previous experience means you probably already understand ideas like classes, methods, data structures, etc., which is a big advantage.<span class="intersentencespace"></span> Be warned that if your background is in C/C++ or Java, you may find Ruby a bit of an odd duck, and it might take time to get used to it; just stick with it and eventually you’ll be fine.<span class="intersentencespace"></span> (Ruby even lets you put semicolons at the ends of lines if you miss them too much.)<span class="intersentencespace"></span> The <em>Rails Tutorial</em> covers all the web-specific ideas you’ll need, so don’t worry if you don’t currently know a <span class="tt">POST</span> from a <span class="tt">PATCH</span>.<span class="break"></span></p>
<p><strong>Experienced web developers new to Rails:</strong> You have a great head start, especially if you have used a dynamic language such as PHP or (even better) Python.<span class="intersentencespace"></span> The basics of what we cover will likely be familiar, but test-driven development may be new to you, as may be the structured REST style favored by Rails.<span class="intersentencespace"></span> Ruby has its own idiosyncrasies, so those will likely be new, too.<span class="break"></span></p>
<p><strong>Experienced Ruby programmers:</strong> The set of Ruby programmers who don’t know Rails is a small one nowadays, but if you are a member of this elite group you can fly through this book and then move on to developing applications of your own.<span class="break"></span></p>
<p><strong>Inexperienced Rails programmers:</strong> You’ve perhaps read some other tutorials and made a few small Rails apps yourself.<span class="intersentencespace"></span> Based on reader feedback, I’m confident that you can still get a lot out of this book.<span class="intersentencespace"></span> Among other things, the techniques here may be more up-to-date than the ones you picked up when you originally learned Rails.<span class="intersentencespace"></span> <span class="break"></span></p>
<p><strong>Experienced Rails programmers:</strong> This book is unnecessary for you, but many experienced Rails developers have expressed surprise at how much they learned from this book, and you might enjoy seeing Rails from a different perspective.<span class="intersentencespace"></span> <span class="break"></span></p>
<p>After finishing the <em>Ruby on Rails Tutorial</em>, I recommend that experienced programmers read <a href="http://www.amazon.com/gp/product/1933988657"><em>The Well-Grounded Rubyist</em></a> by David A. Black, <a href="http://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional-Series/dp/0321584104/"><em>Eloquent Ruby</em></a> by Russ Olsen, or <a href="http://www.amazon.com/gp/product/0672328844"><em>The Ruby Way</em></a> by Hal Fulton, which is also fairly advanced but takes a more topical approach.<span class="intersentencespace"></span> <span class="break"></span></p>
<p>At the end of this process, no matter where you started, you should be ready for the many more intermediate-to-advanced Rails resources out there.<span class="intersentencespace"></span> Here are some I particularly recommend:</p>
<ul><li><a href="http://railscasts.com/">RailsCasts</a> by Ryan Bates: Excellent (mostly) free Rails screencasts
</li>
<li><a href="http://www.gotealeaf.com/railstutorial">Tealeaf Academy</a>: a good online Rails development bootcamp (includes advanced material)
</li>
<li><a href="http://mbsy.co/6VQ8l">Code School</a>: Interactive programming courses
</li>
<li><a href="http://guides.rubyonrails.org/">Rails Guides</a>: Good topical and up-to-date Rails references
</li></ul></div>
<div id="uid28" data-tralics-id="uid28" class="subsection" data-number="1.1.2"><h3><a href="beginning_fragment.html#uid28" class="heading hyperref"><span class="number">1.1.2 </span>“Scaling” Rails</a></h3>
<p>Before moving on with the rest of the introduction, I’d like to take a moment to address the one issue that dogged the Rails framework the most in its early days: the supposed inability of Rails to “scale”—i.e., to handle large amounts of traffic.<span class="intersentencespace"></span> Part of this issue relied on a misconception; <a href="http://idleprocess.wordpress.com/2009/11/24/presentation-summary-high-performance-at-massive-scale-lessons-learned-at-facebook/">you scale a <em>site</em>, not a framework</a>, and Rails, as awesome as it is, is only a framework.<span class="intersentencespace"></span> So the real question should have been, “Can a site built with Rails scale?”<span class="intersentencespace"></span> In any case, the question has now been definitively answered in the affirmative: some of the most heavily trafficked sites in the world use Rails.<span class="intersentencespace"></span> Actually <em>doing</em> the scaling is beyond the scope of just Rails, but rest assured that if <em>your</em> application ever needs to handle the load of Hulu or the Yellow Pages, Rails won’t stop you from taking over the world.</p>
</div>
<div id="sec-conventions" data-tralics-id="uid29" class="subsection" data-number="1.1.3"><h3><a href="beginning_fragment.html#sec-conventions" class="heading hyperref"><span class="number">1.1.3 </span>Conventions in this book</a></h3>
<p>The conventions in this book are mostly self-explanatory.<span class="intersentencespace"></span> In this section, I’ll mention some that may not be.</p>
<p>Both the <a href="http://railstutorial.org/book">HTML</a> and <a href="http://railstutorial.org/">PDF</a> editions of this book are full of links, both to internal sections (such as <a href="beginning_fragment.html#sec-up_and_running" class="hyperref">Section <span class="ref">1.2</span></a>) and to external sites (such as the main <a href="http://rubyonrails.org/download">Ruby on Rails download</a> page).<sup id="cha-1_footnote-ref-5" class="footnote"><a href="#cha-1_footnote-5">5</a></sup></p>
<p>Many examples in this book use command-line commands.<span class="intersentencespace"></span> For simplicity, all command line examples use a Unix-style command line prompt (a dollar sign), as follows:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">echo</span> <span class="s2">"hello, world"</span>
<span class="go">hello, world</span>
</pre></div></div>
<p>Windows users should understand that their systems will use the analogous angle prompt <code>&gt;</code>:</p>
<div class="code"><div class="highlight"><pre><span class="go">C:\Sites&gt; echo "hello, world"</span>
<span class="go">hello, world</span>
</pre></div></div>
<p>On Unix systems, some commands should be executed with <code>sudo</code>, which stands for “substitute user do”.<sup id="cha-1_footnote-ref-6" class="footnote intersentence"><a href="#cha-1_footnote-6">6</a></sup><span class="intersentencespace"></span> By default, a command executed with <code>sudo</code> is run as an administrative user, which has access to files and directories that normal users can’t touch, such as in this example from <a href="beginning_fragment.html#sec-rubygems" class="hyperref">Section <span class="ref">1.2.2</span></a>:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> sudo ruby setup.rb
</pre></div></div>
<p>Most Unix/Linux/OS X systems require <code>sudo</code> by default, unless you are using Ruby Version Manager as suggested in <a href="beginning_fragment.html#sec-install_ruby" class="hyperref">Section <span class="ref">1.2.2.3</span></a>; in this case, you would type this instead:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> ruby setup.rb
</pre></div></div>
<p>Rails comes with lots of commands that can be run at the command line.<span class="intersentencespace"></span> For example, in <a href="beginning_fragment.html#sec-rails_server" class="hyperref">Section <span class="ref">1.2.5</span></a> we’ll run a local development web server as follows:</p>
<div class="code"><div class="highlight"><pre><span class="nv">$ </span>rails server
</pre></div></div>
<p>As with the command-line prompt, the <em>Rails Tutorial</em> uses the Unix convention for directory separators (i.e., a forward slash <code>/</code>).<span class="intersentencespace"></span> My Rails Tutorial sample application, for instance, lives in</p>
<div class="code"><div class="highlight"><pre>/Users/mhartl/rails_projects/sample_app
</pre></div></div>
<p>On Windows, the analogous directory would be</p>
<div class="code"><div class="highlight"><pre>C:\Sites\sample_app
</pre></div></div>
<p>The root directory for any given app is known as the <em>Rails root</em>, but this terminology is confusing and many people mistakenly believe that the “Rails root” is the root directory for Rails itself.<span class="intersentencespace"></span> For clarity, the <em>Rails Tutorial</em> will refer to the Rails root as the <em>application root</em>, and henceforth all directories will be relative to this directory.<span class="intersentencespace"></span> For example, the <code>config</code> directory of my sample application is</p>
<div class="code"><div class="highlight"><pre>/Users/mhartl/rails_projects/sample_app/config
</pre></div></div>
<p>The application root directory here is everything before <code>config</code>, i.e.,</p>
<div class="code"><div class="highlight"><pre>/Users/mhartl/rails_projects/sample_app
</pre></div></div>
<p>For brevity, when referring to the file</p>
<div class="code"><div class="highlight"><pre>/Users/mhartl/rails_projects/sample_app/config/routes.rb
</pre></div></div>
<p>I’ll omit the application root and simply write <code>config/routes.rb</code>.</p>
<p>The <em>Rails Tutorial</em> often shows output from various programs (shell commands, version control status, Ruby programs, etc.).<span class="intersentencespace"></span> Because of the innumerable small differences between different computer systems, the output you see may not always agree exactly with what is shown in the text,
but this is not cause for concern.</p>
<p>Some commands may produce errors depending on your system; rather than attempt the <a href="http://en.wikipedia.org/wiki/Sisyphus">Sisyphean</a> task of documenting all such errors in this tutorial, I will delegate to the “Google the error message” algorithm, which among other things is good practice for real-life software development.<span class="intersentencespace"></span> If you run into any problems while following the tutorial, I suggest consulting the resources listed on the <a href="http://railstutorial.org/help">Rails Tutorial help page</a>.<sup id="cha-1_footnote-ref-7" class="footnote"><a href="#cha-1_footnote-7">7</a></sup></p>
</div></div><div id="sec-up_and_running" data-tralics-id="cid3" class="section" data-number="1.2"><h2><a href="beginning_fragment.html#sec-up_and_running" class="heading hyperref"><span class="number">1.2 </span>Up and running</a></h2>

 I think of Chapter 1 as the “weeding out phase” in law school—if you can get your dev environment set up, the rest is easy to get through.<span class="intersentencespace"></span> <span class="break"></span> —Bob Cavezza, <em>Rails Tutorial</em> reader 
<p>It’s time now to get going with a Ruby on Rails development environment and our first application.<span class="intersentencespace"></span> There is quite a bit of overhead here, especially if you don’t have extensive programming experience, so don’t get discouraged if it takes a while to get started.<span class="intersentencespace"></span> It’s not just you; every developer goes through it (often more than once), but rest assured that the effort will be richly rewarded.</p>
<div id="sec-development_tools" data-tralics-id="uid33" class="subsection" data-number="1.2.1"><h3><a href="beginning_fragment.html#sec-development_tools" class="heading hyperref"><span class="number">1.2.1 </span>Development environments</a></h3>
<p>Considering various idiosyncratic customizations, there are probably as many development environments as there are Rails programmers, but there are at least two broad types: text editor/command line environments, and integrated development environments (IDEs).<span class="intersentencespace"></span> Let’s consider the latter first.</p>
<div id="uid34" data-tralics-id="uid34" class="subsubsection" data-number="1.2.1.1"><h4><a href="#uid34" class="heading">IDEs</a></h4>
<p>The most prominent Rails IDEs are <a href="http://www.aptana.com/rails/">RadRails</a> and <a href="http://www.jetbrains.com/ruby/index.html">RubyMine</a>.<span class="intersentencespace"></span> I’ve heard especially good things about RubyMine, and one reader (David Loeffler) has assembled <a href="https://github.com/perfectionist/sample_project/wiki">notes on how to use RubyMine with this tutorial</a>.<sup id="cha-1_footnote-ref-8" class="footnote intersentence"><a href="#cha-1_footnote-8">8</a></sup><span class="intersentencespace"></span> If you’re comfortable using an IDE, I suggest taking a look at the options mentioned to see what fits with the way you work.</p>
</div>
<div id="uid36" data-tralics-id="uid36" class="subsubsection" data-number="1.2.1.2"><h4><a href="#uid36" class="heading">Text editors and command lines</a></h4>
<p>Instead of using an IDE, I prefer to use a <em>text editor</em> to edit text, and a <em>command line</em> to issue commands (<a href="beginning_fragment.html#fig-editor_shell" class="hyperref">Figure <span class="ref">1.1</span></a>).<span class="intersentencespace"></span> Which combination you use depends on your tastes and your platform.</p>
<ul><li><strong>Text editor:</strong> I recommend <a href="http://www.sublimetext.com/2">Sublime Text 2</a>, an outstanding cross-platform text editor that is simultaneously easy to learn and industrial-strength.<sup id="cha-1_footnote-ref-9" class="footnote intersentence"><a href="#cha-1_footnote-9">9</a></sup><span class="intersentencespace"></span> Sublime Text is heavily influenced by <a href="http://macromates.com">TextMate</a>, and in fact is compatible with most TextMate customizations, such as snippets and color schemes.<span class="intersentencespace"></span> (TextMate, which is available only on OS X, is still a good choice if you use a Mac.)<span class="intersentencespace"></span> A second excellent choice is <a href="http://www.vim.org/">Vim</a>,<sup id="cha-1_footnote-ref-10" class="footnote"><a href="#cha-1_footnote-10">10</a></sup> versions of which are available for all major platforms.<span class="intersentencespace"></span> Sublime Text can be obtained commercially, whereas Vim can be obtained at no cost; both are industrial-strength editors, but in my experience Sublime Text is <em>much</em> more accessible to beginners.
</li>
<li><strong>Terminal:</strong> On OS X, I recommend either use <a href="http://iterm.sourceforge.net/">iTerm</a> or the native Terminal app.<span class="intersentencespace"></span> On Linux, the default terminal is fine.<span class="intersentencespace"></span> On Windows, many users prefer to develop Rails applications in a virtual machine running Linux, in which case your command-line options reduce to the previous case.<span class="intersentencespace"></span> If developing within Windows itself, I recommend using the command prompt that comes with <a href="http://railsinstaller.org/">Rails Installer</a> (<a href="beginning_fragment.html#sec-rails_installer_windows" class="hyperref">Section <span class="ref">1.2.2.1</span></a>).<span class="intersentencespace"></span>
</li></ul><p>If you decide to use Sublime Text, you might want to follow the optional setup instructions for <a href="https://github.com/mhartl/rails_tutorial_sublime_text">Rails Tutorial Sublime Text</a>.<sup id="cha-1_footnote-ref-11" class="footnote intersentence"><a href="#cha-1_footnote-11">11</a></sup><span class="intersentencespace"></span> (Such configuration settings can be fiddly and error-prone, so I mainly recommend them for more advanced users; Sublime Text is an excellent choice for editing Rails applications even without the advanced setup.)</p>
<div class="center figure" id="fig-editor_shell" data-tralics-id="uid42" data-number="1.1">
<div class="graphics image box"><img src="images/figures/editor_shell.png" alt="images/figures/editor_shell" /></div><div class="caption"><span class="header">Figure 1.1: </span><span class="description">A text editor/command line development environment.<span class="intersentencespace"></span> <a href="http://railstutorial.org/images/figures/editor_shell-full.png">(full size)</a>
</span></div></div>
</div>
<div id="uid43" data-tralics-id="uid43" class="subsubsection" data-number="1.2.1.3"><h4><a href="#uid43" class="heading">Browsers</a></h4>
<p>Although there are many web browsers to choose from, the vast majority of Rails programmers use Firefox, Safari, or Chrome when developing.<span class="intersentencespace"></span> All three browsers include a built-in “Inspect element” feature available by right- (or control-)clicking on any part of the page.</p>
</div>
<div id="uid44" data-tralics-id="uid44" class="subsubsection" data-number="1.2.1.4"><h4><a href="#uid44" class="heading">A note about tools</a></h4>
<p>In the process of getting your development environment up and running, you may find that you spend a <em>lot</em> of time getting everything just right.<span class="intersentencespace"></span> The learning process for editors and IDEs is particularly long; you can spend weeks on Sublime Text or Vim tutorials alone.<span class="intersentencespace"></span> If you’re new to this game, I want to assure you that <em>spending time learning tools is normal</em>.<span class="intersentencespace"></span> Everyone goes through it.<span class="intersentencespace"></span> Sometimes it is frustrating, and it’s easy to get impatient when you have an awesome web app in your head and you <em>just want to learn Rails already</em>, but have to spend a week learning some weird ancient Unix editor just to get started.<span class="intersentencespace"></span> But, as with an apprentice carpenter striving to master the chisel or the <a href="https://en.wikipedia.org/wiki/Block_plane">plane</a>, there is no subsitute for mastering the tools of <em>your</em> trade, and in the end the reward is worth the effort.</p>
</div></div>
<div id="sec-rubygems" data-tralics-id="uid45" class="subsection" data-number="1.2.2"><h3><a href="beginning_fragment.html#sec-rubygems" class="heading hyperref"><span class="number">1.2.2 </span>Ruby, RubyGems, Rails, and Git</a></h3>

 Practically all the software
in the world is either broken or very difficult to use.<span class="intersentencespace"></span> So users dread software.<span class="intersentencespace"></span> They’ve been trained that whenever they try to install something, or even fill out a form online, it’s not going to work.<span class="intersentencespace"></span> <em>I</em> dread installing stuff, and I have a Ph.D. in computer science.<span class="intersentencespace"></span> <span class="break"></span> —Paul Graham, in <em>Founders at Work</em> by Jessica Livingston 
<p>Now it’s time to install Ruby and Rails.<span class="intersentencespace"></span> I’ve done my best to cover as many bases as possible, but systems vary, and many things can go wrong during these steps.<span class="intersentencespace"></span> Be sure to Google the error message or consult the <a href="http://railstutorial.org/help">Rails Tutorial help page</a> if you run into trouble.<span class="intersentencespace"></span> Also, there’s a new resource called <a href="http://www.installrails.com/">Install Rails</a> from <a href="https://onemonthrails.com/">One Month Rails</a> that might help you if you get stuck.</p>
<p><strong>Unless otherwise noted, you should use the exact versions of all software used in the tutorial, including Rails itself, if you want the same results.</strong> Sometimes minor version differences will yield identical results, but you shouldn’t count on this, especially with respect to Rails versions.<span class="intersentencespace"></span> The main exception is Ruby itself: 1.9.3 and 2.0.0 are virtually identical for the purposes of this tutorial, so feel free to use either one.</p>
<div id="sec-rails_installer_windows" data-tralics-id="uid46" class="subsubsection" data-number="1.2.2.1"><h4><a href="#sec-rails_installer_windows" class="heading">Rails Installer (Windows)</a></h4>
<p>Installing Rails on Windows used to be a real pain, but thanks to the efforts of the good people at <a href="http://engineyard.com/">Engine Yard</a>—especially Dr. Nic Williams and Wayne E. Seguin—installing Rails and related software on Windows is now easy.<span class="intersentencespace"></span> If you are using Windows, go to <a href="http://railsinstaller.org/">Rails Installer</a> and download the Rails Installer executable and view the excellent installation video.<span class="intersentencespace"></span> Double-click the executable and follow the instructions to install Git (so you can skip <a href="beginning_fragment.html#sec-install_git" class="hyperref">Section <span class="ref">1.2.2.2</span></a>), Ruby (skip <a href="beginning_fragment.html#sec-install_ruby" class="hyperref">Section <span class="ref">1.2.2.3</span></a>), RubyGems (skip <a href="beginning_fragment.html#sec-install_rubygems" class="hyperref">Section <span class="ref">1.2.2.4</span></a>), and Rails itself (skip <a href="beginning_fragment.html#sec-install_rails" class="hyperref">Section <span class="ref">1.2.2.5</span></a>).<span class="intersentencespace"></span> Once the installation has finished, you can skip right to the creation of the first application in <a href="beginning_fragment.html#sec-the_first_application" class="hyperref">Section <span class="ref">1.2.3</span></a>.</p>
<p>Bear in mind that the Rails Installer might use a slightly different version of Rails from the one installed in <a href="beginning_fragment.html#sec-install_rails" class="hyperref">Section <span class="ref">1.2.2.5</span></a>, which might cause incompatibilities.<span class="intersentencespace"></span> To fix this, I am currently working with Nic and Wayne to create a list of Rails Installers ordered by Rails version number.</p>
</div>
<div id="sec-install_git" data-tralics-id="uid47" class="subsubsection" data-number="1.2.2.2"><h4><a href="#sec-install_git" class="heading">Install Git</a></h4>
<p>Much of the Rails ecosystem depends in one way or another on a <a href="http://en.wikipedia.org/wiki/Revision_control">version control system</a> called <a href="http://git-scm.com/">Git</a> (covered in more detail in <a href="beginning_fragment.html#sec-version_control" class="hyperref">Section <span class="ref">1.3</span></a>).<span class="intersentencespace"></span> Because its use is ubiquitous, you should install Git even at this early stage; I suggest following the installation instructions for your platform at the <a href="http://www.git-scm.com/book/en/Getting-Started-Installing-Git">Installing Git section of <em>Pro Git</em></a>.</p>
</div>
<div id="sec-install_ruby" data-tralics-id="uid48" class="subsubsection" data-number="1.2.2.3"><h4><a href="#sec-install_ruby" class="heading">Install Ruby</a></h4>
<p>The next step is to install Ruby.<span class="intersentencespace"></span> (This can be painful and error-prone, and I actually dread having to install new versions of Ruby, but unfortunately it’s the cost of doing business.)</p>
<p>It’s possible that your system already has Ruby installed.<span class="intersentencespace"></span> Try running</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> ruby -v
</pre></div></div>
<p>to see the version number.<span class="intersentencespace"></span> Rails 4 requires Ruby 1.9 or later and on most systems works best with Ruby 2.0.<span class="intersentencespace"></span> (In particular, it won’t work Ruby 1.8.7.)<span class="intersentencespace"></span> This tutorial assumes that most readers are using Ruby 1.9.3 or 2.0.0, but Ruby 1.9.2 should work as well.<span class="intersentencespace"></span> <strong>Note:</strong> I’ve had reports from Windows users that Ruby 2.0 is sketchy, so I recommend using Ruby 1.9.3 if you’re on Windows.</p>
<p>As part of installing Ruby, if you are using OS X or Linux I strongly recommend using <a href="http://rvm.io/">Ruby Version Manager (RVM)</a> or <a href="https://github.com/sstephenson/rbenv">rbenv</a>, which allow you to install and manage multiple versions of Ruby on the same machine.<span class="intersentencespace"></span> (The <a href="http://github.com/vertiginous/pik">Pik</a> project accomplishes a similar feat on Windows.)<span class="intersentencespace"></span> This is particularly important if you want to run different versions of Ruby or Rails on the same machine.<span class="intersentencespace"></span> Unfortunately, RVM and rbenv can’t be used on the same system simultaneously, and since I’ve been using RVM longer that’s the one I use in this tutorial.<span class="intersentencespace"></span> I hear great things about rbenv, though, so you should feel free to use that if you already know it or if you have access to a local rbenv expert.</p>
<p>As a prerequisite, OS X users may need to install the Xcode developer tools.<span class="intersentencespace"></span> To avoid the (huge) full installation, I recommend the much smaller <a href="https://developer.apple.com/downloads/">Command Line Tools for Xcode</a>.<sup id="cha-1_footnote-ref-12" class="footnote"><a href="#cha-1_footnote-12">12</a></sup></p>
<p>To get started with the Ruby installation, first <a href="http://rvm.io/rvm/install/">install RVM</a>:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> curl -sSL https://get.rvm.io | bash -s stable
</pre></div></div>
<p>(If you have RVM installed, you should run</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> rvm get stable
</pre></div></div>
<p>to ensure that you have the latest version.)</p>
<p>You can then get Ruby set up by examining the requirements for installing it:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> rvm requirements
</pre></div></div>
<p>If you get the message “command not found”, you should run <code>source</code> on the <code>rvm</code> executable:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">source</span> ~/.rvm/scripts/rvm
</pre></div></div>
<p>On my system, I had to install the following (using <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, a package management system for OS X):</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> brew install libtool libxslt libksba openssl
</pre></div></div>
<p>On Linux, you can accomplish similar things with <code>apt-get</code> or <code>yum</code>.</p>
<p>I also had to install a <a href="https://en.wikipedia.org/wiki/YAML">YAML</a> library:</p>
<div class="code"><div class="highlight"><pre><span class="gp">#</span> For Mac with Homebrew
<span class="gp">$</span> brew install libyaml

<span class="gp">#</span> For Debian-based Linux systems
<span class="gp">$</span> apt-get install libyaml-dev

<span class="gp">#</span> For Fedora/CentOS/RHEL Linux systems
<span class="gp">$</span> yum install libyaml-devel
</pre></div></div>
<p>Finally, I needed to tell RVM where OpenSSL was located when installing Ruby 2.0.0:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> rvm install 2.0.0 --with-openssl-dir<span class="o">=</span><span class="nv">$HOME</span>/.rvm/usr
<span class="go">&lt;wait a while&gt;</span>
</pre></div></div>
<p>On some systems, especially on Macs using Homebrew, the location of OpenSSL may be different, and you might have to run this command instead:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> rvm install 2.0.0 --with-openssl-dir<span class="o">=</span><span class="nv">$HOME</span>/.rvm/opt/openssl
<span class="go">&lt;wait a while&gt;</span>
</pre></div></div>
<p>Unfortunately, lots of things can go wrong along the way.<span class="intersentencespace"></span> I’ve done my best to cover some of the most common cases, but the only general solution is web searches and determination.</p>
<p>After installing Ruby, you should configure your system for the other software needed to run Rails applications.<span class="intersentencespace"></span> This typically involves installing <em>gems</em>, which are self-contained packages of Ruby code.<span class="intersentencespace"></span> Since gems with different version numbers sometimes conflict, it is often convenient to create separate <em>gemsets</em>, which are self-contained bundles of gems.<span class="intersentencespace"></span> For the purposes of this tutorial, I suggest creating a gemset called <code>railstutorial_rails_4_0</code>:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> rvm use 2.0.0@railstutorial_rails_4_0 --create --default
<span class="go">Using /Users/mhartl/.rvm/gems/ruby-2.0.0-p0 with gemset railstutorial_rails_4_0</span>
</pre></div></div>
<p>This command creates (<span class="inline_verbatim">--create</span>) the gemset <code>railstutorial_rails_4_0</code> associated with Ruby 2.0.0 while arranging to start using it immediately (<span class="inline_verbatim">use</span>) and setting it as the default (<span class="inline_verbatim">--default</span>) gemset, so that any time we open a new terminal window the <code>2.0.0@railstutorial_rails_4_0</code> Ruby/gemset combination is automatically selected.<span class="intersentencespace"></span> RVM supports a large variety of commands for manipulating gemsets; see the documentation at <a href="http://rvm.io/gemsets/">http://rvm.beginrescueend.com/gemsets/</a>.<span class="intersentencespace"></span> If you ever get stuck with RVM, running commands like these should help you get your bearings:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> rvm <span class="nb">help</span>
<span class="gp">$</span><span class="nb"> </span>rvm gemset <span class="nb">help</span>
</pre></div></div>
<p>For more information on RVM, I also recommend taking a look at the article <a href="http://strandcode.com/2013/07/11/ruby-version-manager-rvm-overview-for-rails-newbs/">Ruby Version Manager (RVM) Overview for Rails Newbs</a>.<sup id="cha-1_footnote-ref-13" class="footnote"><a href="#cha-1_footnote-13">13</a></sup></p>
</div>
<div id="sec-install_rubygems" data-tralics-id="uid51" class="subsubsection" data-number="1.2.2.4"><h4><a href="#sec-install_rubygems" class="heading">Install RubyGems</a></h4>
<p>RubyGems is a package manager for Ruby projects, and there are many useful libraries (including Rails) available as Ruby packages, or <em>gems</em>.<span class="intersentencespace"></span> Installing RubyGems should be easy once you install Ruby.<span class="intersentencespace"></span> In fact, if you have <a href="http://rvm.io/rvm/install/">installed RVM</a>, you already have RubyGems, since RVM includes it automatically:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> which gem
<span class="go">/Users/mhartl/.rvm/rubies/ruby-2.0.0-p0/bin/gem</span>
</pre></div></div>
<p>If you don’t already have it, you should <a href="http://rubygems.org/pages/download">download RubyGems</a>, extract it, and then go to the <code>rubygems</code> directory and run the setup program:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> ruby setup.rb
</pre></div></div>
<p>(If you get a permissions error here, recall from <a href="beginning_fragment.html#sec-conventions" class="hyperref">Section <span class="ref">1.1.3</span></a> that you may have to use <code>sudo</code>.)</p>
<p>If you already have RubyGems installed, you should make sure your system uses the version used in this tutorial:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> gem update --system 2.1.9
</pre></div></div>
<p>Freezing your system to this particular version will help prevent conflicts as RubyGems changes in the future.</p>
<p>When installing gems, by default RubyGems generates two different kinds of documentation (called ri and rdoc), but many Ruby and Rails developers find that the time to build them isn’t worth the benefit.<span class="intersentencespace"></span> (Many programmers rely on online documentation instead of the native ri and rdoc documents.)<span class="intersentencespace"></span> To prevent the automatic generation of the documentation, I recommend making a gem configuration file called <code>.gemrc</code> in your home directory as in <a href="beginning_fragment.html#code-create_gemrc" class="hyperref">Listing <span class="ref">1.1</span></a> with the line in <a href="beginning_fragment.html#code-gemrc" class="hyperref">Listing <span class="ref">1.2</span></a>.<span class="intersentencespace"></span> (The tilde “<span class="inline_verbatim">~</span>” means “home directory”, while the dot <span class="inline_verbatim">.</span> in <code>.gemrc</code> makes the file hidden, which is a common convention for configuration files.<span class="intersentencespace"></span> )</p>
<div class="codelisting" id="code-create_gemrc" data-tralics-id="uid52" data-number="1.1"><div class="heading"><span class="number">Listing 1.1:</span> 

<span class="description">Creating a gem configuration file.</span>
</div>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> subl ~/.gemrc
</pre></div></div></div><p>Here <code>subl</code> is the command-line command to launch Sublime Text on OS X, which you can set up using the <a href="http://www.sublimetext.com/docs/2/osx_command_line.html">Sublime Text 2 documentation for the OS X command line</a>.<span class="intersentencespace"></span> If you’re on a different platform, or if you’re using a different editor, you should replace this command as necessary (i.e., by double-clicking the application icon or by using an alternate command such as <code>mate</code>, <code>vim</code>, <code>gvim</code>, or <code>mvim</code>).<span class="intersentencespace"></span> For brevity, throughout the rest of this tutorial I’ll use <code>subl</code> as a shorthand for “open with your favorite text editor.”</p>
<div class="codelisting" id="code-gemrc" data-tralics-id="uid53" data-number="1.2"><div class="heading"><span class="number">Listing 1.2:</span> 

<span class="description">Suppressing the ri and rdoc documentation in <code>.gemrc</code>.</span>
</div>

<div class="code"><div class="highlight"><pre><span class="ss">install</span><span class="p">:</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">rdoc</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">ri</span>
<span class="ss">update</span><span class="p">:</span>  <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">rdoc</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">ri</span>
</pre></div></div></div></div>
<div id="sec-install_rails" data-tralics-id="uid54" class="subsubsection" data-number="1.2.2.5"><h4><a href="#sec-install_rails" class="heading">Install Rails</a></h4>
<p>Once you’ve installed RubyGems, installing Rails should be easy.<span class="intersentencespace"></span> This tutorial standardizes on Rails 4.0, which we can install as follows:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> gem install rails --version 4.0.5
</pre></div></div>
<p>To check your Rails installation, run the following command to print out the version number:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails -v
<span class="go">Rails 4.0.5</span>
</pre></div></div>
<p><strong>Important note:</strong> Be sure <em>not</em> to install Rails 4.1, which is not compatible with this tutorial.<span class="intersentencespace"></span> (The upcoming 3rd edition will use Rails 4.1 or later.)</p>
<p><em>Note:</em> If you installed Rails using the Rails Installer in <a href="beginning_fragment.html#sec-rails_installer_windows" class="hyperref">Section <span class="ref">1.2.2.1</span></a>, there might be slight version differences.<span class="intersentencespace"></span> As of this writing, those differences are not relevant, but in the future, as the current Rails version diverges from the one used in this tutorial, these differences may become significant.</p>
<p>If you’re running Linux, you might have to install a couple of other packages at this point:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> sudo apt-get install libxslt-dev libxml2-dev libsqlite3-dev <span class="c"># Linux only</span>
</pre></div></div>
<p>or</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> sudo yum install libxslt-devel libxml2-devel libsqlite3-devel
</pre></div></div>
</div></div>
<div id="sec-the_first_application" data-tralics-id="uid55" class="subsection" data-number="1.2.3"><h3><a href="beginning_fragment.html#sec-the_first_application" class="heading hyperref"><span class="number">1.2.3 </span>The first application</a></h3>
<p>Virtually all Rails applications start the same way, by running <code>rails new</code> command.<span class="intersentencespace"></span> This handy command creates a skeleton Rails application in a directory of your choice.<span class="intersentencespace"></span> To get started, make a directory for your Rails projects and then run <code>rails new</code> to make the first application (<a href="beginning_fragment.html#code-rails_command" class="hyperref">Listing <span class="ref">1.3</span></a>):</p>
<div class="codelisting" id="code-rails_command" data-tralics-id="uid56" data-number="1.3"><div class="heading"><span class="number">Listing 1.3:</span> 

<span class="description">Running <code>rails new</code> to generate a new application.</span>
</div>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> mkdir rails_projects
<span class="gp">$</span> <span class="nb">cd </span>rails_projects
<span class="gp">$</span> rails new first_app
<span class="go">      create</span>
<span class="go">      create  README.rdoc</span>
<span class="go">      create  Rakefile</span>
<span class="go">      create  config.ru</span>
<span class="go">      create  .gitignore</span>
<span class="go">      create  Gemfile</span>
<span class="go">      create  app</span>
<span class="go">      create  app/assets/javascripts/application.js</span>
<span class="go">      create  app/assets/stylesheets/application.css</span>
<span class="go">      create  app/controllers/application_controller.rb</span>
<span class="go">      .</span>
<span class="go">      .</span>
<span class="go">      .</span>
<span class="go">      create  test/test_helper.rb</span>
<span class="go">      create  tmp/cache</span>
<span class="go">      create  tmp/cache/assets</span>
<span class="go">      create  vendor/assets/javascripts</span>
<span class="go">      create  vendor/assets/javascripts/.keep</span>
<span class="go">      create  vendor/assets/stylesheets</span>
<span class="go">      create  vendor/assets/stylesheets/.keep</span>
<span class="go">         run  bundle install</span>
<span class="go">.</span>
<span class="go">.</span>
<span class="go">.</span>
<span class="go">Your bundle is complete! Use `bundle show [gemname]` to see where a bundled</span>
<span class="go">gem is installed.</span>
</pre></div></div></div><p>As seen at the end of <a href="beginning_fragment.html#code-rails_command" class="hyperref">Listing <span class="ref">1.3</span></a>, running <code>rails new</code> automatically runs the <code>bundle install</code> command after the file creation is done.<span class="intersentencespace"></span> If that step doesn’t work right now, don’t worry; follow the steps in <a href="beginning_fragment.html#sec-bundler" class="hyperref">Section <span class="ref">1.2.4</span></a> and you should be able to get it to work.</p>
<p>Notice how many files and directories the <code>rails</code> command creates.<span class="intersentencespace"></span> This standard directory and file structure (<a href="beginning_fragment.html#fig-directory_structure_rails" class="hyperref">Figure <span class="ref">1.2</span></a>) is one of the many advantages of Rails; it immediately gets you from zero to a functional (if minimal) application.<span class="intersentencespace"></span> Moreover, since the structure is common to all Rails apps, you can immediately get your bearings when looking at someone else’s code.<span class="intersentencespace"></span> A summary of the default Rails files appears in <a href="beginning_fragment.html#table-rails_directory_structure" class="hyperref">Table <span class="ref">1.1</span></a>; we’ll learn about most of these files and directories throughout the rest of this book.<span class="intersentencespace"></span> In particular, starting in <a href="filling_in_the_layout_fragment.html#sec-the_asset_pipeline" class="hyperref">Section <span class="ref">5.2.1</span></a> we’ll discuss the <code>app/assets</code> directory, part of the <em>asset pipeline</em> that makes it easier than ever to organize and deploy assets such as cascading style sheets and JavaScript files.</p>
<div class="center figure" id="fig-directory_structure_rails" data-tralics-id="uid57" data-number="1.2">
<div class="graphics image box"><img src="images/figures/directory_structure_rails_4_0.png" alt="images/figures/directory_structure_rails_4_0" /></div><div class="caption"><span class="header">Figure 1.2: </span><span class="description">The directory structure for a newly created Rails app.
</span></div></div>
<div class="table" id="table-rails_directory_structure" data-tralics-id="uid58" data-number="1.1"><table class="tabular"><tr class="bottom_border"><td class="align_left"><strong>File/Directory</strong></td>
<td class="align_left"><strong>Purpose</strong></td>
</tr><tr><td class="align_left"><code>app/</code></td>
<td class="align_left">Core application (app) code, including models, views, controllers, and helpers</td>
</tr><tr><td class="align_left"><code>app/assets</code></td>
<td class="align_left">Applications assets such as cascading style sheets (CSS), JavaScript files, and images</td>
</tr><tr><td class="align_left"><code>bin/</code></td>
<td class="align_left">Binary executable files</td>
</tr><tr><td class="align_left"><code>config/</code></td>
<td class="align_left">Application configuration</td>
</tr><tr><td class="align_left"><code>db/</code></td>
<td class="align_left">Database files</td>
</tr><tr><td class="align_left"><code>doc/</code></td>
<td class="align_left">Documentation for the application</td>
</tr><tr><td class="align_left"><code>lib/</code></td>
<td class="align_left">Library modules</td>
</tr><tr><td class="align_left"><code>lib/assets</code></td>
<td class="align_left">Library assets such as cascading style sheets (CSS), JavaScript files, and images</td>
</tr><tr><td class="align_left"><code>log/</code></td>
<td class="align_left">Application log files</td>
</tr><tr><td class="align_left"><code>public/</code></td>
<td class="align_left">Data accessible to the public (e.g., web browsers), such as error pages</td>
</tr><tr><td class="align_left"><code>bin/rails</code></td>
<td class="align_left">A program for generating code, opening console sessions, or starting a local server</td>
</tr><tr><td class="align_left"><code>test/</code></td>
<td class="align_left">Application tests (made obsolete by the <code>spec/</code> directory in <a href="static_pages_fragment.html#sec-static_pages" class="hyperref">Section <span class="ref">3.1</span></a>)</td>
</tr><tr><td class="align_left"><code>tmp/</code></td>
<td class="align_left">Temporary files</td>
</tr><tr><td class="align_left"><code>vendor/</code></td>
<td class="align_left">Third-party code such as plugins and gems</td>
</tr><tr><td class="align_left"><code>vendor/assets</code></td>
<td class="align_left">Third-party assets such as cascading style sheets (CSS), JavaScript files, and images</td>
</tr><tr><td class="align_left"><code>README.rdoc</code></td>
<td class="align_left">A brief description of the application</td>
</tr><tr><td class="align_left"><code>Rakefile</code></td>
<td class="align_left">Utility tasks available via the <code>rake</code> command</td>
</tr><tr><td class="align_left"><code>Gemfile</code></td>
<td class="align_left">Gem requirements for this app</td>
</tr><tr><td class="align_left"><code>Gemfile.lock</code></td>
<td class="align_left">A list of gems used to ensure that all copies of the app use the same gem versions</td>
</tr><tr><td class="align_left"><code>config.ru</code></td>
<td class="align_left">A configuration file for <a href="http://rack.github.io/">Rack middleware</a></td>
</tr><tr><td class="align_left"><code>.gitignore</code></td>
<td class="align_left">Patterns for files that should be ignored by Git</td>
</tr></table><div class="caption"><span class="header">Table 1.1: </span><span class="description">A summary of the default Rails directory structure.
</span></div></div>
</div>
<div id="sec-bundler" data-tralics-id="uid59" class="subsection" data-number="1.2.4"><h3><a href="beginning_fragment.html#sec-bundler" class="heading hyperref"><span class="number">1.2.4 </span>Bundler</a></h3>
<p>After creating a new Rails application, the next step is to use <em>Bundler</em> to install and include the gems needed by the app.<span class="intersentencespace"></span> As noted briefly in <a href="beginning_fragment.html#sec-the_first_application" class="hyperref">Section <span class="ref">1.2.3</span></a>, Bundler is run automatically (via <code>bundle install</code>) by the <code>rails</code> command, but in this section we’ll make some changes to the default application gems and run Bundler again.<span class="intersentencespace"></span> This involves opening the <code>Gemfile</code> with your favorite text editor:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">cd </span>first_app/
<span class="gp">$</span> subl Gemfile
</pre></div></div>
<p>The result should look something like <a href="beginning_fragment.html#code-default_gemfile" class="hyperref">Listing <span class="ref">1.4</span></a>.<span class="intersentencespace"></span> The code in this file is Ruby, but don’t worry at this point about the syntax; <a href="rails_flavored_ruby_fragment.html#cha-rails_flavored_ruby" class="hyperref">Chapter <span class="ref">4</span></a> will cover Ruby in more depth.</p>
<div class="codelisting" id="code-default_gemfile" data-tralics-id="uid60" data-number="1.4"><div class="heading"><span class="number">Listing 1.4:</span> 

<span class="description">The default <code>Gemfile</code> in the <code>first_app</code> directory.</span>
</div>

<div class="code"><div class="highlight"><pre><span class="n">source</span> <span class="s1">'https://rubygems.org'</span>

<span class="c1"># Use sqlite3 as the database for Active Record</span>
<span class="n">gem</span> <span class="s1">'sqlite3'</span>

<span class="c1"># Use SCSS for stylesheets</span>
<span class="n">gem</span> <span class="s1">'sass-rails'</span><span class="p">,</span> <span class="s1">'~&gt; 4.0.1'</span>

<span class="c1"># Use Uglifier as compressor for JavaScript assets</span>
<span class="n">gem</span> <span class="s1">'uglifier'</span><span class="p">,</span> <span class="s1">'&gt;= 1.3.0'</span>

<span class="c1"># Use CoffeeScript for .js.coffee assets and views</span>
<span class="n">gem</span> <span class="s1">'coffee-rails'</span><span class="p">,</span> <span class="s1">'~&gt; 4.0.0'</span>

<span class="c1"># See https://github.com/sstephenson/execjs#readme for more supported runtimes</span>
<span class="c1"># gem 'therubyracer', platforms: :ruby</span>

<span class="c1"># Use jquery as the JavaScript library</span>
<span class="n">gem</span> <span class="s1">'jquery-rails'</span>

<span class="c1"># Turbolinks makes following links in your web application faster.</span>
<span class="c1"># Read more: https://github.com/rails/turbolinks</span>
<span class="n">gem</span> <span class="s1">'turbolinks'</span>

<span class="c1"># Build JSON APIs with ease. Read more: https://github.com/rails/jbuilder</span>
<span class="n">gem</span> <span class="s1">'jbuilder'</span><span class="p">,</span> <span class="s1">'~&gt; 1.0.1'</span>

<span class="n">group</span> <span class="ss">:doc</span> <span class="k">do</span>
  <span class="c1"># bundle exec rake doc:rails generates the API under doc/api.</span>
  <span class="n">gem</span> <span class="s1">'sdoc'</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span>
<span class="k">end</span>

<span class="c1"># Use ActiveModel has_secure_password</span>
<span class="c1"># gem 'bcrypt-ruby', '~&gt; 3.1.2'</span>

<span class="c1"># Use unicorn as the app server</span>
<span class="c1"># gem 'unicorn'</span>

<span class="c1"># Use Capistrano for deployment</span>
<span class="c1"># gem 'capistrano', group: :development</span>

<span class="c1"># Use debugger</span>
<span class="c1"># gem 'debugger', group: [:development, :test]</span>
</pre></div></div></div><p>Many of these lines are commented out with the hash symbol <code>#</code>; they are there to show you some commonly needed gems and to give examples of the Bundler syntax.<span class="intersentencespace"></span> For now, we won’t need any gems other than the defaults.</p>
<p>Unless you specify a version number to the <code>gem</code> command, Bundler will automatically install the latest version of the gem.<span class="intersentencespace"></span> Unfortunately, gem updates often cause minor but potentially confusing breakage, so in this tutorial we’ll include explicit version numbers known to work, as seen in <a href="beginning_fragment.html#code-gemfile_sqlite_version" class="hyperref">Listing <span class="ref">1.5</span></a> (which also omits the commented-out lines from <a href="beginning_fragment.html#code-default_gemfile" class="hyperref">Listing <span class="ref">1.4</span></a>).</p>
<div class="codelisting" id="code-gemfile_sqlite_version" data-tralics-id="uid61" data-number="1.5"><div class="heading"><span class="number">Listing 1.5:</span> 

<span class="description">A <code>Gemfile</code> with an explicit version for each Ruby gem.</span>
</div>

<div class="code"><div class="highlight"><pre><span class="n">source</span> <span class="s1">'https://rubygems.org'</span>
<span class="n">ruby</span> <span class="s1">'2.0.0'</span>
<span class="c1">#ruby-gemset=railstutorial_rails_4_0</span>

<span class="n">gem</span> <span class="s1">'rails'</span><span class="p">,</span> <span class="s1">'4.0.5'</span>

<span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">'sqlite3'</span><span class="p">,</span> <span class="s1">'1.3.8'</span>
<span class="k">end</span>

<span class="n">gem</span> <span class="s1">'sass-rails'</span><span class="p">,</span> <span class="s1">'4.0.1'</span>
<span class="n">gem</span> <span class="s1">'uglifier'</span><span class="p">,</span> <span class="s1">'2.1.1'</span>
<span class="n">gem</span> <span class="s1">'coffee-rails'</span><span class="p">,</span> <span class="s1">'4.0.1'</span>
<span class="n">gem</span> <span class="s1">'jquery-rails'</span><span class="p">,</span> <span class="s1">'3.0.4'</span>
<span class="n">gem</span> <span class="s1">'turbolinks'</span><span class="p">,</span> <span class="s1">'1.1.1'</span>
<span class="n">gem</span> <span class="s1">'jbuilder'</span><span class="p">,</span> <span class="s1">'1.0.2'</span>

<span class="n">group</span> <span class="ss">:doc</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">'sdoc'</span><span class="p">,</span> <span class="s1">'0.3.20'</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span>
<span class="k">end</span>
</pre></div></div></div><p><a href="beginning_fragment.html#code-gemfile_sqlite_version" class="hyperref">Listing <span class="ref">1.5</span></a> adds the lines</p>
<div class="code"><div class="highlight"><pre><span class="n">ruby</span> <span class="s1">'2.0.0'</span>
<span class="c1">#ruby-gemset=railstutorial_rails_4_0</span>
</pre></div></div>
<p>identifying the version of Ruby expected by the application (especially useful when deploying applications (<a href="beginning_fragment.html#sec-deploying" class="hyperref">Section <span class="ref">1.4</span></a>)), along with the RVM gemset (<a href="beginning_fragment.html#sec-install_ruby" class="hyperref">Section <span class="ref">1.2.2.3</span></a>).<span class="intersentencespace"></span> Because the gemset line starts with <code>#</code>, which is the Ruby comment character, it will be ignored if you aren’t using RVM, but if you are RVM will conveniently use the right Ruby version/gemset combination upon entering the application directory.<span class="intersentencespace"></span> (If you are using a version of Ruby other than 2.0.0, you should change the Ruby version line accordingly.)</p>
<p>The updated <code>Gemfile</code> also changes the line for jQuery, the default JavaScript library used by Rails, from</p>
<div class="code"><div class="highlight"><pre><span class="n">gem</span> <span class="s1">'jquery-rails'</span>
</pre></div></div>
<p>to</p>
<div class="code"><div class="highlight"><pre><span class="n">gem</span> <span class="s1">'jquery-rails'</span><span class="p">,</span> <span class="s1">'3.0.4'</span>
</pre></div></div>
<p>We’ve also changed</p>
<div class="code"><div class="highlight"><pre><span class="n">gem</span> <span class="s1">'sqlite3'</span>
</pre></div></div>
<p>to</p>
<div class="code"><div class="highlight"><pre><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">'sqlite3'</span><span class="p">,</span> <span class="s1">'1.3.8'</span>
<span class="k">end</span>
</pre></div></div>
<p>which forces Bundler to install version <code>1.3.8</code> of the <code>sqlite3</code> gem.<span class="intersentencespace"></span> Note that we’ve also taken this opportunity to arrange for the gem to be included only in a development environment (<a href="sign_up_fragment.html#sec-rails_environments" class="hyperref">Section <span class="ref">7.1.1</span></a>), which prevents potential conflicts with the database used by Heroku (<a href="beginning_fragment.html#sec-deploying" class="hyperref">Section <span class="ref">1.4</span></a>).</p>
<p><a href="beginning_fragment.html#code-gemfile_sqlite_version" class="hyperref">Listing <span class="ref">1.5</span></a> also changes a few other lines, converting</p>
<div class="code"><div class="highlight"><pre><span class="c1"># Use SCSS for stylesheets</span>
<span class="n">gem</span> <span class="s1">'sass-rails'</span><span class="p">,</span> <span class="s1">'~&gt; 4.0.0'</span>

<span class="c1"># Use Uglifier as compressor for JavaScript assets</span>
<span class="n">gem</span> <span class="s1">'uglifier'</span><span class="p">,</span> <span class="s1">'&gt;= 1.3.0'</span>

<span class="c1"># Use CoffeeScript for .js.coffee assets and views</span>
<span class="n">gem</span> <span class="s1">'coffee-rails'</span><span class="p">,</span> <span class="s1">'~&gt; 4.0.0'</span>
</pre></div></div>
<p>to</p>
<div class="code"><div class="highlight"><pre><span class="n">gem</span> <span class="s1">'sass-rails'</span><span class="p">,</span>   <span class="s1">'4.0.1'</span>
<span class="n">gem</span> <span class="s1">'uglifier'</span><span class="p">,</span> <span class="s1">'2.1.1'</span>
<span class="n">gem</span> <span class="s1">'coffee-rails'</span><span class="p">,</span> <span class="s1">'4.0.1'</span>
</pre></div></div>
<p>The syntax</p>
<div class="code"><div class="highlight"><pre><span class="n">gem</span> <span class="s1">'uglifier'</span><span class="p">,</span> <span class="s1">'&gt;= 1.3.0'</span>
</pre></div></div>
<p>installs the latest version of the <code>uglifier</code> gem (which handles file compression for the asset pipeline) as long as it’s greater than or equal to version <code>1.3.0</code>—even if it’s, say, version <code>7.2</code>.<span class="intersentencespace"></span> Meanwhile, the code</p>
<div class="code"><div class="highlight"><pre><span class="n">gem</span> <span class="s1">'coffee-rails'</span><span class="p">,</span> <span class="s1">'~&gt; 4.0.0'</span>
</pre></div></div>
<p>installs the gem <code>coffee-rails</code> (also needed by the asset pipeline) as long as it’s newer than version <code>4.0.0</code> but not newer than <code>4.1</code>.<span class="intersentencespace"></span> In other words, the <span class="inline_verbatim">&gt;=</span> notation always installs the latest gem when you run <code>bundle install</code>, whereas the <span class="inline_verbatim">~&gt; 4.0.0</span> notation only installs updated gems representing minor point releases (e.g., from <code>4.0.0</code> to <code>4.0.1</code>), but not major point releases (e.g., from <code>4.0</code> to <code>4.1</code>).<span class="intersentencespace"></span> Unfortunately, experience shows that even minor point releases can break things, so for the <em>Rails Tutorial</em> we’ll err on the side of caution by including exact version numbers for virtually all gems.<span class="intersentencespace"></span> You are welcome to use the most up-to-date version of any gem, including using the <span class="inline_verbatim">~&gt;</span> construction in the <code>Gemfile</code> (which I generally recommend for more advanced users), but be warned that this may cause the tutorial to act unpredictably.</p>
<p>Once you’ve assembled the proper <code>Gemfile</code>, install the gems using
<code>bundle update</code><sup id="cha-1_footnote-ref-14" class="footnote"><a href="#cha-1_footnote-14">14</a></sup> and <code>bundle install</code>:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle update
<span class="gp">$</span> bundle install
<span class="go">Fetching source index for https://rubygems.org/</span>
<span class="go">.</span>
<span class="go">.</span>
<span class="go">.</span>
</pre></div></div>
<p>The <code>bundle install</code> command might take a few moments, but when it’s done our application will be ready to run.</p>
</div>
<div id="sec-rails_server" data-tralics-id="uid63" class="subsection" data-number="1.2.5"><h3><a href="beginning_fragment.html#sec-rails_server" class="heading hyperref"><span class="number">1.2.5 </span><span class="tt">rails server</span></a></h3>
<p>Thanks to running <code>rails new</code> in <a href="beginning_fragment.html#sec-the_first_application" class="hyperref">Section <span class="ref">1.2.3</span></a> and <code>bundle install</code> in <a href="beginning_fragment.html#sec-bundler" class="hyperref">Section <span class="ref">1.2.4</span></a>, we already have an application we can run—but how?<span class="intersentencespace"></span> Happily, Rails comes with a command-line program, or <em>script</em>, that runs a <em>local</em> web server, visible only from your development machine:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails server
<span class="go">=&gt; Booting WEBrick</span>
<span class="go">=&gt; Rails application starting on http://0.0.0.0:3000</span>
<span class="go">=&gt; Call with -d to detach</span>
<span class="go">=&gt; Ctrl-C to shutdown server</span>
</pre></div></div>
<p>(If your system complains about the lack of a JavaScript runtime, visit the <a href="https://github.com/sstephenson/execjs">execjs page at GitHub</a> for a list of possibilities.<span class="intersentencespace"></span> I particularly recommend installing <a href="http://nodejs.org/">Node.js</a>.)<span class="intersentencespace"></span> This tells us that the application is running on <a href="http://en.wikipedia.org/wiki/TCP_and_UDP_port">port number</a> 3000<sup id="cha-1_footnote-ref-15" class="footnote"><a href="#cha-1_footnote-15">15</a></sup> at the address <code>0.0.0.0</code>.<span class="intersentencespace"></span> This address tells the computer to listen on every available IP address configured on that specific machine; in particular, we can view the application using the special address <code>127.0.0.1</code>, which is also known as <code>localhost</code>.<span class="intersentencespace"></span> We can see the result of visiting <a href="http://localhost:3000/">http://localhost:3000/</a> in <a href="beginning_fragment.html#fig-riding_rails" class="hyperref">Figure <span class="ref">1.3</span></a>.</p>
<div class="center figure" id="fig-riding_rails" data-tralics-id="uid65" data-number="1.3">
<div class="graphics image box"><img src="images/figures/riding_rails_4_0.png" alt="images/figures/riding_rails_4_0" /></div><div class="caption"><span class="header">Figure 1.3: </span><span class="description">The default Rails page.
</span></div></div>
<p>To see information about our first application, click on the link “About your application’s environment”.<span class="intersentencespace"></span> The result is shown in <a href="beginning_fragment.html#fig-riding_rails_environment" class="hyperref">Figure <span class="ref">1.4</span></a>.<span class="intersentencespace"></span> (<a href="beginning_fragment.html#fig-riding_rails_environment" class="hyperref">Figure <span class="ref">1.4</span></a> represents the environment on my machine when I made the screenshot; your results may differ.)</p>
<div class="center figure" id="fig-riding_rails_environment" data-tralics-id="uid66" data-number="1.4">
<div class="graphics image box"><img src="images/figures/riding_rails_environment_4_0.png" alt="images/figures/riding_rails_environment_4_0" /></div><div class="caption"><span class="header">Figure 1.4: </span><span class="description">The default page with the app environment.
</span></div></div>
<p>Of course, we don’t need the default Rails page in the long run, but it’s nice to see it working for now.<span class="intersentencespace"></span> We’ll remove the default page (and replace it with a custom home page) in <a href="filling_in_the_layout_fragment.html#sec-rails_routes" class="hyperref">Section <span class="ref">5.3.2</span></a>.</p>
</div>
<div id="sec-mvc" data-tralics-id="uid67" class="subsection" data-number="1.2.6"><h3><a href="beginning_fragment.html#sec-mvc" class="heading hyperref"><span class="number">1.2.6 </span>Model-view-controller (MVC)</a></h3>
<p>Even at this early stage, it’s helpful to get a high-level overview of how Rails applications work (<a href="beginning_fragment.html#fig-MVC" class="hyperref">Figure <span class="ref">1.5</span></a>).<span class="intersentencespace"></span> You might have noticed that the standard Rails application structure (<a href="beginning_fragment.html#fig-directory_structure_rails" class="hyperref">Figure <span class="ref">1.2</span></a>) has an application directory called <code>app/</code> with three subdirectories: <code>models</code>, <code>views</code>, and <code>controllers</code>.<span class="intersentencespace"></span> This is a hint that Rails follows the <a href="http://en.wikipedia.org/wiki/Model-view-controller">model-view-controller</a> (MVC) architectural pattern, which enforces a separation between “domain logic” (also called “business logic”) from the input and presentation logic associated with a graphical user interface (GUI).<span class="intersentencespace"></span> In the case of web applications, the “domain logic” typically consists of data models for things like users, articles, and products, and the GUI is just a web page in a web browser.</p>
<p>When interacting with a Rails application, a browser sends a <em>request</em>, which is received by a web server and passed on to a Rails <em>controller</em>, which is in charge of what to do next.<span class="intersentencespace"></span> In some cases, the controller will immediately render a <em>view</em>, which is a template that gets converted to HTML and sent back to the browser.<span class="intersentencespace"></span> More commonly for dynamic sites, the controller interacts with a <em>model</em>, which is a Ruby object that represents an element of the site (such as a user) and is in charge of communicating with the database.<span class="intersentencespace"></span> After invoking the model, the controller then renders the view and returns the complete web page to the browser as HTML.</p>
<div class="center figure" id="fig-MVC" data-tralics-id="uid68" data-number="1.5"><span class="graphics"><img src="images/figures/mvc_schematic.png" alt="mvc_schematic" /></span>
<div class="caption"><span class="header">Figure 1.5: </span><span class="description">A schematic representation of the model-view-controller (MVC) architecture.
</span></div></div>
<p>If this discussion seems a bit abstract right now, worry not; we’ll refer back to this section frequently.<span class="intersentencespace"></span> In addition, <a href="demo_app_fragment.html#sec-mvc_in_action" class="hyperref">Section <span class="ref">2.2.2</span></a> has a more detailed discussion of MVC in the context of the demo app.<span class="intersentencespace"></span> Finally, the sample app will use all aspects of MVC; we’ll cover controllers and views starting in <a href="static_pages_fragment.html#sec-static_pages" class="hyperref">Section <span class="ref">3.1</span></a>, models starting in <a href="modeling_users_fragment.html#sec-user_model" class="hyperref">Section <span class="ref">6.1</span></a>, and we’ll see all three working together in <a href="sign_up_fragment.html#sec-a_users_resource" class="hyperref">Section <span class="ref">7.1.2</span></a>.</p>
</div></div><div id="sec-version_control" data-tralics-id="cid4" class="section" data-number="1.3"><h2><a href="beginning_fragment.html#sec-version_control" class="heading hyperref"><span class="number">1.3 </span>Version control with Git</a></h2>
<p>Now that we have a fresh and working Rails application, we’ll take a moment for a step that, while technically optional, would be viewed by many Rails developers as practically essential, namely, placing our application source code under <em>version control</em>.<span class="intersentencespace"></span> Version control systems allow us to track changes to our project’s code, collaborate more easily, and roll back any inadvertent errors (such as accidentally deleting files).<span class="intersentencespace"></span> Knowing how to use a version control system is a required skill for every software developer.</p>
<p>There are many options for version control, but the Rails community has largely standardized on <a href="http://git-scm.com/">Git</a>, a distributed version control system originally developed by Linus Torvalds to host the Linux kernel.<span class="intersentencespace"></span> Git is a large subject, and we’ll only be scratching the surface in this book, but there are many good free resources online; I especially recommend <a href="http://git-scm.com/book"><em>Pro Git</em></a> by Scott Chacon (Apress, 2009).<span class="intersentencespace"></span> Putting your source code under version control with Git is <em>strongly</em> recommended, not only because it’s nearly a universal practice in the Rails world, but also because it will allow you to share your code more easily (<a href="beginning_fragment.html#sec-github" class="hyperref">Section <span class="ref">1.3.4</span></a>) and deploy your application right here in the first chapter (<a href="beginning_fragment.html#sec-deploying" class="hyperref">Section <span class="ref">1.4</span></a>).</p>
<div id="sec-git_setup" data-tralics-id="uid69" class="subsection" data-number="1.3.1"><h3><a href="beginning_fragment.html#sec-git_setup" class="heading hyperref"><span class="number">1.3.1 </span>Installation and setup</a></h3>
<p>The first step is to install Git if you haven’t yet followed the steps in <a href="beginning_fragment.html#sec-install_git" class="hyperref">Section <span class="ref">1.2.2.2</span></a>.<span class="intersentencespace"></span> (As noted in that section, this involves following the instructions in the <a href="http://git-scm.com/book/en/getting-started-installing-git">Installing Git section of <em>Pro Git</em></a>.)</p>
<div id="uid70" data-tralics-id="uid70" class="subsubsection" data-number="1.3.1.1"><h4><a href="#uid70" class="heading">First-time system setup</a></h4>
<p>After installing Git, you should perform a set of one-time setup steps.<span class="intersentencespace"></span> These are <em>system</em> setups, meaning you only have to do them once per computer:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git config --global user.name <span class="s2">"Your Name"</span>
<span class="gp">$</span> git config --global user.email your.email@example.com
</pre></div></div>
<p>I also like to use <code>co</code> in place of the more verbose <code>checkout</code> command, which we can arrange as follows:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git config --global alias.co checkout
</pre></div></div>
<p>This tutorial will usually use the full <code>checkout</code> command, which works for systems that don’t have <code>co</code> configured, but in real life I nearly always use <code>git co</code>.</p>
<p>As a final setup step, you can optionally set the editor Git will use for commit messages.<span class="intersentencespace"></span> If you use a graphical editor such as Sublime Text, TextMate, gVim, or MacVim, you need to use a flag to make sure that the editor stays attached to the shell instead of detaching immediately:<sup id="cha-1_footnote-ref-16" class="footnote"><a href="#cha-1_footnote-16">16</a></sup></p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git config --global core.editor <span class="s2">"subl -w"</span>
</pre></div></div>
<p>Replace <code>"subl -w"</code> with <code>"mate -w"</code> for TextMate, <code>"gvim -f"</code> for gVim, or <code>"mvim -f"</code> for MacVim.</p>
</div>
<div id="uid72" data-tralics-id="uid72" class="subsubsection" data-number="1.3.1.2"><h4><a href="#uid72" class="heading">First-time repository setup</a></h4>
<p>Now we come to some steps that are necessary each time you create a new <em>repository</em>.<span class="intersentencespace"></span> First navigate to the root directory of the first app and initialize a new repository:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git init
<span class="go">Initialized empty Git repository in /Users/mhartl/rails_projects/first_app/.git/</span>
</pre></div></div>
<p>The next step is to add the project files to the repository.<span class="intersentencespace"></span> There’s a minor complication, though: by default Git tracks the changes of <em>all</em> the files, but there are some files we don’t want to track.<span class="intersentencespace"></span> For example, Rails creates log files to record the behavior of the application; these files change frequently, and we don’t want our version control system to have to update them constantly.<span class="intersentencespace"></span> Git has a simple mechanism to ignore such files: simply include a file called <code>.gitignore</code> in the application root directory with some rules telling Git which files to ignore.<sup id="cha-1_footnote-ref-17" class="footnote"><a href="#cha-1_footnote-17">17</a></sup></p>
<p>Looking again at <a href="beginning_fragment.html#table-rails_directory_structure" class="hyperref">Table <span class="ref">1.1</span></a>, we see that the <code>rails</code> command creates a default <code>.gitignore</code> file in the application root directory, as shown in <a href="beginning_fragment.html#code-default_gitignore" class="hyperref">Listing <span class="ref">1.6</span></a>.</p>
<div class="codelisting" id="code-default_gitignore" data-tralics-id="uid74" data-number="1.6"><div class="heading"><span class="number">Listing 1.6:</span> 

<span class="description">The default <code>.gitignore</code> created by the <code>rails</code> command.</span>
</div>

<div class="code"><div class="highlight"><pre># See http://help.github.com/ignore-files/ for more about ignoring files.
#
# If you find yourself ignoring temporary files generated by your text editor
# or operating system, you probably want to add a global ignore instead:
#   git config --global core.excludesfile '~/.gitignore_global'

# Ignore bundler config.
/.bundle

# Ignore the default SQLite database.
/db/*.sqlite3
/db/*.sqlite3-journal

# Ignore all logfiles and tempfiles.
/log/*.log
/tmp
</pre></div></div></div><p><a href="beginning_fragment.html#code-default_gitignore" class="hyperref">Listing <span class="ref">1.6</span></a> causes Git to ignore files such as log files, Rails temporary (<code>tmp</code>) files, and SQLite databases.<span class="intersentencespace"></span> (For example, to ignore log files, which live in the <code>log/</code> directory, we use <code>log/*.log</code> to ignore all files that end in <code>.log</code>.)<span class="intersentencespace"></span> Most of these ignored files change frequently and automatically, so including them under version control is unnecessary.<span class="intersentencespace"></span> Moreover, when collaborating with others, these irrelevant changes can cause frustrating conflicts.</p>
<p>The <code>.gitignore</code> file in <a href="beginning_fragment.html#code-default_gitignore" class="hyperref">Listing <span class="ref">1.6</span></a> is a good start, but for convenience and security (<a href="static_pages_fragment.html#code-secret_token" class="hyperref">Listing <span class="ref">3.2</span></a>) I recommend using <a href="beginning_fragment.html#code-gitignore" class="hyperref">Listing <span class="ref">1.7</span></a> instead.<span class="intersentencespace"></span> This augmented <code>.gitignore</code> arranges to ignore Rails documentation files, Vim and Emacs swap files, and (for OS X users) the weird <code>.DS_Store</code> directories created by the Mac Finder application.<span class="intersentencespace"></span> If you want to use this broader set of ignored files, open up <code>.gitignore</code> in your favorite text editor and fill it with the contents of <a href="beginning_fragment.html#code-gitignore" class="hyperref">Listing <span class="ref">1.7</span></a>.</p>
<div class="codelisting" id="code-gitignore" data-tralics-id="uid75" data-number="1.7"><div class="heading"><span class="number">Listing 1.7:</span> 

<span class="description">An augmented <code>.gitignore</code> file.</span>
</div>

<div class="code"><div class="highlight"><pre># Ignore bundler config.
/.bundle

# Ignore the default SQLite database.
/db/*.sqlite3
/db/*.sqlite3-journal

# Ignore all logfiles and tempfiles.
/log/*.log
/tmp

# Ignore other unneeded files.
database.yml
doc/
*.swp
*~
.project
.DS_Store
.idea
.secret
</pre></div></div></div></div></div>
<div id="sec-adding_and_committing" data-tralics-id="uid76" class="subsection" data-number="1.3.2"><h3><a href="beginning_fragment.html#sec-adding_and_committing" class="heading hyperref"><span class="number">1.3.2 </span>Adding and committing</a></h3>
<p>Finally, we’ll add the files in your new Rails project to Git and then commit the results.<span class="intersentencespace"></span> You can add all the files (apart from those that match the ignore patterns in <code>.gitignore</code>) as follows:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git add .
</pre></div></div>
<p>Here the dot ‘<code>.</code>’ represents the current directory, and Git is smart enough to add the files <em>recursively</em>, so it automatically includes all the subdirectories.<span class="intersentencespace"></span> This command adds the project files to a <em>staging area</em>, which contains pending changes to your project; you can see which files are in the staging area using the <code>status</code> command:<sup id="cha-1_footnote-ref-18" class="footnote"><a href="#cha-1_footnote-18">18</a></sup></p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git status
<span class="gp">#</span> On branch master
<span class="gp">#</span>
<span class="gp">#</span> Initial commit
<span class="gp">#</span>
<span class="gp">#</span> Changes to be committed:
<span class="gp">#</span>   <span class="o">(</span>use <span class="s2">"git rm --cached &lt;file&gt;..."</span> to unstage<span class="o">)</span>
<span class="gp">#</span>
<span class="gp">#</span>       new file:   README.rdoc
<span class="gp">#</span>       new file:   Rakefile
<span class="go">.</span>
<span class="go">.</span>
<span class="go">.</span>
</pre></div></div>
<p>(The results are long, so I’ve used vertical dots to indicate omitted output.)</p>
<p>To tell Git you want to keep the changes, use the <code>commit</code> command:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git commit -m <span class="s2">"Initialize repository"</span>
<span class="go">[master (root-commit) df0a62f] Initialize repository</span>
<span class="go">42 files changed, 8461 insertions(+), 0 deletions(-)</span>
<span class="go">create mode 100644 README.rdoc</span>
<span class="go">create mode 100644 Rakefile</span>
<span class="go">.</span>
<span class="go">.</span>
<span class="go">.</span>
</pre></div></div>
<p>The <code>-m</code> flag lets you add a message for the commit; if you omit <code>-m</code>, Git will open the editor you set in <a href="beginning_fragment.html#sec-git_setup" class="hyperref">Section <span class="ref">1.3.1</span></a> and have you enter the message there.</p>
<p>It is important to note that Git commits are <em>local</em>, recorded only on the machine on which the commits occur.<span class="intersentencespace"></span> This is in contrast to the popular open-source version control system called Subversion, in which a commit necessarily makes changes on a remote repository.<span class="intersentencespace"></span> Git divides a Subversion-style commit into its two logical pieces: a local recording of the changes (<code>git commit</code>) and a push of the changes up to a remote repository (<code>git push</code>).<span class="intersentencespace"></span> We’ll see an example of the push step in <a href="beginning_fragment.html#sec-git_commands" class="hyperref">Section <span class="ref">1.3.5</span></a>.</p>
<p>By the way, you can see a list of your commit messages using the <code>log</code> command:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git log
<span class="go">commit df0a62f3f091e53ffa799309b3e32c27b0b38eb4</span>
<span class="go">Author: Michael Hartl &lt;michael@michaelhartl.com&gt;</span>
<span class="go">Date:   Thu Oct 15 11:36:21 2009 -0700</span>

<span class="go">  Initialize repository</span>
</pre></div></div>
<p>To exit <code>git log</code>, you may have to type <code>q</code> to quit.</p>
</div>
<div id="uid78" data-tralics-id="uid78" class="subsection" data-number="1.3.3"><h3><a href="beginning_fragment.html#uid78" class="heading hyperref"><span class="number">1.3.3 </span>What good does Git do you?</a></h3>
<p>It’s probably not entirely clear at this point why putting your source under version control does you any good, so let me give just one example.<span class="intersentencespace"></span> (We’ll see many others in the chapters ahead.)<span class="intersentencespace"></span> Suppose you’ve made some accidental changes, such as (D’oh!)<span class="intersentencespace"></span> deleting the critical <code>app/controllers/</code> directory:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> ls app/controllers/
<span class="go">application_controller.rb</span>
<span class="gp">$</span> rm -rf app/controllers/
<span class="gp">$</span> ls app/controllers/
<span class="go">ls: app/controllers/: No such file or directory</span>
</pre></div></div>
<p>Here we’re using the Unix <code>ls</code> command to list the contents of the <code>app/controllers/</code> directory and the <code>rm</code> command to remove it.<span class="intersentencespace"></span> The <code>-rf</code> flag means “recursive force”, which recursively removes all files, directories, subdirectories, and so on, without asking for explicit confirmation of each deletion.</p>
<p>Let’s check the status to see what’s up:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git status
<span class="gp">#</span> On branch master
<span class="gp">#</span> Changed but not updated:
<span class="gp">#</span>   <span class="o">(</span>use <span class="s2">"git add/rm &lt;file&gt;..."</span> to update what will be committed<span class="o">)</span>
<span class="gp">#</span>   <span class="o">(</span>use <span class="s2">"git checkout -- &lt;file&gt;..."</span> to discard changes in working directory<span class="o">)</span>
<span class="gp">#</span>
<span class="gp">#</span>       deleted:    app/controllers/application_controller.rb
<span class="gp">#</span>
<span class="go">no changes added to commit (use "git add" and/or "git commit -a")</span>
</pre></div></div>
<p>We see here that a file has been deleted, but the changes are only on the “working tree”; they haven’t been committed yet.<span class="intersentencespace"></span> This means we can still undo the changes easily by having Git check out the previous commit with the <code>checkout</code> command (and a <code>-f</code> flag to force overwriting the current changes):</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git checkout -f
<span class="gp">$</span> git status
<span class="gp">#</span> On branch master
<span class="go">nothing to commit (working directory clean)</span>
<span class="gp">$</span> ls app/controllers/
<span class="go">application_controller.rb</span>
</pre></div></div>
<p>The missing directory and file are back.<span class="intersentencespace"></span> That’s a relief!</p>
</div>
<div id="sec-github" data-tralics-id="uid79" class="subsection" data-number="1.3.4"><h3><a href="beginning_fragment.html#sec-github" class="heading hyperref"><span class="number">1.3.4 </span>GitHub</a></h3>
<p>Now that you’ve put your project under version control with Git, it’s time to push your code up to <a href="http://github.com">GitHub</a>, a social coding site optimized for hosting and sharing Git repositories.<span class="intersentencespace"></span> Putting a copy of your Git repository at GitHub serves two purposes: it’s a full backup of your code (including the full history of commits), and it makes any future collaboration much easier.<span class="intersentencespace"></span> This step is optional, but being a GitHub member will open the door to participating in a wide variety of open-source projects.</p>
<div class="center figure" id="fig-create_first_repository" data-tralics-id="uid80" data-number="1.6">
<div class="graphics image box"><img src="images/figures/create_first_repository_4_0.png" alt="images/figures/create_first_repository_4_0" /></div><div class="caption"><span class="header">Figure 1.6: </span><span class="description">Creating the first app repository at GitHub.
</span></div></div>
<p>GitHub has a variety of paid plans, but for open-source code their services are free, so sign up for a <a href="https://github.com/signup/free">free GitHub account</a> if you don’t have one already.<span class="intersentencespace"></span> (You might have to follow the <a href="http://help.github.com/key-setup-redirect">GitHub tutorial on creating SSH keys</a> first.)<span class="intersentencespace"></span> After signing up, click on the link to <a href="http://github.com/new">create a repository</a> and fill in the information as in <a href="beginning_fragment.html#fig-create_first_repository" class="hyperref">Figure <span class="ref">1.6</span></a>.<span class="intersentencespace"></span> (Take care <em>not</em> to initialize the repository with a <code>README</code> file, as <code>rails new</code> creates one of those automatically.)<span class="intersentencespace"></span> After submitting the form, push up your first application as follows:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git remote add origin https://github.com/&lt;username&gt;/first_app.git
<span class="gp">$</span> git push -u origin master
</pre></div></div>
<p>These commands tell Git that you want to add GitHub as the origin for your main (<em>master</em>) branch and then push your repository up to GitHub.<span class="intersentencespace"></span> (Don’t worry about what the <span class="tt">-u</span> flag does; if you’re curious, do a web search for “git set upstream”.)<span class="intersentencespace"></span> Of course, you should replace <span class="inline_verbatim">&lt;username&gt;</span> with your actual username.<span class="intersentencespace"></span> For example, the command I ran was</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git remote add origin https://github.com/mhartl/first_app.git
</pre></div></div>
<p>The result is a page at GitHub for the first application repository, with file browsing, full commit history, and lots of other goodies (<a href="beginning_fragment.html#fig-github_repository_page" class="hyperref">Figure <span class="ref">1.7</span></a>).</p>
<div class="center figure" id="fig-github_repository_page" data-tralics-id="uid81" data-number="1.7">
<div class="graphics image box"><img src="images/figures/github_repository_page_4_0.png" alt="images/figures/github_repository_page_4_0" /></div><div class="caption"><span class="header">Figure 1.7: </span><span class="description">A GitHub repository page.
</span></div></div>
<p>GitHub also has native applications to augment the command-line interface, so if you’re more comfortable with GUI apps you might want to check out <a href="http://windows.github.com/">GitHub for Windows</a> or <a href="http://mac.github.com/">GitHub for Mac</a>.<span class="intersentencespace"></span> (GitHub for Linux is still just Git, it seems.)</p>
</div>
<div id="sec-git_commands" data-tralics-id="uid82" class="subsection" data-number="1.3.5"><h3><a href="beginning_fragment.html#sec-git_commands" class="heading hyperref"><span class="number">1.3.5 </span>Branch, edit, commit, merge</a></h3>
<p>If you’ve followed the steps in <a href="beginning_fragment.html#sec-github" class="hyperref">Section <span class="ref">1.3.4</span></a>, you might notice that GitHub automatically shows the contents of the <code>README</code> file on the main repository page.<span class="intersentencespace"></span> In our case, since the project is a Rails application generated using the <code>rails</code> command, the <code>README</code> file is the one that comes with Rails (<a href="beginning_fragment.html#fig-rails_readme" class="hyperref">Figure <span class="ref">1.8</span></a>).<span class="intersentencespace"></span> Because of the <code>.rdoc</code> extension on the file, GitHub ensures that it is formatted nicely, but the contents aren’t helpful at all, so in this section we’ll make our first edit by changing the <code>README</code> to describe our project rather than the Rails framework itself.<span class="intersentencespace"></span> In the process, we’ll see a first example of the branch, edit, commit, merge workflow that I recommend using with Git.</p>
<div class="center figure" id="fig-rails_readme" data-tralics-id="uid83" data-number="1.8">
<div class="graphics image box"><img src="images/figures/rails_readme_4_0.png" alt="images/figures/rails_readme_4_0" /></div><div class="caption"><span class="header">Figure 1.8: </span><span class="description">The initial <code>README</code> file for our project at GitHub.
</span></div></div>
<div id="sec-git_branch" data-tralics-id="uid84" class="subsubsection" data-number="1.3.5.1"><h4><a href="#sec-git_branch" class="heading">Branch</a></h4>
<p>Git is incredibly good at making <em>branches</em>, which are effectively copies of a repository where we can make (possibly experimental) changes without modifying the parent files.<span class="intersentencespace"></span> In most cases, the parent repository is the <em>master</em> branch, and we can create a new topic branch by using <code>checkout</code> with the <code>-b</code> flag:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git checkout -b modify-README
<span class="go">Switched to a new branch 'modify-README'</span>
<span class="gp">$</span> git branch
<span class="go">master</span>
<span class="go">* modify-README</span>
</pre></div></div>
<p>Here the second command, <code>git branch</code>, just lists all the local branches, and the asterisk <code>*</code> identifies which branch we’re currently on.<span class="intersentencespace"></span> Note that <code>git checkout -b modify-README</code> both creates a new branch and switches to it, as indicated by the asterisk in front of the <code>modify-README</code> branch.<span class="intersentencespace"></span> (If you set up the <code>co</code> alias in <a href="beginning_fragment.html#sec-version_control" class="hyperref">Section <span class="ref">1.3</span></a>, you can use <code>git co -b modify-README</code> instead.)</p>
<p>The full value of branching only becomes clear when working on a project with multiple developers,<sup id="cha-1_footnote-ref-19" class="footnote"><a href="#cha-1_footnote-19">19</a></sup> but branches are helpful even for a single-developer tutorial such as this one.<span class="intersentencespace"></span> In particular, the master branch is insulated from any changes we make to the topic branch, so even if we <em>really</em> screw things up we can always abandon the changes by checking out the master branch and deleting the topic branch.<span class="intersentencespace"></span> We’ll see how to do this at the end of the section.</p>
<p>By the way, for a change as small as this one I wouldn’t normally bother with a new branch, but it’s never too early to start practicing good habits.</p>
</div>
<div id="sec-git_edit" data-tralics-id="uid86" class="subsubsection" data-number="1.3.5.2"><h4><a href="#sec-git_edit" class="heading">Edit</a></h4>
<p>After creating the topic branch, we’ll edit it to make it a little more descriptive.<span class="intersentencespace"></span> I prefer the <a href="http://daringfireball.net/projects/markdown/">Markdown markup language</a> to the default RDoc for this purpose, and if you use the file extension <code>.md</code> then GitHub will automatically format it nicely for you.<span class="intersentencespace"></span> So, first we’ll use Git’s version of the Unix <code>mv</code> (“move”) command to change the name, and then fill it in with the contents of <a href="beginning_fragment.html#code-new_readme" class="hyperref">Listing <span class="ref">1.8</span></a>:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git mv README.rdoc README.md
<span class="gp">$</span> subl README.md
</pre></div></div>
<div class="codelisting" id="code-new_readme" data-tralics-id="uid87" data-number="1.8"><div class="heading"><span class="number">Listing 1.8:</span> 

<span class="description">The new <code>README</code> file, <code>README.md</code>.</span>
</div>

<div class="code"><div class="highlight"><pre># Ruby on Rails Tutorial: first application

This is the first application for the
[*Ruby on Rails Tutorial*](http://railstutorial.org/)
by [Michael Hartl](http://michaelhartl.com/).
</pre></div></div></div></div>
<div id="sec-git_commit" data-tralics-id="uid88" class="subsubsection" data-number="1.3.5.3"><h4><a href="#sec-git_commit" class="heading">Commit</a></h4>
<p>With the changes made, we can take a look at the status of our branch:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git status
<span class="gp">#</span> On branch modify-README
<span class="gp">#</span> Changes to be committed:
<span class="gp">#</span>   <span class="o">(</span>use <span class="s2">"git reset HEAD &lt;file&gt;..."</span> to unstage<span class="o">)</span>
<span class="gp">#</span>
<span class="gp">#</span>       renamed:    README.rdoc -&gt; README.md
<span class="gp">#</span>
<span class="gp">#</span> Changed but not updated:
<span class="gp">#</span>   <span class="o">(</span>use <span class="s2">"git add &lt;file&gt;..."</span> to update what will be committed<span class="o">)</span>
<span class="gp">#</span>   <span class="o">(</span>use <span class="s2">"git checkout -- &lt;file&gt;..."</span> to discard changes in working directory<span class="o">)</span>
<span class="gp">#</span>
<span class="gp">#</span>       modified:   README.md
<span class="gp">#</span>
</pre></div></div>
<p>At this point, we could use <code>git add .</code> as in <a href="beginning_fragment.html#sec-adding_and_committing" class="hyperref">Section <span class="ref">1.3.2</span></a>, but Git provides the <code>-a</code> flag as a shortcut for the (very common) case of committing all modifications to existing files (or files created using <code>git mv</code>, which don’t count as new files to Git):</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git commit -a -m <span class="s2">"Improve the README file"</span>
<span class="go">2 files changed, 5 insertions(+), 243 deletions(-)</span>
<span class="go">delete mode 100644 README.rdoc</span>
<span class="go">create mode 100644 README.md</span>
</pre></div></div>
<p>Be careful about using the <code>-a</code> flag improperly; if you have added any new files to the project since the last commit, you still have to tell Git about them using <code>git add</code> first.</p>
<p>Note that we write the commit message in the <em>present</em> tense.<span class="intersentencespace"></span> Git models commits as a series of patches, and in this context it makes sense to describe what each commit <em>does</em>, rather than what it did.<span class="intersentencespace"></span> Moreover, this usage matches up with the commit messages generated by Git commands themselves.<span class="intersentencespace"></span> See the GitHub post <a href="https://github.com/blog/926-shiny-new-commit-styles">Shiny new commit styles</a> for more information.</p>
</div>
<div id="sec-git_merge" data-tralics-id="uid89" class="subsubsection" data-number="1.3.5.4"><h4><a href="#sec-git_merge" class="heading">Merge</a></h4>
<p>Now that we’ve finished making our changes, we’re ready to <em>merge</em> the results back into our master branch:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git checkout master
<span class="go">Switched to branch 'master'</span>
<span class="gp">$</span> git merge modify-README
<span class="go">Updating 34f06b7..2c92bef</span>
<span class="go">Fast forward</span>
<span class="go">README.rdoc     |  243 --------------------------------------------------</span>
<span class="go">README.md       |    5 +</span>
<span class="go">2 files changed, 5 insertions(+), 243 deletions(-)</span>
<span class="go">delete mode 100644 README.rdoc</span>
<span class="go">create mode 100644 README.md</span>
</pre></div></div>
<p>Note that the Git output frequently includes things like <code>34f06b7</code>, which are related to Git’s internal representation of repositories.<span class="intersentencespace"></span> Your exact results will differ in these details, but otherwise should essentially match the output shown above.</p>
<p>After you’ve merged in the changes, you can tidy up your branches by deleting the topic branch using <code>git branch -d</code> if you’re done with it:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git branch -d modify-README
<span class="go">Deleted branch modify-README (was 2c92bef).</span>
</pre></div></div>
<p>This step is optional, and in fact it’s quite common to leave the topic branch intact.<span class="intersentencespace"></span> This way you can switch back and forth between the topic and master branches, merging in changes every time you reach a natural stopping point.</p>
<p>As mentioned above, it’s also possible to abandon your topic branch changes, in this case with <code>git branch -D</code>:</p>
<div class="code"><div class="highlight"><pre><span class="c"># For illustration only; don't do this unless you mess up a branch</span>
<span class="nv">$ </span>git checkout -b topic-branch
<span class="nv">$ </span>&lt;really screw up the branch&gt;
<span class="nv">$ </span>git add .
<span class="nv">$ </span>git commit -a -m <span class="s2">"Major screw up"</span>
<span class="nv">$ </span>git checkout master
<span class="nv">$ </span>git branch -D topic-branch
</pre></div></div>
<p>Unlike the <code>-d</code> flag, the <code>-D</code> flag will delete the branch even though we haven’t merged in the changes.</p>
</div>
<div id="sec-git_push" data-tralics-id="uid90" class="subsubsection" data-number="1.3.5.5"><h4><a href="#sec-git_push" class="heading">Push</a></h4>
<p>Now that we’ve updated the <code>README</code>, we can push the changes up to GitHub to see the result.<span class="intersentencespace"></span> Since we have already done one push (<a href="beginning_fragment.html#sec-github" class="hyperref">Section <span class="ref">1.3.4</span></a>), on most systems we can omit <code>origin master</code>, and simply run <code>git push</code>:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git push
</pre></div></div>
<p>As promised, GitHub nicely formats the new file using Markdown (<a href="beginning_fragment.html#fig-new_readme" class="hyperref">Figure <span class="ref">1.9</span></a>).</p>
<div class="center figure" id="fig-new_readme" data-tralics-id="uid91" data-number="1.9">
<div class="graphics image box"><img src="images/figures/new_readme_4_0.png" alt="images/figures/new_readme_4_0" /></div><div class="caption"><span class="header">Figure 1.9: </span><span class="description">The improved <code>README</code> file formatted with Markdown.
</span></div></div>
</div></div></div><div id="sec-deploying" data-tralics-id="cid5" class="section" data-number="1.4"><h2><a href="beginning_fragment.html#sec-deploying" class="heading hyperref"><span class="number">1.4 </span>Deploying</a></h2>
<p>Even at this early stage, we’re already going to deploy our (still-empty) Rails application to production.<span class="intersentencespace"></span> This step is optional, but deploying early and often allows us to catch any deployment problems early in our development cycle.<span class="intersentencespace"></span> The alternative—deploying only after laborious effort sealed away in a development environment—often leads to terrible integration headaches when launch time comes.<sup id="cha-1_footnote-ref-20" class="footnote"><a href="#cha-1_footnote-20">20</a></sup></p>
<p>Deploying Rails applications used to be a pain, but the Rails deployment ecosystem has matured rapidly in the past few years, and now there are several great options.<span class="intersentencespace"></span> These include shared hosts or virtual private servers running <a href="http://www.modrails.com/">Phusion Passenger</a> (a module for the Apache and Nginx<sup id="cha-1_footnote-ref-21" class="footnote"><a href="#cha-1_footnote-21">21</a></sup> web servers), full-service deployment companies such as <a href="http://engineyard.com/">Engine Yard</a> and <a href="http://railsmachine.com/">Rails Machine</a>, and cloud deployment services such as <a href="http://cloud.engineyard.com">Engine Yard Cloud</a> and <a href="http://heroku.com/">Heroku</a>.</p>
<p>My favorite Rails deployment option is Heroku, which is a hosted platform built specifically for deploying Rails and other web applications.<span class="intersentencespace"></span> Heroku makes deploying Rails applications ridiculously easy—as long as your source code is under version control with Git.<span class="intersentencespace"></span> (This is yet another reason to follow the Git setup steps in <a href="beginning_fragment.html#sec-version_control" class="hyperref">Section <span class="ref">1.3</span></a> if you haven’t already.)<span class="intersentencespace"></span> The rest of this section is dedicated to deploying our first application to Heroku.</p>
<div id="sec-heroku_setup" data-tralics-id="uid94" class="subsection" data-number="1.4.1"><h3><a href="beginning_fragment.html#sec-heroku_setup" class="heading hyperref"><span class="number">1.4.1 </span>Heroku setup</a></h3>
<p>Heroku uses the <a href="http://www.postgresql.org/">PostgreSQL</a> database (pronounced “post-gres-cue-ell”, and often called “Postgres” for short), which means that we need to add the <span class="tt">pg</span> gem in the production environment to allow Rails to talk to Postgres:</p>
<div class="code"><div class="highlight"><pre><span class="n">group</span> <span class="ss">:production</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">'pg'</span><span class="p">,</span> <span class="s1">'0.15.1'</span>
  <span class="n">gem</span> <span class="s1">'rails_12factor'</span><span class="p">,</span> <span class="s1">'0.0.2'</span>
<span class="k">end</span>
</pre></div></div>
<p>Note also the addition of the <span class="tt">rails_12factor</span> gem, which is used by Heroku to serve static assets such as images and stylesheets.</p>
<p>As mentioned in <a href="beginning_fragment.html#sec-bundler" class="hyperref">Section <span class="ref">1.2.4</span></a>, it’s also a good idea to specify explictly which version of Ruby our applications expects:</p>
<div class="code"><div class="highlight"><pre><span class="n">ruby</span> <span class="s1">'2.0.0'</span>
<span class="c1">#ruby-gemset=railstutorial_rails_4_0</span>
</pre></div></div>
<p>(Here I’ve also added the optional RVM gemset line for convenience.<span class="intersentencespace"></span> You should substitute <code>’1.9.3’</code> if that’s the version of Ruby you’re using, though for this tutorial the difference shouldn’t ever matter.)<span class="intersentencespace"></span> Applying these changes to the <code>Gemfile</code> from <a href="beginning_fragment.html#code-gemfile_sqlite_version" class="hyperref">Listing <span class="ref">1.5</span></a> yields <a href="beginning_fragment.html#code-gemfile_pg_gem" class="hyperref">Listing <span class="ref">1.9</span></a>.</p>
<div class="codelisting" id="code-gemfile_pg_gem" data-tralics-id="uid95" data-number="1.9"><div class="heading"><span class="number">Listing 1.9:</span> 

<span class="description">A <code>Gemfile</code> with added gems and explicit Ruby version.</span>
</div>

<div class="code"><div class="highlight"><pre><span class="n">source</span> <span class="s1">'https://rubygems.org'</span>
<span class="n">ruby</span> <span class="s1">'2.0.0'</span>
<span class="c1">#ruby-gemset=railstutorial_rails_4_0</span>

<span class="n">gem</span> <span class="s1">'rails'</span><span class="p">,</span> <span class="s1">'4.0.5'</span>

<span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">'sqlite3'</span><span class="p">,</span> <span class="s1">'1.3.8'</span>
<span class="k">end</span>

<span class="n">gem</span> <span class="s1">'sass-rails'</span><span class="p">,</span> <span class="s1">'4.0.1'</span>
<span class="n">gem</span> <span class="s1">'uglifier'</span><span class="p">,</span> <span class="s1">'2.1.1'</span>
<span class="n">gem</span> <span class="s1">'coffee-rails'</span><span class="p">,</span> <span class="s1">'4.0.1'</span>
<span class="n">gem</span> <span class="s1">'jquery-rails'</span><span class="p">,</span> <span class="s1">'3.0.4'</span>
<span class="n">gem</span> <span class="s1">'turbolinks'</span><span class="p">,</span> <span class="s1">'1.1.1'</span>
<span class="n">gem</span> <span class="s1">'jbuilder'</span><span class="p">,</span> <span class="s1">'1.0.2'</span>

<span class="n">group</span> <span class="ss">:doc</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">'sdoc'</span><span class="p">,</span> <span class="s1">'0.3.20'</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span>
<span class="k">end</span>

<span class="n">group</span> <span class="ss">:production</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">'pg'</span><span class="p">,</span> <span class="s1">'0.15.1'</span>
  <span class="n">gem</span> <span class="s1">'rails_12factor'</span><span class="p">,</span> <span class="s1">'0.0.2'</span>
<span class="k">end</span>
</pre></div></div></div><p>To install it, we run <code>bundle install</code> with a special flag:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> bundle install --without production
</pre></div></div>
<p>The <span class="inline_verbatim">--without production</span> option prevents the local installation of any production gems, which in this case consists of <span class="tt">pg</span> and <span class="tt">rails_12factor</span>.<span class="intersentencespace"></span> (If Bundler complains about a <span class="tt">readline</span> error, try adding <span class="inline_verbatim">gem 'rb-read\-line', '~&gt; 0.4.2'</span> to your <code>Gemfile</code>.)<span class="intersentencespace"></span> Because the only gems we’ve added are restricted to a production environment, right now this command doesn’t actually install any additional local gems, but it’s needed to update <code>Gemfile.lock</code> with the <span class="tt">pg</span> and <span class="tt">rails_12factor</span> gems and the specific Ruby version.<span class="intersentencespace"></span> We can commit the resulting change as follows:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git commit -a -m <span class="s2">"Update Gemfile.lock for Heroku"</span>
</pre></div></div>
<p>(Some readers have reported that they need one last bit of configuration at this point, namely, creating the files Heroku needs to serve static assets like images and CSS:</p>
<div class="code"><div class="highlight"><pre><span class="gp">#</span> This should only be used <span class="k">if </span>your Heroku deploy fails without it.
<span class="gp">$</span> rake assets:precompile
<span class="gp">$</span> git add .
<span class="gp">$</span> git commit -m <span class="s2">"Add precompiled assets for Heroku"</span>
</pre></div></div>
<p>(This uses the <code>rake</code> command, which we’ll cover in more detail in <a href="demo_app_fragment.html#sec-demo_users_resource" class="hyperref">Section <span class="ref">2.2</span></a>.)<span class="intersentencespace"></span> The asset precompile step shouldn’t be necessary, and I have been unable to reproduce the issue, but the reports are common enough that I include it here for reference.)</p>
<p>Next we have to create and configure a new Heroku account.<span class="intersentencespace"></span> The first step is to <a href="http://api.heroku.com/signup">sign up for Heroku</a>; after checking your email to complete the creation of your account, install the necessary Heroku software using the <a href="https://toolbelt.heroku.com/">Heroku Toolbelt</a>.<sup id="cha-1_footnote-ref-22" class="footnote intersentence"><a href="#cha-1_footnote-22">22</a></sup><span class="intersentencespace"></span> Then use the <code>heroku</code> command to log in at the command line (you may have to exit and restart your terminal program first):</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> heroku login
</pre></div></div>
<p>Finally, navigate back to your Rails project directory and use the <code>heroku</code> command to create a place on the Heroku servers for the sample app to live (<a href="beginning_fragment.html#code-heroku_create" class="hyperref">Listing <span class="ref">1.10</span></a>).</p>
<div class="codelisting" id="code-heroku_create" data-tralics-id="uid97" data-number="1.10"><div class="heading"><span class="number">Listing 1.10:</span> 

<span class="description">Creating a new application at Heroku.</span>
</div>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">cd</span> ~/rails_projects/first_app
<span class="gp">$</span> heroku create
<span class="go">Created http://stormy-cloud-5881.herokuapp.com/ |</span>
<span class="go">git@heroku.com:stormy-cloud-5881.herokuapp.com</span>
<span class="go">Git remote heroku added</span>
</pre></div></div></div><p>The <code>heroku</code> command creates a new subdomain just for our application, available for immediate viewing.<span class="intersentencespace"></span> There’s nothing there yet, though, so let’s get busy deploying.</p>
</div>
<div id="sec-heroku_step_one" data-tralics-id="uid98" class="subsection" data-number="1.4.2"><h3><a href="beginning_fragment.html#sec-heroku_step_one" class="heading hyperref"><span class="number">1.4.2 </span>Heroku deployment, step one</a></h3>
<p>To deploy the application, the first step is to use Git to push it up to Heroku:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git push heroku master
</pre></div></div>
</div>
<div id="uid99" data-tralics-id="uid99" class="subsection" data-number="1.4.3"><h3><a href="beginning_fragment.html#uid99" class="heading hyperref"><span class="number">1.4.3 </span>Heroku deployment, step two</a></h3>
<p>There is no step two!<span class="intersentencespace"></span> We’re already done (<a href="beginning_fragment.html#fig-heroku_app" class="hyperref">Figure <span class="ref">1.10</span></a>).<span class="intersentencespace"></span> To see your newly deployed application, you can visit the address that you saw when you ran <code>heroku create</code> (i.e., <a href="beginning_fragment.html#code-heroku_create" class="hyperref">Listing <span class="ref">1.10</span></a>, but with the address for your app, not the address for mine).<span class="intersentencespace"></span> You can also use an argument to the <code>heroku</code> command that automatically opens your browser with the right address:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> heroku open
</pre></div></div>
<p>Unfortunately, the resulting page is an error; as of Rails 4.0, for technical reasons the default Rails page doesn’t work on Heroku.<span class="intersentencespace"></span> The good news is that the error will go away (in the context of the full sample application) when we add a root route in <a href="filling_in_the_layout_fragment.html#sec-rails_routes" class="hyperref">Section <span class="ref">5.3.2</span></a>.</p>
<div class="center figure" id="fig-heroku_app" data-tralics-id="uid100" data-number="1.10">
<div class="graphics image box"><img src="images/figures/heroku_app_4_0.png" alt="images/figures/heroku_app_4_0" /></div><div class="caption"><span class="header">Figure 1.10: </span><span class="description">The first Rails Tutorial application running on Heroku.
</span></div></div>
<p>Once you’ve deployed successfully, Heroku provides a beautiful interface for administering and configuring your application (<a href="beginning_fragment.html#fig-heroku_info" class="hyperref">Figure <span class="ref">1.11</span></a>).</p>
<div class="center figure" id="fig-heroku_info" data-tralics-id="uid101" data-number="1.11">
<div class="graphics image box"><img src="images/figures/heroku_info_4_0.png" alt="images/figures/heroku_info_4_0" /></div><div class="caption"><span class="header">Figure 1.11: </span><span class="description">The beautiful interface at Heroku.
</span></div></div>
</div>
<div id="sec-heroku_commands" data-tralics-id="uid102" class="subsection" data-number="1.4.4"><h3><a href="beginning_fragment.html#sec-heroku_commands" class="heading hyperref"><span class="number">1.4.4 </span>Heroku commands</a></h3>
<p>There are many <a href="http://devcenter.heroku.com/heroku-command">Heroku commands</a>, and we’ll barely scratch the surface in this book.<span class="intersentencespace"></span> Let’s take a minute to show just one of them by renaming the application as follows:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> heroku rename railstutorial
</pre></div></div>
<p>Don’t use this name yourself; it’s already taken by me!<span class="intersentencespace"></span> In fact, you probably shouldn’t bother with this step right now; using the default address supplied by Heroku is fine.<span class="intersentencespace"></span> But if you do want to rename your application, you can arrange for it to be reasonably secure by using a random or obscure subdomain, such as the following:</p>
<pre>hwpcbmze.herokuapp.com
seyjhflo.herokuapp.com
jhyicevg.herokuapp.com</pre>
<p>With a random subdomain like this, someone could visit your site only if you gave them the address.<span class="intersentencespace"></span> (By the way, as a preview of Ruby’s compact awesomeness, here’s the code I used to generate the random subdomains:</p>
<div class="code"><div class="highlight"><pre><span class="p">(</span><span class="s1">'a'</span><span class="o">.</span><span class="n">.</span><span class="s1">'z'</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">shuffle</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">7</span><span class="o">].</span><span class="n">join</span>
</pre></div></div>
<p>Pretty sweet.)</p>
<p>In addition to supporting subdomains, Heroku also supports custom domains.<span class="intersentencespace"></span> (In fact, the <a href="http://railstutorial.org">Ruby on Rails Tutorial site</a> lives at Heroku; if you’re reading this book online, you’re looking at a Heroku-hosted site right now!)<span class="intersentencespace"></span> See the <a href="http://devcenter.heroku.com/">Heroku documentation</a> for more information about custom domains and other Heroku topics.</p>
</div></div><div id="sec-beginning_conclusion" data-tralics-id="cid6" class="section" data-number="1.5"><h2><a href="beginning_fragment.html#sec-beginning_conclusion" class="heading hyperref"><span class="number">1.5 </span>Conclusion</a></h2>
<p>We’ve come a long way in this chapter: installation, development environment setup, version control, and deployment.<span class="intersentencespace"></span> If you want to share your progress at this point, feel free to send a tweet or Facebook status update with something like this:</p>
<div class="center"><p><a href="http://twitter.com/?status=I'm\%20learning\%20Ruby\%20on\%20Rails\%20with\%20@railstutorial!\%20http://railstutorial.org/">I’m learning Ruby on Rails with @railstutorial!<span class="intersentencespace"></span> http://railstutorial.org/</a></p>
</div><p> </p>
<p>All that’s left is to actually start learning Rails!<span class="intersentencespace"></span> Let’s get to it.</p>
</div><div id="cha-1_footnotes">
  <ol class="footnotes"><li id="cha-1_footnote-1"><em>URI</em> stands for Uniform Resource Identifier, while the slightly less general <em>URL</em> stands for Uniform Resource Locator.<span class="intersentencespace"></span> In practice, the URL is usually equivalent to “the thing you see in the address bar of your browser”. <a class="arrow" href="#cha-1_footnote-ref-1">↑</a></li>
    <li id="cha-1_footnote-2">http://tryruby.org/ <a class="arrow" href="#cha-1_footnote-ref-2">↑</a></li>
    <li id="cha-1_footnote-3">http://railsforzombies.org/ <a class="arrow" href="#cha-1_footnote-ref-3">↑</a></li>
    <li id="cha-1_footnote-4">http://wwwrailstutorial.org/screencasts <a class="arrow" href="#cha-1_footnote-ref-4">↑</a></li>
    <li id="cha-1_footnote-5">When reading the <em>Rails Tutorial</em>, you may find it convenient to follow an internal section link to look at the reference and then immediately go back to where you were before.<span class="intersentencespace"></span> This is easy when reading the book as a web page, since you can just use the Back button of your browser, but both Adobe Reader and OS X’s Preview allow you to do this with the PDF as well.<span class="intersentencespace"></span> In Reader, you can right-click on the document and select “Previous View” to go back.<span class="intersentencespace"></span> In Preview, use the Go menu: <span class="tt">Go &gt; Back</span>. <a class="arrow" href="#cha-1_footnote-ref-5">↑</a></li>
    <li id="cha-1_footnote-6">Many people erroneously believe that <code>sudo</code> stands for “superuser do” because it runs commands as the superuser (root) by default.<span class="intersentencespace"></span> In fact, <code>sudo</code> is a concatenation of the <code>su</code> command and the English word “do”, and <code>su</code> stands for “substitute user”, as you can verify by typing <code>man su</code> in your shell.<span class="intersentencespace"></span> This etymology also suggests the pronunciation “SOO-doo” (because the word “do” is pronounced “doo”), although the alternate pronunciation “SOO-doh” is also common. <a class="arrow" href="#cha-1_footnote-ref-6">↑</a></li>
    <li id="cha-1_footnote-7">http://railstutorial.org/help <a class="arrow" href="#cha-1_footnote-ref-7">↑</a></li>
    <li id="cha-1_footnote-8">https://github.com/perfectionist/sample_project/wiki <a class="arrow" href="#cha-1_footnote-ref-8">↑</a></li>
    <li id="cha-1_footnote-9">As of this writing, <a href="http://www.sublimetext.com/3">Sublime Text 3</a> is in beta.<span class="intersentencespace"></span> I recommend trying the newest Sublime Text only if you really want to be on the bleeding edge. <a class="arrow" href="#cha-1_footnote-ref-9">↑</a></li>
    <li id="cha-1_footnote-10">The vi editor is one of the most ancient yet powerful weapons in the Unix arsenal, and Vim is “vi improved”. <a class="arrow" href="#cha-1_footnote-ref-10">↑</a></li>
    <li id="cha-1_footnote-11">https://github.com/mhartl/rails_tutorial_sublime_text <a class="arrow" href="#cha-1_footnote-ref-11">↑</a></li>
    <li id="cha-1_footnote-12">https://developer.apple.com/downloads/ <a class="arrow" href="#cha-1_footnote-ref-12">↑</a></li>
    <li id="cha-1_footnote-13">http://strandcode.com/2013/07/11/ruby-version-manager-rvm-overview-for-rails-newbs/ <a class="arrow" href="#cha-1_footnote-ref-13">↑</a></li>
    <li id="cha-1_footnote-14">This step is necessary only if you’ve changed the version of the Rails gem, which would likely happen only if you’re using Rails Installer, but it does no harm to run it in other cases as well. <a class="arrow" href="#cha-1_footnote-ref-14">↑</a></li>
    <li id="cha-1_footnote-15">Normally, websites run on port 80, but this usually requires special privileges, so Rails picks a less restricted higher-numbered port for the development server. <a class="arrow" href="#cha-1_footnote-ref-15">↑</a></li>
    <li id="cha-1_footnote-16">Normally this is a feature, since it lets you continue to use the command line after launching your editor, but Git interprets the detachment as closing the file with an empty commit message, which prevents the commit from going through.<span class="intersentencespace"></span> I only mention this point because it can be seriously confusing if you try to set your editor to <code>subl</code> or <code>gvim</code> without the flag.<span class="intersentencespace"></span> (If you find this note confusing, it is safe to ignore it.) <a class="arrow" href="#cha-1_footnote-ref-16">↑</a></li>
    <li id="cha-1_footnote-17">If you can’t see the <code>.gitignore</code> file in your directory, you may need to configure your directory viewer to show hidden files. <a class="arrow" href="#cha-1_footnote-ref-17">↑</a></li>
    <li id="cha-1_footnote-18">If in the future any unwanted files start showing up when you type <code>git status</code>, just add them to your <code>.gitignore</code> file from <a href="beginning_fragment.html#code-gitignore" class="hyperref">Listing <span class="ref">1.7</span></a>. <a class="arrow" href="#cha-1_footnote-ref-18">↑</a></li>
    <li id="cha-1_footnote-19">See the chapter <a href="http://git-scm.com/book/en/git-branching">Git Branching in <em>Pro Git</em></a> for details. <a class="arrow" href="#cha-1_footnote-ref-19">↑</a></li>
    <li id="cha-1_footnote-20">Though it shouldn’t matter for the example applications in the <em>Rails Tutorial</em>, if you’re worried about accidentally making your app public too soon there are several options; see <a href="beginning_fragment.html#sec-heroku_commands" class="hyperref">Section <span class="ref">1.4.4</span></a> for one. <a class="arrow" href="#cha-1_footnote-ref-20">↑</a></li>
    <li id="cha-1_footnote-21">Pronounced “Engine X”. <a class="arrow" href="#cha-1_footnote-ref-21">↑</a></li>
    <li id="cha-1_footnote-22">https://toolbelt.heroku.com/ <a class="arrow" href="#cha-1_footnote-ref-22">↑</a></li>
  </ol></div>