var search_data = {"index":{"searchIndex":["activesupport","mail","address","addresscontainer","addresslist","attachmentslist","bccfield","body","ccfield","checkdeliveryparams","commentsfield","commonaddress","commondate","commonfield","commonmessageid","configuration","contentdescriptionfield","contentdispositionelement","contentdispositionfield","contentidfield","contentlocationelement","contentlocationfield","contenttransferencodingelement","contenttransferencodingfield","contenttypeelement","contenttypefield","datefield","datetimeelement","encodings","base64","binary","eightbit","quotedprintable","sevenbit","transferencoding","envelope","envelopefromelement","exim","field","fielderror","parseerror","syntaxerror","fieldlist","filedelivery","fromfield","header","imap","inreplytofield","indifferenthash","keywordsfield","matchers","hassentemailmatcher","message","messageidfield","messageidselement","mimeversionelement","mimeversionfield","multibyte","multibyte","chars","encodingerror","unicode","codepoint","unicodedatabase","optionalfield","pop3","parameterhash","parsers","addresslistsparser","contentdispositionparser","contentlocationparser","contenttransferencodingparser","contenttypeparser","datetimeparser","envelopefromparser","messageidsparser","mimeversionparser","phraselistsparser","ragel","addresslistsmachine","contentdispositionmachine","contentlocationmachine","contenttransferencodingmachine","contenttypemachine","datetimemachine","envelopefrommachine","messageidsmachine","mimeversionmachine","phraselistsmachine","receivedmachine","ruby","receivedparser","part","partslist","patterns","encoding","phraselist","receivedelement","receivedfield","referencesfield","replytofield","resentbccfield","resentccfield","resentdatefield","resentfromfield","resentmessageidfield","resentsenderfield","resenttofield","retriever","returnpathfield","ruby18","ruby19","smtp","smtpconnection","senderfield","sendmail","structuredfield","subjectfield","testmailer","testretriever","tofield","unknownencodingtype","unstructuredfield","utilities","version","net","smtp","nilclass","object","string","+()","<<()","<<()","<<()","<=>()","<=>()","<=>()","==()","==()","==()","===()","=~()","=~()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","action()","action()","acts_like_string?()","add_boundary()","add_charset()","add_content_id()","add_content_transfer_encoding()","add_content_type()","add_date()","add_encoding_to_body()","add_file()","add_message_id()","add_mime_version()","add_multipart_alternate_header()","add_multipart_mixed_header()","add_part()","add_required_fields()","add_required_fields()","add_required_message_fields()","add_required_message_fields()","address()","address()","address()","address()","address()","address=()","address_encode()","addresses()","addresses()","all()","all()","all_parts()","at()","atom_safe?()","attachment()","attachment?()","attachments()","attachments()","attempt_to_clean()","b_value_decode()","b_value_decode()","b_value_decode()","b_value_encode()","b_value_encode()","b_value_encode()","bcc()","bcc()","bcc=()","bcc_addrs()","blank?()","body()","body=()","body_encoding()","body_encoding=()","body_lazy()","bounced?()","bounced?()","boundary()","boundary()","boundary=()","bracket()","bracket()","bracket()","call()","call()","can_encode?()","can_encode?()","can_encode?()","can_transport?()","capitalize()","capitalize_field()","cc()","cc()","cc=()","cc_addrs()","center()","charset()","charset()","charset()","charset()","charset=()","charset=()","charset=()","charset=()","check_delivery_params()","cid()","clean_msg_id()","cleaned()","collapse_adjacent_encodings()","collect()","collect!()","comments()","comments()","comments=()","compose()","compose_codepoints()","connection()","connection()","connection()","constantize()","constantize()","consumes?()","content_description()","content_description=()","content_disposition()","content_disposition=()","content_id()","content_id()","content_id=()","content_location()","content_location=()","content_transfer_encoding()","content_transfer_encoding=()","content_type()","content_type()","content_type=()","content_type_parameters()","convert_key()","convert_to_multipart()","convert_value()","cost()","cost()","cost()","cost()","cost()","cost()","create_field()","crlf_boundary()","dasherize()","database()","date()","date()","date=()","date_time()","date_time()","date_time()","decode()","decode()","decode()","decode()","decode()","decode_base64()","decode_base64()","decode_body()","decode_body_as_text()","decode_encode()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decoded()","decompose()","decompose_codepoints()","default()","default()","default()","default()","default()","default()","default()","default()","defaults()","defined?()","delete()","delete_all()","delete_all()","delete_all()","deliver()","deliver()","deliver!()","deliver!()","deliver!()","deliver!()","deliver!()","deliver!()","deliveries()","deliveries=()","delivery_method()","delivery_method()","delivery_method()","delivery_status_data()","delivery_status_part()","delivery_status_report?()","delivery_status_report_part?()","description()","destinations()","diagnostic_code()","diagnostic_code()","dirname()","display_name()","display_name=()","disposition_type()","do_decode()","do_delivery()","do_encode()","domain()","downcase()","dquote()","dump_deliveries()","dup()","each()","eager_autoload!()","element()","element()","element()","element()","element()","element()","element()","element()","emails()","emails=()","empty?()","encode()","encode()","encode()","encode()","encode()","encode()","encode!()","encode_base64()","encode_base64()","encode_crlf()","encode_non_usascii()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoded()","encoding()","encoding()","encoding()","encoding=()","end_boundary()","envelope_date()","envelope_from()","epilogue()","epilogue=()","error_status()","error_status()","errors()","errors()","errors()","escape_bracket()","escape_bracket()","escape_paren()","escape_paren()","escape_paren()","explain_expectations()","failure_message()","fetch()","field()","field=()","field_order_id()","field_summary()","fields()","fields=()","filename()","filename()","filename()","filename()","filter_matched_deliveries()","final_recipient()","final_recipient()","find()","find()","find()","find()","find_and_delete()","find_and_delete()","find_attachment()","find_encoding()","find_first_mime_type()","first()","first()","first()","fix_encoding()","format()","format_comments()","formatted_date()","formatted_date_time()","from()","from()","from()","from()","from=()","from_addrs()","from_hash()","from_yaml()","g_length()","g_pack()","g_unpack()","generate_boundary()","generate_content_id()","generate_message_id()","get_all()","get_best_compatible()","get_best_encoding()","get_comments()","get_constant()","get_constant()","get_display_name()","get_domain()","get_encoding()","get_local()","get_mime_type()","get_name()","get_name()","get_order_value()","get_return_values()","guess_encoding()","has_attachments?()","has_charset?()","has_constant?()","has_constant?()","has_content_id?()","has_content_id?()","has_content_transfer_encoding?()","has_content_type?()","has_date?()","has_date?()","has_key?()","has_message_id?()","has_message_id?()","has_mime_version?()","has_mime_version?()","have_sent_email()","header()","header=()","header_fields()","headers()","html_part()","html_part=()","identify_and_set_transfer_encoding()","in_char_class?()","in_reply_to()","in_reply_to=()","include?()","include?()","include?()","index()","info()","info()","inform_interceptors()","inform_interceptors()","inform_observers()","inform_observers()","init_with_hash()","init_with_string()","initialize_copy()","initialize_copy()","inline()","inline?()","inline_content_id()","insert()","inspect()","inspect()","inspect()","is_marked_for_delete?()","is_utf8?()","key?()","keywords()","keywords()","keywords=()","last()","last()","last()","limit()","limited_field?()","ljust()","load()","local()","location()","lookup_delivery_method()","lookup_retriever_method()","lstrip()","machine_module=()","main_type()","main_type()","major()","major()","map()","map!()","map_lines()","map_with_index()","mark_for_delete=()","match()","match_to_s()","matches?()","matches_on_blind_copy_recipients?()","matches_on_body?()","matches_on_body_matcher?()","matches_on_copy_recipients?()","matches_on_recipients?()","matches_on_sender?()","matches_on_subject?()","matches_on_subject_matcher?()","matching_body()","matching_subject()","maximum_amount()","maximum_amount=()","mb_chars()","member?()","merge()","merge!()","message_content_type()","message_id()","message_id()","message_id=()","message_ids()","message_ids()","method_missing()","method_missing()","method_missing()","method_missing()","mime_parameters()","mime_type()","mime_version()","mime_version=()","minor()","minor()","multipart?()","multipart?()","multipart_report?()","name()","name()","name()","name()","name()","negative_failure_message()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_field()","new_from_hash_copying_default()","normalize()","normalize()","normalized_encoding()","only_us_ascii?()","ord()","param_decode()","param_decode()","param_decode()","param_encode()","param_encode()","param_encode()","param_encode_language()","parameters()","parameters()","paren()","paren()","paren()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse_delivery_status_report()","parse_message()","parse_message()","part()","parts()","parts()","phrase_list()","phrases()","pick_encoding()","popen()","preamble()","preamble=()","process_body_raw()","proxy_class()","proxy_class()","proxy_class=()","proxy_class=()","q_value_decode()","q_value_decode()","q_value_decode()","q_value_encode()","q_value_encode()","q_value_encode()","quote_atom()","quote_phrase()","quote_token()","random_tag()","raw()","raw_envelope()","raw_source()","raw_source()","raw_source()","raw_source=()","raw_source=()","read()","read()","read_from_string()","ready_to_send!()","received()","received=()","references()","references=()","register()","register_autoload()","register_for_delivery_notification()","register_interceptor()","register_observer()","regular_update()","regular_writer()","remote_mta()","remote_mta()","reorder_characters()","reply()","reply_to()","reply_to=()","resent_bcc()","resent_bcc=()","resent_cc()","resent_cc=()","resent_date()","resent_date=()","resent_from()","resent_from=()","resent_message_id()","resent_message_id=()","resent_sender()","resent_sender=()","resent_to()","resent_to=()","respond_to?()","responsible_for?()","retriever_method()","retriever_method()","retryable?()","retryable?()","return_path()","return_path=()","reverse()","reverse_merge()","reverse_merge!()","rindex()","rjust()","rstrip()","same()","sanatize()","select_field_for()","sender()","sender=()","separate_parts()","set_charset()","set_envelope()","set_envelope_header()","set_mime_type()","set_sort_order()","shellquote()","silence_warnings()","size()","skip_deletion()","slice()","smtp_envelope_from()","smtp_envelope_from=()","smtp_envelope_to()","smtp_envelope_to=()","something_random()","sort()","sort!()","sort_parts!()","split()","split()","split!()","split_encoding_from_string()","split_header()","split_value_encoding_from_string()","ssl_context()","start()","start()","store()","string()","stringify()","stringify_keys()","stringify_keys!()","strip()","strip_all_comments()","strip_domain_comments()","sub_type()","sub_type()","subject()","subject=()","symbolize_keys()","text?()","text_part()","text_part=()","tidy_byte()","tidy_bytes()","tidy_bytes()","titlecase()","titleize()","tlsconnect()","to()","to()","to()","to=()","to_addrs()","to_hash()","to_options!()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_yaml()","token_safe?()","transport_encoding()","transport_encoding=()","u_unpack()","unbracket()","underscoreize()","unfold()","uniq()","unparen()","unquote()","unquote_and_convert_to()","unregister_interceptor()","unregister_observer()","upcase()","update()","update()","uri_escape()","uri_parser()","uri_parser()","uri_unescape()","url()","validate_options()","validate_options()","value()","value()","value=()","value_decode()","values_at()","version()","version()","wants?()","with_body()","with_boundary()","with_subject()","without_attachments!()","wrap_lines()","changelog","contributing","readme","todo","common.rl","date_time.rl","address_lists_machine.rb.rl","content_disposition_machine.rb.rl","content_location_machine.rb.rl","content_transfer_encoding_machine.rb.rl","content_type_machine.rb.rl","date_time_machine.rb.rl","envelope_from_machine.rb.rl","message_ids_machine.rb.rl","mime_version_machine.rb.rl","phrase_lists_machine.rb.rl","rb_actions.rl","received_machine.rb.rl"],"longSearchIndex":["activesupport","mail","mail::address","mail::addresscontainer","mail::addresslist","mail::attachmentslist","mail::bccfield","mail::body","mail::ccfield","mail::checkdeliveryparams","mail::commentsfield","mail::commonaddress","mail::commondate","mail::commonfield","mail::commonmessageid","mail::configuration","mail::contentdescriptionfield","mail::contentdispositionelement","mail::contentdispositionfield","mail::contentidfield","mail::contentlocationelement","mail::contentlocationfield","mail::contenttransferencodingelement","mail::contenttransferencodingfield","mail::contenttypeelement","mail::contenttypefield","mail::datefield","mail::datetimeelement","mail::encodings","mail::encodings::base64","mail::encodings::binary","mail::encodings::eightbit","mail::encodings::quotedprintable","mail::encodings::sevenbit","mail::encodings::transferencoding","mail::envelope","mail::envelopefromelement","mail::exim","mail::field","mail::field::fielderror","mail::field::parseerror","mail::field::syntaxerror","mail::fieldlist","mail::filedelivery","mail::fromfield","mail::header","mail::imap","mail::inreplytofield","mail::indifferenthash","mail::keywordsfield","mail::matchers","mail::matchers::hassentemailmatcher","mail::message","mail::messageidfield","mail::messageidselement","mail::mimeversionelement","mail::mimeversionfield","mail::multibyte","mail::multibyte","mail::multibyte::chars","mail::multibyte::encodingerror","mail::multibyte::unicode","mail::multibyte::unicode::codepoint","mail::multibyte::unicode::unicodedatabase","mail::optionalfield","mail::pop3","mail::parameterhash","mail::parsers","mail::parsers::addresslistsparser","mail::parsers::contentdispositionparser","mail::parsers::contentlocationparser","mail::parsers::contenttransferencodingparser","mail::parsers::contenttypeparser","mail::parsers::datetimeparser","mail::parsers::envelopefromparser","mail::parsers::messageidsparser","mail::parsers::mimeversionparser","mail::parsers::phraselistsparser","mail::parsers::ragel","mail::parsers::ragel::addresslistsmachine","mail::parsers::ragel::contentdispositionmachine","mail::parsers::ragel::contentlocationmachine","mail::parsers::ragel::contenttransferencodingmachine","mail::parsers::ragel::contenttypemachine","mail::parsers::ragel::datetimemachine","mail::parsers::ragel::envelopefrommachine","mail::parsers::ragel::messageidsmachine","mail::parsers::ragel::mimeversionmachine","mail::parsers::ragel::phraselistsmachine","mail::parsers::ragel::receivedmachine","mail::parsers::ragel::ruby","mail::parsers::receivedparser","mail::part","mail::partslist","mail::patterns","mail::patterns::encoding","mail::phraselist","mail::receivedelement","mail::receivedfield","mail::referencesfield","mail::replytofield","mail::resentbccfield","mail::resentccfield","mail::resentdatefield","mail::resentfromfield","mail::resentmessageidfield","mail::resentsenderfield","mail::resenttofield","mail::retriever","mail::returnpathfield","mail::ruby18","mail::ruby19","mail::smtp","mail::smtpconnection","mail::senderfield","mail::sendmail","mail::structuredfield","mail::subjectfield","mail::testmailer","mail::testretriever","mail::tofield","mail::unknownencodingtype","mail::unstructuredfield","mail::utilities","mail::version","net","net::smtp","nilclass","object","string","mail::multibyte::chars#+()","mail::addresscontainer#<<()","mail::body#<<()","mail::fieldlist#<<()","mail::field#<=>()","mail::message#<=>()","mail::multibyte::chars#<=>()","mail::body#==()","mail::field#==()","mail::message#==()","mail::multibyte::unicode::unicodedatabase#===()","mail::body#=~()","mail::multibyte::chars#=~()","mail::attachmentslist#[]()","mail::header#[]()","mail::message#[]()","mail::multibyte::chars#[]()","mail::parameterhash#[]()","mail::attachmentslist#[]=()","mail::header#[]=()","mail::indifferenthash#[]=()","mail::message#[]=()","mail::multibyte::chars#[]=()","mail::message#action()","mail::part#action()","mail::multibyte::chars#acts_like_string?()","mail::message#add_boundary()","mail::message#add_charset()","mail::part#add_content_id()","mail::message#add_content_transfer_encoding()","mail::message#add_content_type()","mail::message#add_date()","mail::message#add_encoding_to_body()","mail::message#add_file()","mail::message#add_message_id()","mail::message#add_mime_version()","mail::message#add_multipart_alternate_header()","mail::message#add_multipart_mixed_header()","mail::message#add_part()","mail::message#add_required_fields()","mail::part#add_required_fields()","mail::message#add_required_message_fields()","mail::part#add_required_message_fields()","mail::address#address()","mail::envelopefromelement#address()","mail::resentsenderfield#address()","mail::returnpathfield#address()","mail::senderfield#address()","mail::address#address=()","mail::encodings::address_encode()","mail::resentsenderfield#addresses()","mail::senderfield#addresses()","mail::all()","mail::retriever#all()","mail::message#all_parts()","string#at()","mail::utilities#atom_safe?()","mail::message#attachment()","mail::message#attachment?()","mail::message#attachments()","mail::partslist#attachments()","mail::contenttypefield#attempt_to_clean()","mail::encodings::b_value_decode()","mail::ruby18::b_value_decode()","mail::ruby19::b_value_decode()","mail::encodings::b_value_encode()","mail::ruby18::b_value_encode()","mail::ruby19::b_value_encode()","mail::matchers::hassentemailmatcher#bcc()","mail::message#bcc()","mail::message#bcc=()","mail::message#bcc_addrs()","object#blank?()","mail::message#body()","mail::message#body=()","mail::message#body_encoding()","mail::message#body_encoding=()","mail::message#body_lazy()","mail::message#bounced?()","mail::part#bounced?()","mail::body#boundary()","mail::message#boundary()","mail::body#boundary=()","mail::ruby18::bracket()","mail::ruby19::bracket()","mail::utilities#bracket()","mail::exim::call()","mail::sendmail::call()","mail::encodings::base64::can_encode?()","mail::encodings::quotedprintable::can_encode?()","mail::encodings::transferencoding::can_encode?()","mail::encodings::transferencoding::can_transport?()","mail::multibyte::chars#capitalize()","mail::utilities#capitalize_field()","mail::matchers::hassentemailmatcher#cc()","mail::message#cc()","mail::message#cc=()","mail::message#cc_addrs()","mail::multibyte::chars#center()","mail::body#charset()","mail::header#charset()","mail::message#charset()","mail::structuredfield#charset()","mail::body#charset=()","mail::header#charset=()","mail::message#charset=()","mail::structuredfield#charset=()","mail::checkdeliveryparams#check_delivery_params()","mail::part#cid()","mail::messageidselement#clean_msg_id()","mail::parsers::contentdispositionparser#cleaned()","mail::encodings::collapse_adjacent_encodings()","mail::partslist#collect()","mail::partslist#collect!()","mail::address#comments()","mail::message#comments()","mail::message#comments=()","mail::multibyte::chars#compose()","mail::multibyte::unicode#compose_codepoints()","mail::connection()","mail::imap#connection()","mail::pop3#connection()","mail::utilities#constantize()","string#constantize()","mail::multibyte::chars::consumes?()","mail::message#content_description()","mail::message#content_description=()","mail::message#content_disposition()","mail::message#content_disposition=()","mail::contentidfield#content_id()","mail::message#content_id()","mail::message#content_id=()","mail::message#content_location()","mail::message#content_location=()","mail::message#content_transfer_encoding()","mail::message#content_transfer_encoding=()","mail::contenttypefield#content_type()","mail::message#content_type()","mail::message#content_type=()","mail::message#content_type_parameters()","mail::indifferenthash#convert_key()","mail::message#convert_to_multipart()","mail::indifferenthash#convert_value()","mail::encodings::base64::cost()","mail::encodings::binary::cost()","mail::encodings::eightbit::cost()","mail::encodings::quotedprintable::cost()","mail::encodings::sevenbit::cost()","mail::encodings::transferencoding::cost()","mail::field#create_field()","mail::body#crlf_boundary()","mail::utilities#dasherize()","mail::multibyte::unicode#database()","mail::envelope#date()","mail::message#date()","mail::message#date=()","mail::envelopefromelement#date_time()","mail::receivedelement#date_time()","mail::receivedfield#date_time()","mail::encodings::base64::decode()","mail::encodings::binary::decode()","mail::encodings::eightbit::decode()","mail::encodings::quotedprintable::decode()","mail::encodings::sevenbit::decode()","mail::ruby18::decode_base64()","mail::ruby19::decode_base64()","mail::message#decode_body()","mail::message#decode_body_as_text()","mail::encodings::decode_encode()","mail::address#decoded()","mail::bccfield#decoded()","mail::body#decoded()","mail::ccfield#decoded()","mail::contentdispositionfield#decoded()","mail::contentidfield#decoded()","mail::contentlocationfield#decoded()","mail::contenttransferencodingfield#decoded()","mail::contenttypefield#decoded()","mail::datefield#decoded()","mail::fromfield#decoded()","mail::header#decoded()","mail::inreplytofield#decoded()","mail::keywordsfield#decoded()","mail::message#decoded()","mail::messageidfield#decoded()","mail::mimeversionfield#decoded()","mail::parameterhash#decoded()","mail::receivedfield#decoded()","mail::referencesfield#decoded()","mail::replytofield#decoded()","mail::resentbccfield#decoded()","mail::resentccfield#decoded()","mail::resentdatefield#decoded()","mail::resentfromfield#decoded()","mail::resentmessageidfield#decoded()","mail::resentsenderfield#decoded()","mail::resenttofield#decoded()","mail::returnpathfield#decoded()","mail::senderfield#decoded()","mail::tofield#decoded()","mail::unstructuredfield#decoded()","mail::multibyte::chars#decompose()","mail::multibyte::unicode#decompose_codepoints()","mail::contenttypefield#default()","mail::indifferenthash#default()","mail::keywordsfield#default()","mail::message#default()","mail::returnpathfield#default()","mail::senderfield#default()","mail::structuredfield#default()","mail::unstructuredfield#default()","mail::defaults()","mail::encodings::defined?()","mail::indifferenthash#delete()","mail::delete_all()","mail::imap#delete_all()","mail::pop3#delete_all()","mail::deliver()","mail::message#deliver()","mail::filedelivery#deliver!()","mail::message#deliver!()","mail::smtp#deliver!()","mail::smtpconnection#deliver!()","mail::sendmail#deliver!()","mail::testmailer#deliver!()","mail::testmailer::deliveries()","mail::testmailer::deliveries=()","mail::delivery_method()","mail::configuration#delivery_method()","mail::message#delivery_method()","mail::part#delivery_status_data()","mail::message#delivery_status_part()","mail::message#delivery_status_report?()","mail::part#delivery_status_report_part?()","mail::matchers::hassentemailmatcher#description()","mail::message#destinations()","mail::message#diagnostic_code()","mail::part#diagnostic_code()","mail::multibyte::unicode::unicodedatabase::dirname()","mail::address#display_name()","mail::address#display_name=()","mail::contentdispositionfield#disposition_type()","mail::unstructuredfield#do_decode()","mail::message#do_delivery()","mail::unstructuredfield#do_encode()","mail::address#domain()","mail::multibyte::chars#downcase()","mail::utilities#dquote()","mail::matchers::hassentemailmatcher#dump_deliveries()","mail::indifferenthash#dup()","mail::header#each()","mail::eager_autoload!()","mail::contentdispositionfield#element()","mail::contentidfield#element()","mail::contentlocationfield#element()","mail::contenttransferencodingfield#element()","mail::contenttypefield#element()","mail::envelope#element()","mail::mimeversionfield#element()","mail::receivedfield#element()","mail::testretriever::emails()","mail::testretriever::emails=()","mail::body#empty?()","mail::encodings::base64::encode()","mail::encodings::binary::encode()","mail::encodings::eightbit::encode()","mail::encodings::quotedprintable::encode()","mail::encodings::sevenbit::encode()","mail::unstructuredfield#encode()","mail::message#encode!()","mail::ruby18::encode_base64()","mail::ruby19::encode_base64()","mail::unstructuredfield#encode_crlf()","mail::encodings::encode_non_usascii()","mail::address#encoded()","mail::bccfield#encoded()","mail::body#encoded()","mail::ccfield#encoded()","mail::contentdispositionfield#encoded()","mail::contentidfield#encoded()","mail::contentlocationfield#encoded()","mail::contenttransferencodingfield#encoded()","mail::contenttypefield#encoded()","mail::datefield#encoded()","mail::fromfield#encoded()","mail::header#encoded()","mail::inreplytofield#encoded()","mail::keywordsfield#encoded()","mail::message#encoded()","mail::messageidfield#encoded()","mail::mimeversionfield#encoded()","mail::parameterhash#encoded()","mail::receivedfield#encoded()","mail::referencesfield#encoded()","mail::replytofield#encoded()","mail::resentbccfield#encoded()","mail::resentccfield#encoded()","mail::resentdatefield#encoded()","mail::resentfromfield#encoded()","mail::resentmessageidfield#encoded()","mail::resentsenderfield#encoded()","mail::resenttofield#encoded()","mail::returnpathfield#encoded()","mail::senderfield#encoded()","mail::tofield#encoded()","mail::unstructuredfield#encoded()","mail::body#encoding()","mail::contenttransferencodingelement#encoding()","mail::contenttransferencodingfield#encoding()","mail::body#encoding=()","mail::body#end_boundary()","mail::message#envelope_date()","mail::message#envelope_from()","mail::body#epilogue()","mail::body#epilogue=()","mail::message#error_status()","mail::part#error_status()","mail::header#errors()","mail::message#errors()","mail::structuredfield#errors()","mail::ruby18::escape_bracket()","mail::ruby19::escape_bracket()","mail::ruby18::escape_paren()","mail::ruby19::escape_paren()","mail::utilities#escape_paren()","mail::matchers::hassentemailmatcher#explain_expectations()","mail::matchers::hassentemailmatcher#failure_message()","mail::indifferenthash#fetch()","mail::field#field()","mail::field#field=()","mail::field#field_order_id()","mail::header#field_summary()","mail::header#fields()","mail::header#fields=()","mail::contentdispositionfield#filename()","mail::contenttypefield#filename()","mail::message#filename()","mail::multibyte::unicode::unicodedatabase::filename()","mail::matchers::hassentemailmatcher#filter_matched_deliveries()","mail::message#final_recipient()","mail::part#final_recipient()","mail::find()","mail::imap#find()","mail::pop3#find()","mail::testretriever#find()","mail::find_and_delete()","mail::retriever#find_and_delete()","mail::message#find_attachment()","mail::encodings::find_encoding()","mail::message#find_first_mime_type()","mail::first()","mail::retriever#first()","string#first()","mail::ruby18::fix_encoding()","mail::address#format()","mail::address#format_comments()","mail::receivedfield#formatted_date()","mail::envelopefromelement#formatted_date_time()","mail::envelope#from()","mail::matchers::hassentemailmatcher#from()","mail::message#from()","string#from()","mail::message#from=()","mail::message#from_addrs()","mail::message::from_hash()","mail::message::from_yaml()","mail::multibyte::chars#g_length()","mail::multibyte::unicode#g_pack()","mail::multibyte::unicode#g_unpack()","mail::contenttypefield::generate_boundary()","mail::contentidfield#generate_content_id()","mail::messageidfield#generate_message_id()","mail::encodings::get_all()","mail::encodings::transferencoding::get_best_compatible()","mail::body#get_best_encoding()","mail::address#get_comments()","mail::ruby18::get_constant()","mail::ruby19::get_constant()","mail::address#get_display_name()","mail::address#get_domain()","mail::encodings::get_encoding()","mail::address#get_local()","mail::contenttypefield#get_mime_type()","mail::address#get_name()","mail::encodings::get_name()","mail::partslist#get_order_value()","mail::part#get_return_values()","mail::attachmentslist#guess_encoding()","mail::message#has_attachments?()","mail::message#has_charset?()","mail::ruby18::has_constant?()","mail::ruby19::has_constant?()","mail::header#has_content_id?()","mail::part#has_content_id?()","mail::message#has_content_transfer_encoding?()","mail::message#has_content_type?()","mail::header#has_date?()","mail::message#has_date?()","mail::indifferenthash#has_key?()","mail::header#has_message_id?()","mail::message#has_message_id?()","mail::header#has_mime_version?()","mail::message#has_mime_version?()","mail::matchers#have_sent_email()","mail::message#header()","mail::message#header=()","mail::message#header_fields()","mail::message#headers()","mail::message#html_part()","mail::message#html_part=()","mail::message#identify_and_set_transfer_encoding()","mail::multibyte::unicode#in_char_class?()","mail::message#in_reply_to()","mail::message#in_reply_to=()","mail::body#include?()","mail::indifferenthash#include?()","mail::multibyte::chars#include?()","mail::multibyte::chars#index()","mail::receivedelement#info()","mail::receivedfield#info()","mail::inform_interceptors()","mail::message#inform_interceptors()","mail::inform_observers()","mail::message#inform_observers()","mail::message#init_with_hash()","mail::message#init_with_string()","mail::header#initialize_copy()","mail::message#initialize_copy()","mail::attachmentslist#inline()","mail::part#inline?()","mail::part#inline_content_id()","mail::multibyte::chars#insert()","mail::address#inspect()","mail::field#inspect()","mail::message#inspect()","mail::message#is_marked_for_delete?()","string#is_utf8?()","mail::indifferenthash#key?()","mail::keywordsfield#keywords()","mail::message#keywords()","mail::message#keywords=()","mail::last()","mail::retriever#last()","string#last()","mail::multibyte::chars#limit()","mail::header#limited_field?()","mail::multibyte::chars#ljust()","mail::multibyte::unicode::unicodedatabase#load()","mail::address#local()","mail::contentlocationfield#location()","mail::configuration#lookup_delivery_method()","mail::configuration#lookup_retriever_method()","mail::multibyte::chars#lstrip()","mail::parsers::ragel::machine_module=()","mail::contenttypefield#main_type()","mail::message#main_type()","mail::mimeversionelement#major()","mail::mimeversionfield#major()","mail::partslist#map()","mail::partslist#map!()","mail::utilities#map_lines()","mail::utilities#map_with_index()","mail::message#mark_for_delete=()","mail::body#match()","mail::utilities#match_to_s()","mail::matchers::hassentemailmatcher#matches?()","mail::matchers::hassentemailmatcher#matches_on_blind_copy_recipients?()","mail::matchers::hassentemailmatcher#matches_on_body?()","mail::matchers::hassentemailmatcher#matches_on_body_matcher?()","mail::matchers::hassentemailmatcher#matches_on_copy_recipients?()","mail::matchers::hassentemailmatcher#matches_on_recipients?()","mail::matchers::hassentemailmatcher#matches_on_sender?()","mail::matchers::hassentemailmatcher#matches_on_subject?()","mail::matchers::hassentemailmatcher#matches_on_subject_matcher?()","mail::matchers::hassentemailmatcher#matching_body()","mail::matchers::hassentemailmatcher#matching_subject()","mail::header::maximum_amount()","mail::header::maximum_amount=()","string#mb_chars()","mail::indifferenthash#member?()","mail::indifferenthash#merge()","mail::indifferenthash#merge!()","mail::message#message_content_type()","mail::message#message_id()","mail::messageidselement#message_id()","mail::message#message_id=()","mail::messageidfield#message_ids()","mail::messageidselement#message_ids()","mail::contenttypefield#method_missing()","mail::field#method_missing()","mail::message#method_missing()","mail::multibyte::chars#method_missing()","mail::message#mime_parameters()","mail::message#mime_type()","mail::message#mime_version()","mail::message#mime_version=()","mail::mimeversionelement#minor()","mail::mimeversionfield#minor()","mail::body#multipart?()","mail::message#multipart?()","mail::message#multipart_report?()","mail::address#name()","mail::contentidfield#name()","mail::field#name()","mail::messageidfield#name()","mail::resentmessageidfield#name()","mail::matchers::hassentemailmatcher#negative_failure_message()","mail::new()","mail::address::new()","mail::addresscontainer::new()","mail::attachmentslist::new()","mail::bccfield::new()","mail::body::new()","mail::ccfield::new()","mail::commentsfield::new()","mail::configuration::new()","mail::contentdescriptionfield::new()","mail::contentdispositionfield::new()","mail::contentidfield::new()","mail::contentlocationfield::new()","mail::contenttransferencodingelement::new()","mail::contenttransferencodingfield::new()","mail::contenttypefield::new()","mail::datefield::new()","mail::envelope::new()","mail::envelopefromelement::new()","mail::exim::new()","mail::field::new()","mail::filedelivery::new()","mail::fromfield::new()","mail::header::new()","mail::imap::new()","mail::inreplytofield::new()","mail::indifferenthash::new()","mail::keywordsfield::new()","mail::matchers::hassentemailmatcher::new()","mail::message::new()","mail::messageidfield::new()","mail::messageidselement::new()","mail::mimeversionelement::new()","mail::mimeversionfield::new()","mail::multibyte::chars::new()","mail::multibyte::unicode::unicodedatabase::new()","mail::pop3::new()","mail::phraselist::new()","mail::receivedelement::new()","mail::receivedfield::new()","mail::referencesfield::new()","mail::replytofield::new()","mail::resentbccfield::new()","mail::resentccfield::new()","mail::resentdatefield::new()","mail::resentfromfield::new()","mail::resentmessageidfield::new()","mail::resentsenderfield::new()","mail::resenttofield::new()","mail::returnpathfield::new()","mail::smtp::new()","mail::smtpconnection::new()","mail::senderfield::new()","mail::sendmail::new()","mail::structuredfield::new()","mail::subjectfield::new()","mail::testmailer::new()","mail::testretriever::new()","mail::tofield::new()","mail::unstructuredfield::new()","mail::field#new_field()","mail::indifferenthash::new_from_hash_copying_default()","mail::multibyte::chars#normalize()","mail::multibyte::unicode#normalize()","mail::unstructuredfield#normalized_encoding()","mail::body#only_us_ascii?()","mail::multibyte::chars#ord()","mail::encodings::param_decode()","mail::ruby18::param_decode()","mail::ruby19::param_decode()","mail::encodings::param_encode()","mail::ruby18::param_encode()","mail::ruby19::param_encode()","mail::configuration#param_encode_language()","mail::contentdispositionfield#parameters()","mail::contenttypefield#parameters()","mail::ruby18::paren()","mail::ruby19::paren()","mail::utilities#paren()","mail::address#parse()","mail::contentdispositionfield#parse()","mail::contentidfield#parse()","mail::contentlocationfield#parse()","mail::contenttransferencodingfield#parse()","mail::contenttypefield#parse()","mail::keywordsfield#parse()","mail::mimeversionfield#parse()","mail::parsers::addresslistsparser#parse()","mail::parsers::contentdispositionparser#parse()","mail::parsers::contentlocationparser#parse()","mail::parsers::contenttransferencodingparser#parse()","mail::parsers::contenttypeparser#parse()","mail::parsers::datetimeparser#parse()","mail::parsers::envelopefromparser#parse()","mail::parsers::messageidsparser#parse()","mail::parsers::mimeversionparser#parse()","mail::parsers::phraselistsparser#parse()","mail::parsers::ragel::parse()","mail::parsers::ragel::addresslistsmachine::parse()","mail::parsers::ragel::contentdispositionmachine::parse()","mail::parsers::ragel::contentlocationmachine::parse()","mail::parsers::ragel::contenttransferencodingmachine::parse()","mail::parsers::ragel::contenttypemachine::parse()","mail::parsers::ragel::datetimemachine::parse()","mail::parsers::ragel::envelopefrommachine::parse()","mail::parsers::ragel::messageidsmachine::parse()","mail::parsers::ragel::mimeversionmachine::parse()","mail::parsers::ragel::phraselistsmachine::parse()","mail::parsers::ragel::receivedmachine::parse()","mail::parsers::ragel::ruby::parse()","mail::parsers::receivedparser#parse()","mail::receivedfield#parse()","mail::unstructuredfield#parse()","mail::part#parse_delivery_status_report()","mail::message#parse_message()","mail::part#parse_message()","mail::message#part()","mail::body#parts()","mail::message#parts()","mail::keywordsfield#phrase_list()","mail::phraselist#phrases()","mail::ruby19::pick_encoding()","mail::sendmail::popen()","mail::body#preamble()","mail::body#preamble=()","mail::message#process_body_raw()","mail::multibyte::proxy_class()","mail::multibyte::proxy_class()","mail::multibyte::proxy_class=()","mail::multibyte::proxy_class=()","mail::encodings::q_value_decode()","mail::ruby18::q_value_decode()","mail::ruby19::q_value_decode()","mail::encodings::q_value_encode()","mail::ruby18::q_value_encode()","mail::ruby19::q_value_encode()","mail::utilities#quote_atom()","mail::utilities#quote_phrase()","mail::utilities#quote_token()","mail::random_tag()","mail::address#raw()","mail::message#raw_envelope()","mail::body#raw_source()","mail::header#raw_source()","mail::message#raw_source()","mail::header#raw_source=()","mail::message#raw_source=()","mail::read()","mail::message#read()","mail::read_from_string()","mail::message#ready_to_send!()","mail::message#received()","mail::message#received=()","mail::message#references()","mail::message#references=()","mail::encodings::register()","mail::register_autoload()","mail::message#register_for_delivery_notification()","mail::register_interceptor()","mail::register_observer()","mail::indifferenthash#regular_update()","mail::indifferenthash#regular_writer()","mail::message#remote_mta()","mail::part#remote_mta()","mail::multibyte::unicode#reorder_characters()","mail::message#reply()","mail::message#reply_to()","mail::message#reply_to=()","mail::message#resent_bcc()","mail::message#resent_bcc=()","mail::message#resent_cc()","mail::message#resent_cc=()","mail::message#resent_date()","mail::message#resent_date=()","mail::message#resent_from()","mail::message#resent_from=()","mail::message#resent_message_id()","mail::message#resent_message_id=()","mail::message#resent_sender()","mail::message#resent_sender=()","mail::message#resent_to()","mail::message#resent_to=()","mail::multibyte::chars#respond_to?()","mail::field#responsible_for?()","mail::retriever_method()","mail::configuration#retriever_method()","mail::message#retryable?()","mail::part#retryable?()","mail::message#return_path()","mail::message#return_path=()","mail::multibyte::chars#reverse()","mail::indifferenthash#reverse_merge()","mail::indifferenthash#reverse_merge!()","mail::multibyte::chars#rindex()","mail::multibyte::chars#rjust()","mail::multibyte::chars#rstrip()","mail::field#same()","mail::contenttypefield#sanatize()","mail::header#select_field_for()","mail::message#sender()","mail::message#sender=()","mail::message#separate_parts()","mail::body#set_charset()","mail::message#set_envelope()","mail::message#set_envelope_header()","mail::attachmentslist#set_mime_type()","mail::body#set_sort_order()","mail::sendmail::shellquote()","mail::parsers::ragel::ruby::silence_warnings()","mail::multibyte::chars#size()","mail::message#skip_deletion()","mail::multibyte::chars#slice()","mail::message#smtp_envelope_from()","mail::message#smtp_envelope_from=()","mail::message#smtp_envelope_to()","mail::message#smtp_envelope_to=()","mail::something_random()","mail::partslist#sort()","mail::partslist#sort!()","mail::body#sort_parts!()","mail::field#split()","mail::multibyte::chars#split()","mail::body#split!()","mail::encodings::split_encoding_from_string()","mail::header#split_header()","mail::encodings::split_value_encoding_from_string()","mail::smtp#ssl_context()","mail::imap#start()","mail::pop3#start()","mail::indifferenthash#store()","mail::contenttypefield#string()","mail::contenttypefield#stringify()","mail::indifferenthash#stringify_keys()","mail::indifferenthash#stringify_keys!()","mail::multibyte::chars#strip()","mail::address#strip_all_comments()","mail::address#strip_domain_comments()","mail::contenttypefield#sub_type()","mail::message#sub_type()","mail::message#subject()","mail::message#subject=()","mail::indifferenthash#symbolize_keys()","mail::message#text?()","mail::message#text_part()","mail::message#text_part=()","mail::multibyte::unicode#tidy_byte()","mail::multibyte::chars#tidy_bytes()","mail::multibyte::unicode#tidy_bytes()","mail::multibyte::chars#titlecase()","mail::multibyte::chars#titleize()","net::smtp#tlsconnect()","mail::matchers::hassentemailmatcher#to()","mail::message#to()","string#to()","mail::message#to=()","mail::message#to_addrs()","mail::indifferenthash#to_hash()","mail::indifferenthash#to_options!()","mail::address#to_s()","mail::body#to_s()","mail::contentidfield#to_s()","mail::encodings::transferencoding#to_s()","mail::encodings::transferencoding::to_s()","mail::envelopefromelement#to_s()","mail::field#to_s()","mail::header#to_s()","mail::message#to_s()","mail::messageidfield#to_s()","mail::receivedelement#to_s()","mail::message#to_yaml()","mail::utilities#token_safe?()","mail::message#transport_encoding()","mail::message#transport_encoding=()","mail::multibyte::unicode#u_unpack()","mail::utilities#unbracket()","mail::utilities#underscoreize()","mail::field#unfold()","mail::uniq()","mail::utilities#unparen()","mail::utilities#unquote()","mail::encodings::unquote_and_convert_to()","mail::unregister_interceptor()","mail::unregister_observer()","mail::multibyte::chars#upcase()","mail::field#update()","mail::indifferenthash#update()","mail::utilities#uri_escape()","mail::ruby19::uri_parser()","mail::utilities#uri_parser()","mail::utilities#uri_unescape()","mail::part#url()","mail::imap#validate_options()","mail::pop3#validate_options()","mail::contenttypefield#value()","mail::field#value()","mail::field#value=()","mail::encodings::value_decode()","mail::indifferenthash#values_at()","mail::mimeversionfield#version()","mail::version::version()","mail::multibyte::chars::wants?()","mail::matchers::hassentemailmatcher#with_body()","mail::contenttypefield::with_boundary()","mail::matchers::hassentemailmatcher#with_subject()","mail::message#without_attachments!()","mail::unstructuredfield#wrap_lines()","","","","","","","","","","","","","","","","","",""],"info":[["ActiveSupport","","ActiveSupport.html","",""],["Mail","","Mail.html","","<p>Mail Envelope\n<p>The Envelope class provides a field for the first line in an mbox file,\nthat looks like …\n"],["Mail::Address","","Mail/Address.html","",""],["Mail::AddressContainer","","Mail/AddressContainer.html","",""],["Mail::AddressList","","Mail/AddressList.html","",""],["Mail::AttachmentsList","","Mail/AttachmentsList.html","",""],["Mail::BccField","","Mail/BccField.html","",""],["Mail::Body","","Mail/Body.html","","<p>Body\n<p>The body is where the text of the email is stored.  Mail treats the body as\na single object.  The …\n"],["Mail::CcField","","Mail/CcField.html","",""],["Mail::CheckDeliveryParams","","Mail/CheckDeliveryParams.html","",""],["Mail::CommentsField","","Mail/CommentsField.html","",""],["Mail::CommonAddress","","Mail/CommonAddress.html","",""],["Mail::CommonDate","","Mail/CommonDate.html","",""],["Mail::CommonField","","Mail/CommonField.html","",""],["Mail::CommonMessageId","","Mail/CommonMessageId.html","",""],["Mail::Configuration","","Mail/Configuration.html","","<p>The Configuration class is a Singleton used to hold the default\nconfiguration for all Mail objects.\n<p>Each …\n"],["Mail::ContentDescriptionField","","Mail/ContentDescriptionField.html","",""],["Mail::ContentDispositionElement","","Mail/ContentDispositionElement.html","",""],["Mail::ContentDispositionField","","Mail/ContentDispositionField.html","",""],["Mail::ContentIdField","","Mail/ContentIdField.html","",""],["Mail::ContentLocationElement","","Mail/ContentLocationElement.html","",""],["Mail::ContentLocationField","","Mail/ContentLocationField.html","",""],["Mail::ContentTransferEncodingElement","","Mail/ContentTransferEncodingElement.html","",""],["Mail::ContentTransferEncodingField","","Mail/ContentTransferEncodingField.html","",""],["Mail::ContentTypeElement","","Mail/ContentTypeElement.html","",""],["Mail::ContentTypeField","","Mail/ContentTypeField.html","",""],["Mail::DateField","","Mail/DateField.html","",""],["Mail::DateTimeElement","","Mail/DateTimeElement.html","",""],["Mail::Encodings","","Mail/Encodings.html","",""],["Mail::Encodings::Base64","","Mail/Encodings/Base64.html","",""],["Mail::Encodings::Binary","","Mail/Encodings/Binary.html","",""],["Mail::Encodings::EightBit","","Mail/Encodings/EightBit.html","",""],["Mail::Encodings::QuotedPrintable","","Mail/Encodings/QuotedPrintable.html","",""],["Mail::Encodings::SevenBit","","Mail/Encodings/SevenBit.html","",""],["Mail::Encodings::TransferEncoding","","Mail/Encodings/TransferEncoding.html","",""],["Mail::Envelope","","Mail/Envelope.html","",""],["Mail::EnvelopeFromElement","","Mail/EnvelopeFromElement.html","",""],["Mail::Exim","","Mail/Exim.html","","<p>A delivery method implementation which sends via exim.\n<p>To use this, first find out where the exim binary …\n"],["Mail::Field","","Mail/Field.html","","<p>Provides a single class to call to create a new structured or unstructured\nfield.  Works out per RFC …\n"],["Mail::Field::FieldError","","Mail/Field/FieldError.html","","<p>Generic Field Exception\n"],["Mail::Field::ParseError","","Mail/Field/ParseError.html","",""],["Mail::Field::SyntaxError","","Mail/Field/SyntaxError.html","",""],["Mail::FieldList","","Mail/FieldList.html","","<p>Field List class provides an enhanced array that keeps a list of  email\nfields in order.  And allows …\n"],["Mail::FileDelivery","","Mail/FileDelivery.html","","<p>FileDelivery class delivers emails into multiple files based on the\ndestination address.  Each file is …\n"],["Mail::FromField","","Mail/FromField.html","",""],["Mail::Header","","Mail/Header.html","","<p>Provides access to a header object.\n<p>Per RFC2822\n\n<pre>2.2. Header Fields\n\n Header fields are lines composed of ...</pre>\n"],["Mail::IMAP","","Mail/IMAP.html","","<p>The IMAP retriever allows to get the last, first or all emails from a IMAP\nserver. Each email retrieved …\n"],["Mail::InReplyToField","","Mail/InReplyToField.html","",""],["Mail::IndifferentHash","","Mail/IndifferentHash.html","",""],["Mail::KeywordsField","","Mail/KeywordsField.html","",""],["Mail::Matchers","","Mail/Matchers.html","",""],["Mail::Matchers::HasSentEmailMatcher","","Mail/Matchers/HasSentEmailMatcher.html","",""],["Mail::Message","","Mail/Message.html","","<p>The Message class provides a single point of access to all things to do\nwith an email message.\n<p>You create …\n"],["Mail::MessageIdField","","Mail/MessageIdField.html","",""],["Mail::MessageIdsElement","","Mail/MessageIdsElement.html","",""],["Mail::MimeVersionElement","","Mail/MimeVersionElement.html","",""],["Mail::MimeVersionField","","Mail/MimeVersionField.html","",""],["Mail::Multibyte","","Mail/Multibyte.html","",""],["Mail::Multibyte","","Mail/Multibyte.html","",""],["Mail::Multibyte::Chars","","Mail/Multibyte/Chars.html","","<p>Chars enables you to work transparently with UTF-8 encoding in the Ruby\nString class without having extensive …\n"],["Mail::Multibyte::EncodingError","","Mail/Multibyte/EncodingError.html","","<p>Raised when a problem with the encoding was found.\n"],["Mail::Multibyte::Unicode","","Mail/Multibyte/Unicode.html","",""],["Mail::Multibyte::Unicode::Codepoint","","Mail/Multibyte/Unicode/Codepoint.html","","<p>Holds data about a codepoint in the Unicode database\n"],["Mail::Multibyte::Unicode::UnicodeDatabase","","Mail/Multibyte/Unicode/UnicodeDatabase.html","","<p>Holds static data from the Unicode database\n"],["Mail::OptionalField","","Mail/OptionalField.html","",""],["Mail::POP3","","Mail/POP3.html","","<p>The Pop3 retriever allows to get the last, first or all emails from a POP3\nserver. Each email retrieved …\n"],["Mail::ParameterHash","","Mail/ParameterHash.html","","<p>ParameterHash is an intelligent Hash that allows you to add parameter\nvalues including the MIME extension …\n"],["Mail::Parsers","","Mail/Parsers.html","",""],["Mail::Parsers::AddressListsParser","","Mail/Parsers/AddressListsParser.html","",""],["Mail::Parsers::ContentDispositionParser","","Mail/Parsers/ContentDispositionParser.html","",""],["Mail::Parsers::ContentLocationParser","","Mail/Parsers/ContentLocationParser.html","",""],["Mail::Parsers::ContentTransferEncodingParser","","Mail/Parsers/ContentTransferEncodingParser.html","",""],["Mail::Parsers::ContentTypeParser","","Mail/Parsers/ContentTypeParser.html","",""],["Mail::Parsers::DateTimeParser","","Mail/Parsers/DateTimeParser.html","",""],["Mail::Parsers::EnvelopeFromParser","","Mail/Parsers/EnvelopeFromParser.html","",""],["Mail::Parsers::MessageIdsParser","","Mail/Parsers/MessageIdsParser.html","",""],["Mail::Parsers::MimeVersionParser","","Mail/Parsers/MimeVersionParser.html","",""],["Mail::Parsers::PhraseListsParser","","Mail/Parsers/PhraseListsParser.html","",""],["Mail::Parsers::Ragel","","Mail/Parsers/Ragel.html","",""],["Mail::Parsers::Ragel::AddressListsMachine","","Mail/Parsers/Ragel/AddressListsMachine.html","",""],["Mail::Parsers::Ragel::ContentDispositionMachine","","Mail/Parsers/Ragel/ContentDispositionMachine.html","",""],["Mail::Parsers::Ragel::ContentLocationMachine","","Mail/Parsers/Ragel/ContentLocationMachine.html","",""],["Mail::Parsers::Ragel::ContentTransferEncodingMachine","","Mail/Parsers/Ragel/ContentTransferEncodingMachine.html","",""],["Mail::Parsers::Ragel::ContentTypeMachine","","Mail/Parsers/Ragel/ContentTypeMachine.html","",""],["Mail::Parsers::Ragel::DateTimeMachine","","Mail/Parsers/Ragel/DateTimeMachine.html","",""],["Mail::Parsers::Ragel::EnvelopeFromMachine","","Mail/Parsers/Ragel/EnvelopeFromMachine.html","",""],["Mail::Parsers::Ragel::MessageIdsMachine","","Mail/Parsers/Ragel/MessageIdsMachine.html","",""],["Mail::Parsers::Ragel::MimeVersionMachine","","Mail/Parsers/Ragel/MimeVersionMachine.html","",""],["Mail::Parsers::Ragel::PhraseListsMachine","","Mail/Parsers/Ragel/PhraseListsMachine.html","",""],["Mail::Parsers::Ragel::ReceivedMachine","","Mail/Parsers/Ragel/ReceivedMachine.html","",""],["Mail::Parsers::Ragel::Ruby","","Mail/Parsers/Ragel/Ruby.html","",""],["Mail::Parsers::ReceivedParser","","Mail/Parsers/ReceivedParser.html","",""],["Mail::Part","","Mail/Part.html","",""],["Mail::PartsList","","Mail/PartsList.html","",""],["Mail::Patterns","","Mail/Patterns.html","",""],["Mail::Patterns::Encoding","","Mail/Patterns/Encoding.html","",""],["Mail::PhraseList","","Mail/PhraseList.html","",""],["Mail::ReceivedElement","","Mail/ReceivedElement.html","",""],["Mail::ReceivedField","","Mail/ReceivedField.html","",""],["Mail::ReferencesField","","Mail/ReferencesField.html","",""],["Mail::ReplyToField","","Mail/ReplyToField.html","",""],["Mail::ResentBccField","","Mail/ResentBccField.html","",""],["Mail::ResentCcField","","Mail/ResentCcField.html","",""],["Mail::ResentDateField","","Mail/ResentDateField.html","",""],["Mail::ResentFromField","","Mail/ResentFromField.html","",""],["Mail::ResentMessageIdField","","Mail/ResentMessageIdField.html","",""],["Mail::ResentSenderField","","Mail/ResentSenderField.html","",""],["Mail::ResentToField","","Mail/ResentToField.html","",""],["Mail::Retriever","","Mail/Retriever.html","",""],["Mail::ReturnPathField","","Mail/ReturnPathField.html","",""],["Mail::Ruby18","","Mail/Ruby18.html","",""],["Mail::Ruby19","","Mail/Ruby19.html","",""],["Mail::SMTP","","Mail/SMTP.html","","<p>Sending Email with SMTP\n<p>Mail allows you to send emails using SMTP.  This is done by wrapping\nNet::SMTP …\n"],["Mail::SMTPConnection","","Mail/SMTPConnection.html","","<p>Sending Email with SMTP\n<p>Mail allows you to send emails using an open SMTP connection.  This is done\nby …\n"],["Mail::SenderField","","Mail/SenderField.html","",""],["Mail::Sendmail","","Mail/Sendmail.html","","<p>A delivery method implementation which sends via sendmail.\n<p>To use this, first find out where the sendmail …\n"],["Mail::StructuredField","","Mail/StructuredField.html","","<p>Provides access to a structured header field\n<p>Per RFC 2822:\n\n<pre>2.2.2. Structured Header Field Bodies\n\n   Some ...</pre>\n"],["Mail::SubjectField","","Mail/SubjectField.html","",""],["Mail::TestMailer","","Mail/TestMailer.html","","<p>The TestMailer is a bare bones mailer that does nothing.  It is useful when\nyou are testing.\n<p>It also provides …\n"],["Mail::TestRetriever","","Mail/TestRetriever.html","",""],["Mail::ToField","","Mail/ToField.html","",""],["Mail::UnknownEncodingType","","Mail/UnknownEncodingType.html","",""],["Mail::UnstructuredField","","Mail/UnstructuredField.html","","<p>Provides access to an unstructured header field\n<p>Per RFC 2822:\n\n<pre>2.2.1. Unstructured Header Field Bodies\n ...</pre>\n"],["Mail::Utilities","","Mail/Utilities.html","",""],["Mail::VERSION","","Mail/VERSION.html","",""],["Net","","Net.html","",""],["Net::SMTP","","Net/SMTP.html","",""],["NilClass","","NilClass.html","",""],["Object","","Object.html","",""],["String","","String.html","","<p>This is an almost cut and paste from ActiveSupport v3.0.6, copied in here\nso that Mail itself does not …\n"],["+","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-2B","(other)","<p>Returns a new Chars object containing the <em>other</em> object\nconcatenated to the string.\n<p>Example:\n\n<pre>('Café'.mb_chars ...</pre>\n"],["<<","Mail::AddressContainer","Mail/AddressContainer.html#method-i-3C-3C","(address)",""],["<<","Mail::Body","Mail/Body.html#method-i-3C-3C","( val )",""],["<<","Mail::FieldList","Mail/FieldList.html#method-i-3C-3C","( new_field )","<p>Insert the field in sorted order.\n<p>Heavily based on bisect.insort from Python, which is:\n\n<pre>Copyright (C) 2001-2013 ...</pre>\n"],["<=>","Mail::Field","Mail/Field.html#method-i-3C-3D-3E","( other )",""],["<=>","Mail::Message","Mail/Message.html#method-i-3C-3D-3E","(other)","<p>Provides the operator needed for sort et al.\n<p>Compares this mail object with another mail object, this …\n"],["<=>","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-3C-3D-3E","(other)","<p>Returns -1, 0, or 1, depending on whether the Chars object is to be sorted\nbefore, equal or after the …\n"],["==","Mail::Body","Mail/Body.html#method-i-3D-3D","(other)","<p>Matches this body with another body.  Also matches the decoded value of\nthis body with a string.\n<p>Examples: …\n"],["==","Mail::Field","Mail/Field.html#method-i-3D-3D","( other )",""],["==","Mail::Message","Mail/Message.html#method-i-3D-3D","(other)","<p>Two emails are the same if they have the same fields and body contents. One\ngotcha here is that Mail …\n"],["===","Mail::Multibyte::Unicode::UnicodeDatabase","Mail/Multibyte/Unicode/UnicodeDatabase.html#method-i-3D-3D-3D","(other)",""],["=~","Mail::Body","Mail/Body.html#method-i-3D-7E","(regexp)","<p>Accepts a string and performs a regular expression against the decoded text\n<p>Examples:\n\n<pre>body = Mail::Body.new('The ...</pre>\n"],["=~","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-3D-7E","(other)","<p>Like <code>String#=~</code> only it returns the character offset (in\ncodepoints) instead of the byte offset.\n<p>Example: …\n"],["[]","Mail::AttachmentsList","Mail/AttachmentsList.html#method-i-5B-5D","(index_value)","<p>Returns the attachment by filename or at index.\n<p>mail.attachments = File.read(‘test.png’) mail.attachments …\n"],["[]","Mail::Header","Mail/Header.html#method-i-5B-5D","(name)","\n<pre>3.6. Field definitions\n\n The following table indicates limits on the number of times each\n field may ...</pre>\n"],["[]","Mail::Message","Mail/Message.html#method-i-5B-5D","(name)","<p>Allows you to read an arbitrary header\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">mail</span>[<span class=\"ruby-string\">'foo'</span>] = <span class=\"ruby-string\">'1234'</span>\n<span class=\"ruby-identifier\">mail</span>[<span class=\"ruby-string\">'foo'</span>].<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\">#=&gt; '1234'</span>\n</pre>\n"],["[]","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-5B-5D","(*args)",""],["[]","Mail::ParameterHash","Mail/ParameterHash.html#method-i-5B-5D","(key_name)",""],["[]=","Mail::AttachmentsList","Mail/AttachmentsList.html#method-i-5B-5D-3D","(name, value)",""],["[]=","Mail::Header","Mail/Header.html#method-i-5B-5D-3D","(name, value)","<p>Sets the FIRST matching field in the header to passed value, or deletes the\nFIRST field matched from …\n"],["[]=","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-5B-5D-3D","(key, value)","<p>Assigns a new value to the hash:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[:key] = &quot;value&quot;</pre>\n"],["[]=","Mail::Message","Mail/Message.html#method-i-5B-5D-3D","(name, value)","<p>Allows you to add an arbitrary header\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">mail</span>[<span class=\"ruby-string\">'foo'</span>] = <span class=\"ruby-string\">'1234'</span>\n<span class=\"ruby-identifier\">mail</span>[<span class=\"ruby-string\">'foo'</span>].<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\">#=&gt; '1234'</span>\n</pre>\n"],["[]=","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-5B-5D-3D","(*args)","<p>Like <code>String#[]=</code>, except instead of byte offsets you specify\ncharacter offsets.\n<p>Example:\n\n<pre>s = &quot;Müller&quot;\ns.mb_chars[2] ...</pre>\n"],["action","Mail::Message","Mail/Message.html#method-i-action","()",""],["action","Mail::Part","Mail/Part.html#method-i-action","()","<p>Either returns the action if the message has just a single report, or an\narray of all the actions, one …\n"],["acts_like_string?","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-acts_like_string-3F","()","<p>Enable more predictable duck-typing on String-like classes. See\nObject#acts_like?.\n"],["add_boundary","Mail::Message","Mail/Message.html#method-i-add_boundary","()",""],["add_charset","Mail::Message","Mail/Message.html#method-i-add_charset","()","<p>Adds a content type and charset if the body is US-ASCII\n<p>Otherwise raises a warning\n"],["add_content_id","Mail::Part","Mail/Part.html#method-i-add_content_id","(content_id_val = '')","<p>Creates a new empty Content-ID field and inserts it in the correct order\ninto the Header.  The ContentIdField …\n"],["add_content_transfer_encoding","Mail::Message","Mail/Message.html#method-i-add_content_transfer_encoding","()","<p>Adds a content transfer encoding\n<p>Otherwise raises a warning\n"],["add_content_type","Mail::Message","Mail/Message.html#method-i-add_content_type","()","<p>Adds a content type and charset if the body is US-ASCII\n<p>Otherwise raises a warning\n"],["add_date","Mail::Message","Mail/Message.html#method-i-add_date","(date_val = '')","<p>Creates a new empty Date field and inserts it in the correct order into the\nHeader.  The DateField object …\n"],["add_encoding_to_body","Mail::Message","Mail/Message.html#method-i-add_encoding_to_body","()",""],["add_file","Mail::Message","Mail/Message.html#method-i-add_file","(values)","<p>Adds a file to the message.  You have two options with this method, you can\njust pass in the absolute …\n"],["add_message_id","Mail::Message","Mail/Message.html#method-i-add_message_id","(msg_id_val = '')","<p>Creates a new empty Message-ID field and inserts it in the correct order\ninto the Header.  The MessageIdField …\n"],["add_mime_version","Mail::Message","Mail/Message.html#method-i-add_mime_version","(ver_val = '')","<p>Creates a new empty Mime Version field and inserts it in the correct order\ninto the Header.  The MimeVersion …\n"],["add_multipart_alternate_header","Mail::Message","Mail/Message.html#method-i-add_multipart_alternate_header","()",""],["add_multipart_mixed_header","Mail::Message","Mail/Message.html#method-i-add_multipart_mixed_header","()",""],["add_part","Mail::Message","Mail/Message.html#method-i-add_part","(part)","<p>Adds a part to the parts list or creates the part list\n"],["add_required_fields","Mail::Message","Mail/Message.html#method-i-add_required_fields","()",""],["add_required_fields","Mail::Part","Mail/Part.html#method-i-add_required_fields","()",""],["add_required_message_fields","Mail::Message","Mail/Message.html#method-i-add_required_message_fields","()",""],["add_required_message_fields","Mail::Part","Mail/Part.html#method-i-add_required_message_fields","()",""],["address","Mail::Address","Mail/Address.html#method-i-address","()","<p>Returns the address that is in the address itself.  That is, the \nlocal@domain string, without any angle …\n"],["address","Mail::EnvelopeFromElement","Mail/EnvelopeFromElement.html#method-i-address","()",""],["address","Mail::ResentSenderField","Mail/ResentSenderField.html#method-i-address","()",""],["address","Mail::ReturnPathField","Mail/ReturnPathField.html#method-i-address","()",""],["address","Mail::SenderField","Mail/SenderField.html#method-i-address","()",""],["address=","Mail::Address","Mail/Address.html#method-i-address-3D","(value)","<p>Provides a way to assign an address to an already made Mail::Address\nobject.\n\n<pre>a = Address.new\na.address ...</pre>\n"],["address_encode","Mail::Encodings","Mail/Encodings.html#method-c-address_encode","(address, charset = 'utf-8')",""],["addresses","Mail::ResentSenderField","Mail/ResentSenderField.html#method-i-addresses","()",""],["addresses","Mail::SenderField","Mail/SenderField.html#method-i-addresses","()",""],["all","Mail","Mail.html#method-c-all","(*args, &block)","<p>Receive all emails from the default retriever See Mail::Retriever for a\ncomplete documentation.\n"],["all","Mail::Retriever","Mail/Retriever.html#method-i-all","(options = {}, &block)","<p>Get all emails.\n<p>Possible options:\n\n<pre>order: order of emails returned. Possible values are :asc or :desc. Default ...</pre>\n"],["all_parts","Mail::Message","Mail/Message.html#method-i-all_parts","()",""],["at","String","String.html#method-i-at","(position)","<p>Returns the character at the <code>position</code> treating the string as\nan array (where 0 is the first character). …\n"],["atom_safe?","Mail::Utilities","Mail/Utilities.html#method-i-atom_safe-3F","( str )","<p>Returns true if the string supplied is free from characters not allowed as\nan ATOM\n"],["attachment","Mail::Message","Mail/Message.html#method-i-attachment","()","<p>Returns the attachment data if there is any\n"],["attachment?","Mail::Message","Mail/Message.html#method-i-attachment-3F","()","<p>Returns true if this part is an attachment, false otherwise.\n"],["attachments","Mail::Message","Mail/Message.html#method-i-attachments","()","<p>Returns an AttachmentsList object, which holds all of the attachments in\nthe receiver object (either …\n"],["attachments","Mail::PartsList","Mail/PartsList.html#method-i-attachments","()",""],["attempt_to_clean","Mail::ContentTypeField","Mail/ContentTypeField.html#method-i-attempt_to_clean","()",""],["b_value_decode","Mail::Encodings","Mail/Encodings.html#method-c-b_value_decode","(str)","<p>Decodes a Base64 string from the “=?UTF-8?B?VGhpcyBpcyDjgYIgc3RyaW5n?=”\nformat\n<p>Example:\n\n<pre>Encodings.b_value_decode(&quot;=?UTF-8?B?VGhpcyBpcyDjgYIgc3RyaW5n?=&quot;) ...</pre>\n"],["b_value_decode","Mail::Ruby18","Mail/Ruby18.html#method-c-b_value_decode","(str)",""],["b_value_decode","Mail::Ruby19","Mail/Ruby19.html#method-c-b_value_decode","(str)",""],["b_value_encode","Mail::Encodings","Mail/Encodings.html#method-c-b_value_encode","(encoded_str, encoding = nil)","<p>Encode a string with Base64 Encoding and returns it ready to be inserted as\na value for a field, that …\n"],["b_value_encode","Mail::Ruby18","Mail/Ruby18.html#method-c-b_value_encode","(str, encoding)",""],["b_value_encode","Mail::Ruby19","Mail/Ruby19.html#method-c-b_value_encode","(str, encoding = nil)",""],["bcc","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-bcc","(recipient_or_list)",""],["bcc","Mail::Message","Mail/Message.html#method-i-bcc","( val = nil )","<p>Returns the Bcc value of the mail object as an array of strings of address\nspecs.\n<p>Example:\n\n<pre>mail.bcc = 'Mikel ...</pre>\n"],["bcc=","Mail::Message","Mail/Message.html#method-i-bcc-3D","( val )","<p>Sets the Bcc value of the mail object, pass in a string of the field\n<p>Example:\n\n<pre>mail.bcc = 'Mikel &lt;mikel@test.lindsaar.net&gt;' ...</pre>\n"],["bcc_addrs","Mail::Message","Mail/Message.html#method-i-bcc_addrs","()","<p>Returns an array of addresses (the encoded value) in the Bcc field, if no\nBcc field, returns an empty …\n"],["blank?","Object","Object.html#method-i-blank-3F","()",""],["body","Mail::Message","Mail/Message.html#method-i-body","(value = nil)","<p>Returns the body of the message object. Or, if passed a parameter sets the\nvalue.\n<p>Example:\n\n<pre>mail = Mail::Message.new('To: ...</pre>\n"],["body=","Mail::Message","Mail/Message.html#method-i-body-3D","(value)","<p>Sets the body object of the message object.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">mail</span>.<span class=\"ruby-identifier\">body</span> = <span class=\"ruby-string\">'This is the body'</span>\n<span class=\"ruby-identifier\">mail</span>.<span class=\"ruby-identifier\">body</span> <span class=\"ruby-comment\">#=&gt; #&lt;Mail::Body:0x13919c ...</span>\n</pre>\n"],["body_encoding","Mail::Message","Mail/Message.html#method-i-body_encoding","(value)",""],["body_encoding=","Mail::Message","Mail/Message.html#method-i-body_encoding-3D","(value)",""],["body_lazy","Mail::Message","Mail/Message.html#method-i-body_lazy","(value)","<p>see comments to body=. We take data and process it lazily\n"],["bounced?","Mail::Message","Mail/Message.html#method-i-bounced-3F","()",""],["bounced?","Mail::Part","Mail/Part.html#method-i-bounced-3F","()",""],["boundary","Mail::Body","Mail/Body.html#method-i-boundary","()","<p>Returns the boundary used by the body\n"],["boundary","Mail::Message","Mail/Message.html#method-i-boundary","()","<p>Returns the current boundary for this message part\n"],["boundary=","Mail::Body","Mail/Body.html#method-i-boundary-3D","( val )","<p>Allows you to change the boundary of this Body object\n"],["bracket","Mail::Ruby18","Mail/Ruby18.html#method-c-bracket","( str )",""],["bracket","Mail::Ruby19","Mail/Ruby19.html#method-c-bracket","( str )",""],["bracket","Mail::Utilities","Mail/Utilities.html#method-i-bracket","( str )","<p>Wraps a string in angle brackets and escapes any that are in the string\nitself\n<p>Example:\n\n<pre>bracket( 'This ...</pre>\n"],["call","Mail::Exim","Mail/Exim.html#method-c-call","(path, arguments, destinations, mail)",""],["call","Mail::Sendmail","Mail/Sendmail.html#method-c-call","(path, arguments, destinations, encoded_message)",""],["can_encode?","Mail::Encodings::Base64","Mail/Encodings/Base64.html#method-c-can_encode-3F","(enc)",""],["can_encode?","Mail::Encodings::QuotedPrintable","Mail/Encodings/QuotedPrintable.html#method-c-can_encode-3F","(str)",""],["can_encode?","Mail::Encodings::TransferEncoding","Mail/Encodings/TransferEncoding.html#method-c-can_encode-3F","(enc)",""],["can_transport?","Mail::Encodings::TransferEncoding","Mail/Encodings/TransferEncoding.html#method-c-can_transport-3F","(enc)",""],["capitalize","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-capitalize","()","<p>Converts the first character to uppercase and the remainder to lowercase.\n<p>Example:\n\n<pre>'über'.mb_chars.capitalize.to_s ...</pre>\n"],["capitalize_field","Mail::Utilities","Mail/Utilities.html#method-i-capitalize_field","( str )","<p>Capitalizes a string that is joined by hyphens correctly.\n<p>Example:\n\n<pre>string = 'resent-from-field'\ncapitalize_field( ...</pre>\n"],["cc","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-cc","(recipient_or_list)",""],["cc","Mail::Message","Mail/Message.html#method-i-cc","( val = nil )","<p>Returns the Cc value of the mail object as an array of strings of address\nspecs.\n<p>Example:\n\n<pre>mail.cc = 'Mikel ...</pre>\n"],["cc=","Mail::Message","Mail/Message.html#method-i-cc-3D","( val )","<p>Sets the Cc value of the mail object, pass in a string of the field\n<p>Example:\n\n<pre>mail.cc = 'Mikel &lt;mikel@test.lindsaar.net&gt;' ...</pre>\n"],["cc_addrs","Mail::Message","Mail/Message.html#method-i-cc_addrs","()","<p>Returns an array of addresses (the encoded value) in the Cc field, if no Cc\nfield, returns an empty array …\n"],["center","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-center","(integer, padstr=' ')","<p>Works just like <code>String#center</code>, only integer specifies\ncharacters instead of bytes.\n<p>Example:\n\n<pre>&quot;¾ cup&quot;.mb_chars.center(8).to_s ...</pre>\n"],["charset","Mail::Body","Mail/Body.html#method-i-charset","()",""],["charset","Mail::Header","Mail/Header.html#method-i-charset","()",""],["charset","Mail::Message","Mail/Message.html#method-i-charset","()","<p>Returns the character set defined in the content type field\n"],["charset","Mail::StructuredField","Mail/StructuredField.html#method-i-charset","()",""],["charset=","Mail::Body","Mail/Body.html#method-i-charset-3D","( val )",""],["charset=","Mail::Header","Mail/Header.html#method-i-charset-3D","(val)",""],["charset=","Mail::Message","Mail/Message.html#method-i-charset-3D","(value)","<p>Sets the charset to the supplied value.\n"],["charset=","Mail::StructuredField","Mail/StructuredField.html#method-i-charset-3D","(val)",""],["check_delivery_params","Mail::CheckDeliveryParams","Mail/CheckDeliveryParams.html#method-i-check_delivery_params","(mail)",""],["cid","Mail::Part","Mail/Part.html#method-i-cid","()",""],["clean_msg_id","Mail::MessageIdsElement","Mail/MessageIdsElement.html#method-i-clean_msg_id","( val )",""],["cleaned","Mail::Parsers::ContentDispositionParser","Mail/Parsers/ContentDispositionParser.html#method-i-cleaned","(string)",""],["collapse_adjacent_encodings","Mail::Encodings","Mail/Encodings.html#method-c-collapse_adjacent_encodings","(str)","<p>When the encoded string consists of multiple lines, lines with the same\nencoding (Q or B) can be joined …\n"],["collect","Mail::PartsList","Mail/PartsList.html#method-i-collect","()",""],["collect!","Mail::PartsList","Mail/PartsList.html#method-i-collect-21","()",""],["comments","Mail::Address","Mail/Address.html#method-i-comments","()","<p>Returns an array of comments that are in the email, or an empty array if\nthere are no comments\n\n<pre>a = Address.new('Mikel ...</pre>\n"],["comments","Mail::Message","Mail/Message.html#method-i-comments","( val = nil )",""],["comments=","Mail::Message","Mail/Message.html#method-i-comments-3D","( val )",""],["compose","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-compose","()","<p>Performs composition on all the characters.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'é'</span>.<span class=\"ruby-identifier\">length</span>                       <span class=\"ruby-comment\"># =&gt; 3</span>\n<span class=\"ruby-string\">'é'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">compose</span>.<span class=\"ruby-identifier\">to_s</span>.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["compose_codepoints","Mail::Multibyte::Unicode","Mail/Multibyte/Unicode.html#method-i-compose_codepoints","(codepoints)","<p>Compose decomposed characters to the composed form.\n"],["connection","Mail","Mail.html#method-c-connection","(&block)",""],["connection","Mail::IMAP","Mail/IMAP.html#method-i-connection","(&block)","<p>Returns the connection object of the retrievable (IMAP or POP3)\n"],["connection","Mail::POP3","Mail/POP3.html#method-i-connection","(&block)","<p>Returns the connection object of the retrievable (IMAP or POP3)\n"],["constantize","Mail::Utilities","Mail/Utilities.html#method-i-constantize","( str )","<p>Takes an underscored word and turns it into a class name\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">constantize</span>(<span class=\"ruby-string\">&quot;hello&quot;</span>) <span class=\"ruby-comment\">#=&gt; &quot;Hello&quot;</span>\n<span class=\"ruby-identifier\">constantize</span>(<span class=\"ruby-string\">&quot;hello-there&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["constantize","String","String.html#method-i-constantize","()","<p>Tries to find a constant with the name specified in the argument string:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;Module&quot;</span>.<span class=\"ruby-identifier\">constantize</span>     <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["consumes?","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-c-consumes-3F","(string)","<p>Returns <code>true</code> when the proxy class can handle the string.\nReturns <code>false</code> otherwise.\n"],["content_description","Mail::Message","Mail/Message.html#method-i-content_description","( val = nil )",""],["content_description=","Mail::Message","Mail/Message.html#method-i-content_description-3D","( val )",""],["content_disposition","Mail::Message","Mail/Message.html#method-i-content_disposition","( val = nil )",""],["content_disposition=","Mail::Message","Mail/Message.html#method-i-content_disposition-3D","( val )",""],["content_id","Mail::ContentIdField","Mail/ContentIdField.html#method-i-content_id","()",""],["content_id","Mail::Message","Mail/Message.html#method-i-content_id","( val = nil )",""],["content_id=","Mail::Message","Mail/Message.html#method-i-content_id-3D","( val )",""],["content_location","Mail::Message","Mail/Message.html#method-i-content_location","( val = nil )",""],["content_location=","Mail::Message","Mail/Message.html#method-i-content_location-3D","( val )",""],["content_transfer_encoding","Mail::Message","Mail/Message.html#method-i-content_transfer_encoding","( val = nil )",""],["content_transfer_encoding=","Mail::Message","Mail/Message.html#method-i-content_transfer_encoding-3D","( val )",""],["content_type","Mail::ContentTypeField","Mail/ContentTypeField.html#method-i-content_type","()",""],["content_type","Mail::Message","Mail/Message.html#method-i-content_type","( val = nil )",""],["content_type=","Mail::Message","Mail/Message.html#method-i-content_type-3D","( val )",""],["content_type_parameters","Mail::Message","Mail/Message.html#method-i-content_type_parameters","()","<p>Returns the content type parameters\n"],["convert_key","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-convert_key","(key)",""],["convert_to_multipart","Mail::Message","Mail/Message.html#method-i-convert_to_multipart","()",""],["convert_value","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-convert_value","(value)",""],["cost","Mail::Encodings::Base64","Mail/Encodings/Base64.html#method-c-cost","(str)","<p>Base64 has a fixed cost, 4 bytes out per 3 bytes in\n"],["cost","Mail::Encodings::Binary","Mail/Encodings/Binary.html#method-c-cost","(str)","<p>Idenity encodings have a fixed cost, 1 byte out per 1 byte in\n"],["cost","Mail::Encodings::EightBit","Mail/Encodings/EightBit.html#method-c-cost","(str)","<p>Idenity encodings have a fixed cost, 1 byte out per 1 byte in\n"],["cost","Mail::Encodings::QuotedPrintable","Mail/Encodings/QuotedPrintable.html#method-c-cost","(str)",""],["cost","Mail::Encodings::SevenBit","Mail/Encodings/SevenBit.html#method-c-cost","(str)","<p>Idenity encodings have a fixed cost, 1 byte out per 1 byte in\n"],["cost","Mail::Encodings::TransferEncoding","Mail/Encodings/TransferEncoding.html#method-c-cost","(str)",""],["create_field","Mail::Field","Mail/Field.html#method-i-create_field","(name, value, charset)",""],["crlf_boundary","Mail::Body","Mail/Body.html#method-i-crlf_boundary","()",""],["dasherize","Mail::Utilities","Mail/Utilities.html#method-i-dasherize","( str )","<p>Swaps out all underscores (_) for hyphens (-) good for stringing from\nsymbols a field name.\n<p>Example:\n\n<pre>string ...</pre>\n"],["database","Mail::Multibyte::Unicode","Mail/Multibyte/Unicode.html#method-i-database","()",""],["date","Mail::Envelope","Mail/Envelope.html#method-i-date","()",""],["date","Mail::Message","Mail/Message.html#method-i-date","( val = nil )",""],["date=","Mail::Message","Mail/Message.html#method-i-date-3D","( val )",""],["date_time","Mail::EnvelopeFromElement","Mail/EnvelopeFromElement.html#method-i-date_time","()",""],["date_time","Mail::ReceivedElement","Mail/ReceivedElement.html#method-i-date_time","()",""],["date_time","Mail::ReceivedField","Mail/ReceivedField.html#method-i-date_time","()",""],["decode","Mail::Encodings::Base64","Mail/Encodings/Base64.html#method-c-decode","(str)","<p>Decode the string from Base64\n"],["decode","Mail::Encodings::Binary","Mail/Encodings/Binary.html#method-c-decode","(str)","<p>Decode the string\n"],["decode","Mail::Encodings::EightBit","Mail/Encodings/EightBit.html#method-c-decode","(str)","<p>Decode the string\n"],["decode","Mail::Encodings::QuotedPrintable","Mail/Encodings/QuotedPrintable.html#method-c-decode","(str)","<p>Decode the string from Quoted-Printable. Cope with hard line breaks that\nwere incorrectly encoded as …\n"],["decode","Mail::Encodings::SevenBit","Mail/Encodings/SevenBit.html#method-c-decode","(str)","<p>Decode the string\n"],["decode_base64","Mail::Ruby18","Mail/Ruby18.html#method-c-decode_base64","(str)",""],["decode_base64","Mail::Ruby19","Mail/Ruby19.html#method-c-decode_base64","(str)",""],["decode_body","Mail::Message","Mail/Message.html#method-i-decode_body","()",""],["decode_body_as_text","Mail::Message","Mail/Message.html#method-i-decode_body_as_text","()",""],["decode_encode","Mail::Encodings","Mail/Encodings.html#method-c-decode_encode","(str, output_type)","<p>Decodes or encodes a string as needed for either Base64 or QP encoding\ntypes in the =?&lt;encoding>? …\n"],["decoded","Mail::Address","Mail/Address.html#method-i-decoded","()",""],["decoded","Mail::BccField","Mail/BccField.html#method-i-decoded","()",""],["decoded","Mail::Body","Mail/Body.html#method-i-decoded","()",""],["decoded","Mail::CcField","Mail/CcField.html#method-i-decoded","()",""],["decoded","Mail::ContentDispositionField","Mail/ContentDispositionField.html#method-i-decoded","()",""],["decoded","Mail::ContentIdField","Mail/ContentIdField.html#method-i-decoded","()",""],["decoded","Mail::ContentLocationField","Mail/ContentLocationField.html#method-i-decoded","()",""],["decoded","Mail::ContentTransferEncodingField","Mail/ContentTransferEncodingField.html#method-i-decoded","()",""],["decoded","Mail::ContentTypeField","Mail/ContentTypeField.html#method-i-decoded","()",""],["decoded","Mail::DateField","Mail/DateField.html#method-i-decoded","()",""],["decoded","Mail::FromField","Mail/FromField.html#method-i-decoded","()",""],["decoded","Mail::Header","Mail/Header.html#method-i-decoded","()",""],["decoded","Mail::InReplyToField","Mail/InReplyToField.html#method-i-decoded","()",""],["decoded","Mail::KeywordsField","Mail/KeywordsField.html#method-i-decoded","()",""],["decoded","Mail::Message","Mail/Message.html#method-i-decoded","()",""],["decoded","Mail::MessageIdField","Mail/MessageIdField.html#method-i-decoded","()",""],["decoded","Mail::MimeVersionField","Mail/MimeVersionField.html#method-i-decoded","()",""],["decoded","Mail::ParameterHash","Mail/ParameterHash.html#method-i-decoded","()",""],["decoded","Mail::ReceivedField","Mail/ReceivedField.html#method-i-decoded","()",""],["decoded","Mail::ReferencesField","Mail/ReferencesField.html#method-i-decoded","()",""],["decoded","Mail::ReplyToField","Mail/ReplyToField.html#method-i-decoded","()",""],["decoded","Mail::ResentBccField","Mail/ResentBccField.html#method-i-decoded","()",""],["decoded","Mail::ResentCcField","Mail/ResentCcField.html#method-i-decoded","()",""],["decoded","Mail::ResentDateField","Mail/ResentDateField.html#method-i-decoded","()",""],["decoded","Mail::ResentFromField","Mail/ResentFromField.html#method-i-decoded","()",""],["decoded","Mail::ResentMessageIdField","Mail/ResentMessageIdField.html#method-i-decoded","()",""],["decoded","Mail::ResentSenderField","Mail/ResentSenderField.html#method-i-decoded","()",""],["decoded","Mail::ResentToField","Mail/ResentToField.html#method-i-decoded","()",""],["decoded","Mail::ReturnPathField","Mail/ReturnPathField.html#method-i-decoded","()",""],["decoded","Mail::SenderField","Mail/SenderField.html#method-i-decoded","()",""],["decoded","Mail::ToField","Mail/ToField.html#method-i-decoded","()",""],["decoded","Mail::UnstructuredField","Mail/UnstructuredField.html#method-i-decoded","()",""],["decompose","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-decompose","()","<p>Performs canonical decomposition on all the characters.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'é'</span>.<span class=\"ruby-identifier\">length</span>                         <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["decompose_codepoints","Mail::Multibyte::Unicode","Mail/Multibyte/Unicode.html#method-i-decompose_codepoints","(type, codepoints)","<p>Decompose composed characters to the decomposed form.\n"],["default","Mail::ContentTypeField","Mail/ContentTypeField.html#method-i-default","()",""],["default","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-default","(key = nil)",""],["default","Mail::KeywordsField","Mail/KeywordsField.html#method-i-default","()",""],["default","Mail::Message","Mail/Message.html#method-i-default","( sym, val = nil )","<p>Returns the default value of the field requested as a symbol.\n<p>Each header field has a :default method …\n"],["default","Mail::ReturnPathField","Mail/ReturnPathField.html#method-i-default","()",""],["default","Mail::SenderField","Mail/SenderField.html#method-i-default","()",""],["default","Mail::StructuredField","Mail/StructuredField.html#method-i-default","()",""],["default","Mail::UnstructuredField","Mail/UnstructuredField.html#method-i-default","()",""],["defaults","Mail","Mail.html#method-c-defaults","(&block)","<p>Sets the default delivery method and retriever method for all new Mail\nobjects. The delivery_method and …\n"],["defined?","Mail::Encodings","Mail/Encodings.html#method-c-defined-3F","( str )","<p>Is the encoding we want defined?\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Encodings</span>.<span class=\"ruby-identifier\">defined?</span>(:<span class=\"ruby-identifier\">base64</span>) <span class=\"ruby-comment\">#=&gt; true</span>\n</pre>\n"],["delete","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-delete","(key)","<p>Removes a specified key from the hash.\n"],["delete_all","Mail","Mail.html#method-c-delete_all","(*args, &block)","<p>Delete all emails from the default retriever See Mail::Retriever for a\ncomplete documentation.\n"],["delete_all","Mail::IMAP","Mail/IMAP.html#method-i-delete_all","(mailbox='INBOX')","<p>Delete all emails from a IMAP mailbox\n"],["delete_all","Mail::POP3","Mail/POP3.html#method-i-delete_all","()","<p>Delete all emails from a POP3 server\n"],["deliver","Mail","Mail.html#method-c-deliver","(*args, &block)","<p>Send an email using the default configuration.  You do need to set a\ndefault configuration first before …\n"],["deliver","Mail::Message","Mail/Message.html#method-i-deliver","()","<p>Delivers an mail object.\n<p>Examples:\n\n<pre>mail = Mail.read('file.eml')\nmail.deliver</pre>\n"],["deliver!","Mail::FileDelivery","Mail/FileDelivery.html#method-i-deliver-21","(mail)",""],["deliver!","Mail::Message","Mail/Message.html#method-i-deliver-21","()","<p>This method bypasses checking perform_deliveries and raise_delivery_errors,\nso use with caution.\n<p>It still …\n"],["deliver!","Mail::SMTP","Mail/SMTP.html#method-i-deliver-21","(mail)","<p>Send the message via SMTP. The from and to attributes are optional. If not\nset, they are retrieve from …\n"],["deliver!","Mail::SMTPConnection","Mail/SMTPConnection.html#method-i-deliver-21","(mail)","<p>Send the message via SMTP. The from and to attributes are optional. If not\nset, they are retrieve from …\n"],["deliver!","Mail::Sendmail","Mail/Sendmail.html#method-i-deliver-21","(mail)",""],["deliver!","Mail::TestMailer","Mail/TestMailer.html#method-i-deliver-21","(mail)",""],["deliveries","Mail::TestMailer","Mail/TestMailer.html#method-c-deliveries","()","<p>Provides a store of all the emails sent with the TestMailer so you can\ncheck them.\n"],["deliveries=","Mail::TestMailer","Mail/TestMailer.html#method-c-deliveries-3D","(val)","<p>Allows you to over write the default deliveries store from an array to some\nother object.  If you just …\n"],["delivery_method","Mail","Mail.html#method-c-delivery_method","()","<p>Returns the delivery method selected, defaults to an instance of Mail::SMTP\n"],["delivery_method","Mail::Configuration","Mail/Configuration.html#method-i-delivery_method","(method = nil, settings = {})",""],["delivery_method","Mail::Message","Mail/Message.html#method-i-delivery_method","(method = nil, settings = {})",""],["delivery_status_data","Mail::Part","Mail/Part.html#method-i-delivery_status_data","()",""],["delivery_status_part","Mail::Message","Mail/Message.html#method-i-delivery_status_part","()","<p>returns the part in a multipart/report email that has the content-type\ndelivery-status\n"],["delivery_status_report?","Mail::Message","Mail/Message.html#method-i-delivery_status_report-3F","()","<p>Returns true if the message is a multipart/report;\nreport-type=delivery-status;\n"],["delivery_status_report_part?","Mail::Part","Mail/Part.html#method-i-delivery_status_report_part-3F","()",""],["description","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-description","()",""],["destinations","Mail::Message","Mail/Message.html#method-i-destinations","()","<p>Returns the list of addresses this message should be sent to by collecting\nthe addresses off the to, …\n"],["diagnostic_code","Mail::Message","Mail/Message.html#method-i-diagnostic_code","()",""],["diagnostic_code","Mail::Part","Mail/Part.html#method-i-diagnostic_code","()",""],["dirname","Mail::Multibyte::Unicode::UnicodeDatabase","Mail/Multibyte/Unicode/UnicodeDatabase.html#method-c-dirname","()","<p>Returns the directory in which the data files are stored\n"],["display_name","Mail::Address","Mail/Address.html#method-i-display_name","()","<p>Returns the display name of the email address passed in.\n\n<pre>a = Address.new('Mikel Lindsaar (My email address) ...</pre>\n"],["display_name=","Mail::Address","Mail/Address.html#method-i-display_name-3D","( str )","<p>Provides a way to assign a display name to an already made Mail::Address\nobject.\n\n<pre>a = Address.new\na.address ...</pre>\n"],["disposition_type","Mail::ContentDispositionField","Mail/ContentDispositionField.html#method-i-disposition_type","()",""],["do_decode","Mail::UnstructuredField","Mail/UnstructuredField.html#method-i-do_decode","()",""],["do_delivery","Mail::Message","Mail/Message.html#method-i-do_delivery","()",""],["do_encode","Mail::UnstructuredField","Mail/UnstructuredField.html#method-i-do_encode","()",""],["domain","Mail::Address","Mail/Address.html#method-i-domain","()","<p>Returns the domain part (the right hand side of the @ sign in the email\naddress) of the address\n\n<pre>a = Address.new('Mikel ...</pre>\n"],["downcase","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-downcase","()","<p>Convert characters in the string to lowercase.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'VĚDA A VÝZKUM'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">downcase</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; &quot;věda ...</span>\n</pre>\n"],["dquote","Mail::Utilities","Mail/Utilities.html#method-i-dquote","( str )","<p>Wraps supplied string in double quotes and applies -escaping as necessary,\nunless it is already wrapped. …\n"],["dump_deliveries","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-dump_deliveries","()",""],["dup","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-dup","()","<p>Returns an exact copy of the hash.\n"],["each","Mail::Header","Mail/Header.html#method-i-each","( &block )","<p>Enumerable support; yield each field in order to the block if there is one,\nor return an Enumerator for …\n"],["eager_autoload!","Mail","Mail.html#method-c-eager_autoload-21","()","<p>This runs through the autoload list and explictly requires them for you.\nUseful when running mail in …\n"],["element","Mail::ContentDispositionField","Mail/ContentDispositionField.html#method-i-element","()",""],["element","Mail::ContentIdField","Mail/ContentIdField.html#method-i-element","()",""],["element","Mail::ContentLocationField","Mail/ContentLocationField.html#method-i-element","()",""],["element","Mail::ContentTransferEncodingField","Mail/ContentTransferEncodingField.html#method-i-element","()",""],["element","Mail::ContentTypeField","Mail/ContentTypeField.html#method-i-element","()",""],["element","Mail::Envelope","Mail/Envelope.html#method-i-element","()",""],["element","Mail::MimeVersionField","Mail/MimeVersionField.html#method-i-element","()",""],["element","Mail::ReceivedField","Mail/ReceivedField.html#method-i-element","()",""],["emails","Mail::TestRetriever","Mail/TestRetriever.html#method-c-emails","()",""],["emails=","Mail::TestRetriever","Mail/TestRetriever.html#method-c-emails-3D","(val)",""],["empty?","Mail::Body","Mail/Body.html#method-i-empty-3F","()",""],["encode","Mail::Encodings::Base64","Mail/Encodings/Base64.html#method-c-encode","(str)","<p>Encode the string to Base64\n"],["encode","Mail::Encodings::Binary","Mail/Encodings/Binary.html#method-c-encode","(str)","<p>Encode the string\n"],["encode","Mail::Encodings::EightBit","Mail/Encodings/EightBit.html#method-c-encode","(str)","<p>Encode the string\n"],["encode","Mail::Encodings::QuotedPrintable","Mail/Encodings/QuotedPrintable.html#method-c-encode","(str)",""],["encode","Mail::Encodings::SevenBit","Mail/Encodings/SevenBit.html#method-c-encode","(str)","<p>Encode the string\n"],["encode","Mail::UnstructuredField","Mail/UnstructuredField.html#method-i-encode","(value)",""],["encode!","Mail::Message","Mail/Message.html#method-i-encode-21","()",""],["encode_base64","Mail::Ruby18","Mail/Ruby18.html#method-c-encode_base64","(str)",""],["encode_base64","Mail::Ruby19","Mail/Ruby19.html#method-c-encode_base64","(str)",""],["encode_crlf","Mail::UnstructuredField","Mail/UnstructuredField.html#method-i-encode_crlf","(value)",""],["encode_non_usascii","Mail::Encodings","Mail/Encodings.html#method-c-encode_non_usascii","(address, charset)",""],["encoded","Mail::Address","Mail/Address.html#method-i-encoded","()",""],["encoded","Mail::BccField","Mail/BccField.html#method-i-encoded","()","<p>Bcc field should never be :encoded\n"],["encoded","Mail::Body","Mail/Body.html#method-i-encoded","(transfer_encoding = '8bit')","<p>Returns a body encoded using transfer_encoding.  Multipart always uses an\nidentiy encoding (i.e. no encoding). …\n"],["encoded","Mail::CcField","Mail/CcField.html#method-i-encoded","()",""],["encoded","Mail::ContentDispositionField","Mail/ContentDispositionField.html#method-i-encoded","()","<p>TODO: Fix this up\n"],["encoded","Mail::ContentIdField","Mail/ContentIdField.html#method-i-encoded","()","<p>TODO: Fix this up\n"],["encoded","Mail::ContentLocationField","Mail/ContentLocationField.html#method-i-encoded","()","<p>TODO: Fix this up\n"],["encoded","Mail::ContentTransferEncodingField","Mail/ContentTransferEncodingField.html#method-i-encoded","()","<p>TODO: Fix this up\n"],["encoded","Mail::ContentTypeField","Mail/ContentTypeField.html#method-i-encoded","()","<p>TODO: Fix this up\n"],["encoded","Mail::DateField","Mail/DateField.html#method-i-encoded","()",""],["encoded","Mail::FromField","Mail/FromField.html#method-i-encoded","()",""],["encoded","Mail::Header","Mail/Header.html#method-i-encoded","()",""],["encoded","Mail::InReplyToField","Mail/InReplyToField.html#method-i-encoded","()",""],["encoded","Mail::KeywordsField","Mail/KeywordsField.html#method-i-encoded","()",""],["encoded","Mail::Message","Mail/Message.html#method-i-encoded","()","<p>Outputs an encoded string representation of the mail message including all\nheaders, attachments, etc. …\n"],["encoded","Mail::MessageIdField","Mail/MessageIdField.html#method-i-encoded","()",""],["encoded","Mail::MimeVersionField","Mail/MimeVersionField.html#method-i-encoded","()",""],["encoded","Mail::ParameterHash","Mail/ParameterHash.html#method-i-encoded","()",""],["encoded","Mail::ReceivedField","Mail/ReceivedField.html#method-i-encoded","()",""],["encoded","Mail::ReferencesField","Mail/ReferencesField.html#method-i-encoded","()",""],["encoded","Mail::ReplyToField","Mail/ReplyToField.html#method-i-encoded","()",""],["encoded","Mail::ResentBccField","Mail/ResentBccField.html#method-i-encoded","()",""],["encoded","Mail::ResentCcField","Mail/ResentCcField.html#method-i-encoded","()",""],["encoded","Mail::ResentDateField","Mail/ResentDateField.html#method-i-encoded","()",""],["encoded","Mail::ResentFromField","Mail/ResentFromField.html#method-i-encoded","()",""],["encoded","Mail::ResentMessageIdField","Mail/ResentMessageIdField.html#method-i-encoded","()",""],["encoded","Mail::ResentSenderField","Mail/ResentSenderField.html#method-i-encoded","()",""],["encoded","Mail::ResentToField","Mail/ResentToField.html#method-i-encoded","()",""],["encoded","Mail::ReturnPathField","Mail/ReturnPathField.html#method-i-encoded","()",""],["encoded","Mail::SenderField","Mail/SenderField.html#method-i-encoded","()",""],["encoded","Mail::ToField","Mail/ToField.html#method-i-encoded","()",""],["encoded","Mail::UnstructuredField","Mail/UnstructuredField.html#method-i-encoded","()",""],["encoding","Mail::Body","Mail/Body.html#method-i-encoding","(val = nil)",""],["encoding","Mail::ContentTransferEncodingElement","Mail/ContentTransferEncodingElement.html#method-i-encoding","()",""],["encoding","Mail::ContentTransferEncodingField","Mail/ContentTransferEncodingField.html#method-i-encoding","()",""],["encoding=","Mail::Body","Mail/Body.html#method-i-encoding-3D","( val )",""],["end_boundary","Mail::Body","Mail/Body.html#method-i-end_boundary","()",""],["envelope_date","Mail::Message","Mail/Message.html#method-i-envelope_date","()",""],["envelope_from","Mail::Message","Mail/Message.html#method-i-envelope_from","()",""],["epilogue","Mail::Body","Mail/Body.html#method-i-epilogue","()","<p>Returns the epilogue (any text that is after the last MIME boundary)\n"],["epilogue=","Mail::Body","Mail/Body.html#method-i-epilogue-3D","( val )","<p>Sets the epilogue to a string (adds text after the last MIME boundary)\n"],["error_status","Mail::Message","Mail/Message.html#method-i-error_status","()",""],["error_status","Mail::Part","Mail/Part.html#method-i-error_status","()",""],["errors","Mail::Header","Mail/Header.html#method-i-errors","()",""],["errors","Mail::Message","Mail/Message.html#method-i-errors","()","<p>Returns a list of parser errors on the header, each field that had an error\nwill be reparsed as an unstructured …\n"],["errors","Mail::StructuredField","Mail/StructuredField.html#method-i-errors","()",""],["escape_bracket","Mail::Ruby18","Mail/Ruby18.html#method-c-escape_bracket","( str )",""],["escape_bracket","Mail::Ruby19","Mail/Ruby19.html#method-c-escape_bracket","( str )",""],["escape_paren","Mail::Ruby18","Mail/Ruby18.html#method-c-escape_paren","( str )","<p>Escapes any parenthesis in a string that are unescaped. This can’t use the\nRuby 1.9.1 regexp feature …\n"],["escape_paren","Mail::Ruby19","Mail/Ruby19.html#method-c-escape_paren","( str )","<p>Escapes any parenthesis in a string that are unescaped this uses a Ruby\n1.9.1 regexp feature of negative …\n"],["escape_paren","Mail::Utilities","Mail/Utilities.html#method-i-escape_paren","( str )","<p>Escape parenthesies in a string\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">str</span> = <span class=\"ruby-string\">'This is (a) string'</span>\n<span class=\"ruby-identifier\">escape_paren</span>( <span class=\"ruby-identifier\">str</span> ) <span class=\"ruby-comment\">#=&gt; 'This is \\(a\\) ...</span>\n</pre>\n"],["explain_expectations","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-explain_expectations","()",""],["failure_message","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-failure_message","()",""],["fetch","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-fetch","(key, *extras)","<p>Fetches the value for the specified key, same as doing hash\n"],["field","Mail::Field","Mail/Field.html#method-i-field","()",""],["field=","Mail::Field","Mail/Field.html#method-i-field-3D","(value)",""],["field_order_id","Mail::Field","Mail/Field.html#method-i-field_order_id","()",""],["field_summary","Mail::Header","Mail/Header.html#method-i-field_summary","()",""],["fields","Mail::Header","Mail/Header.html#method-i-fields","()","<p>Returns an array of all the fields in the header in order that they were\nread in.\n"],["fields=","Mail::Header","Mail/Header.html#method-i-fields-3D","(unfolded_fields)","\n<pre>3.6. Field definitions\n\n It is important to note that the header fields are not guaranteed to\n be in ...</pre>\n"],["filename","Mail::ContentDispositionField","Mail/ContentDispositionField.html#method-i-filename","()",""],["filename","Mail::ContentTypeField","Mail/ContentTypeField.html#method-i-filename","()",""],["filename","Mail::Message","Mail/Message.html#method-i-filename","()","<p>Returns the filename of the attachment\n"],["filename","Mail::Multibyte::Unicode::UnicodeDatabase","Mail/Multibyte/Unicode/UnicodeDatabase.html#method-c-filename","()","<p>Returns the filename for the data file for this version\n"],["filter_matched_deliveries","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-filter_matched_deliveries","(deliveries)",""],["final_recipient","Mail::Message","Mail/Message.html#method-i-final_recipient","()",""],["final_recipient","Mail::Part","Mail/Part.html#method-i-final_recipient","()",""],["find","Mail","Mail.html#method-c-find","(*args, &block)","<p>Find emails from the default retriever See Mail::Retriever for a complete\ndocumentation.\n"],["find","Mail::IMAP","Mail/IMAP.html#method-i-find","(options={}, &block)","<p>Find emails in a IMAP mailbox. Without any options, the 10 last received\nemails are returned.\n<p>Possible …\n"],["find","Mail::POP3","Mail/POP3.html#method-i-find","(options = {}, &block)","<p>Find emails in a POP3 mailbox. Without any options, the 5 last received\nemails are returned.\n<p>Possible …\n"],["find","Mail::TestRetriever","Mail/TestRetriever.html#method-i-find","(options = {}, &block)",""],["find_and_delete","Mail","Mail.html#method-c-find_and_delete","(*args, &block)","<p>Finds and then deletes retrieved emails from the default retriever See\nMail::Retriever for a complete …\n"],["find_and_delete","Mail::Retriever","Mail/Retriever.html#method-i-find_and_delete","(options = {}, &block)","<p>Find emails in the mailbox, and then deletes them. Without any options, the\nfive last received emails …\n"],["find_attachment","Mail::Message","Mail/Message.html#method-i-find_attachment","()","<p>Returns the filename of the attachment (if it exists) or returns nil\n"],["find_encoding","Mail::Encodings","Mail/Encodings.html#method-c-find_encoding","(str)",""],["find_first_mime_type","Mail::Message","Mail/Message.html#method-i-find_first_mime_type","(mt)",""],["first","Mail","Mail.html#method-c-first","(*args, &block)","<p>Receive the first email(s) from the default retriever See Mail::Retriever\nfor a complete documentation. …\n"],["first","Mail::Retriever","Mail/Retriever.html#method-i-first","(options = {}, &block)","<p>Get the oldest received email(s)\n<p>Possible options:\n\n<pre>count: number of emails to retrieve. The default value ...</pre>\n"],["first","String","String.html#method-i-first","(limit = 1)","<p>Returns the first character of the string or the first <code>limit</code>\ncharacters.\n<p>Examples:\n\n<pre>&quot;hello&quot;.first     # ...</pre>\n"],["fix_encoding","Mail::Ruby18","Mail/Ruby18.html#method-c-fix_encoding","(encoding)",""],["format","Mail::Address","Mail/Address.html#method-i-format","()","<p>Returns a correctly formatted address for the email going out.  If given an\nincorrectly formatted address …\n"],["format_comments","Mail::Address","Mail/Address.html#method-i-format_comments","()",""],["formatted_date","Mail::ReceivedField","Mail/ReceivedField.html#method-i-formatted_date","()",""],["formatted_date_time","Mail::EnvelopeFromElement","Mail/EnvelopeFromElement.html#method-i-formatted_date_time","()","<p>RFC 4155:\n\n<pre>a timestamp indicating the UTC date and time when the message\nwas originally received, conformant ...</pre>\n"],["from","Mail::Envelope","Mail/Envelope.html#method-i-from","()",""],["from","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-from","(sender)",""],["from","Mail::Message","Mail/Message.html#method-i-from","( val = nil )","<p>Returns the From value of the mail object as an array of strings of address\nspecs.\n<p>Example:\n\n<pre>mail.from = ...</pre>\n"],["from","String","String.html#method-i-from","(position)","<p>Returns the remaining of the string from the <code>position</code> treating\nthe string as an array (where 0 is the …\n"],["from=","Mail::Message","Mail/Message.html#method-i-from-3D","( val )","<p>Sets the From value of the mail object, pass in a string of the field\n<p>Example:\n\n<pre>mail.from = 'Mikel &lt;mikel@test.lindsaar.net&gt;' ...</pre>\n"],["from_addrs","Mail::Message","Mail/Message.html#method-i-from_addrs","()","<p>Returns an array of addresses (the encoded value) in the From field, if no\nFrom field, returns an empty …\n"],["from_hash","Mail::Message","Mail/Message.html#method-c-from_hash","(hash)",""],["from_yaml","Mail::Message","Mail/Message.html#method-c-from_yaml","(str)",""],["g_length","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-g_length","()","<p>Returns the number of grapheme clusters in the string.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'क्षि'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">length</span>   <span class=\"ruby-comment\"># =&gt; 4</span>\n<span class=\"ruby-string\">'क्षि'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">g_length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["g_pack","Mail::Multibyte::Unicode","Mail/Multibyte/Unicode.html#method-i-g_pack","(unpacked)","<p>Reverse operation of g_unpack.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Unicode</span>.<span class=\"ruby-identifier\">g_pack</span>(<span class=\"ruby-constant\">Unicode</span>.<span class=\"ruby-identifier\">g_unpack</span>(<span class=\"ruby-string\">'क्षि'</span>)) <span class=\"ruby-comment\"># =&gt; 'क्षि'</span>\n</pre>\n"],["g_unpack","Mail::Multibyte::Unicode","Mail/Multibyte/Unicode.html#method-i-g_unpack","(string)","<p>Unpack the string at grapheme boundaries. Returns a list of character\nlists.\n<p>Example:\n\n<pre>Unicode.g_unpack('क्षि') ...</pre>\n"],["generate_boundary","Mail::ContentTypeField","Mail/ContentTypeField.html#method-c-generate_boundary","()",""],["generate_content_id","Mail::ContentIdField","Mail/ContentIdField.html#method-i-generate_content_id","()",""],["generate_message_id","Mail::MessageIdField","Mail/MessageIdField.html#method-i-generate_message_id","()",""],["get_all","Mail::Encodings","Mail/Encodings.html#method-c-get_all","()",""],["get_best_compatible","Mail::Encodings::TransferEncoding","Mail/Encodings/TransferEncoding.html#method-c-get_best_compatible","(source_encoding, str)",""],["get_best_encoding","Mail::Body","Mail/Body.html#method-i-get_best_encoding","(target)",""],["get_comments","Mail::Address","Mail/Address.html#method-i-get_comments","()",""],["get_constant","Mail::Ruby18","Mail/Ruby18.html#method-c-get_constant","(klass, string)",""],["get_constant","Mail::Ruby19","Mail/Ruby19.html#method-c-get_constant","(klass, string)",""],["get_display_name","Mail::Address","Mail/Address.html#method-i-get_display_name","()",""],["get_domain","Mail::Address","Mail/Address.html#method-i-get_domain","()",""],["get_encoding","Mail::Encodings","Mail/Encodings.html#method-c-get_encoding","( str )","<p>Gets a defined encoding type, QuotedPrintable or Base64 for now.\n<p>Each encoding needs to be defined as …\n"],["get_local","Mail::Address","Mail/Address.html#method-i-get_local","()",""],["get_mime_type","Mail::ContentTypeField","Mail/ContentTypeField.html#method-i-get_mime_type","( val )",""],["get_name","Mail::Address","Mail/Address.html#method-i-get_name","()",""],["get_name","Mail::Encodings","Mail/Encodings.html#method-c-get_name","(enc)",""],["get_order_value","Mail::PartsList","Mail/PartsList.html#method-i-get_order_value","(part, order)",""],["get_return_values","Mail::Part","Mail/Part.html#method-i-get_return_values","(key)",""],["guess_encoding","Mail::AttachmentsList","Mail/AttachmentsList.html#method-i-guess_encoding","()","<p>Uses the mime type to try and guess the encoding, if it is a binary type,\nor unknown, then we set it …\n"],["has_attachments?","Mail::Message","Mail/Message.html#method-i-has_attachments-3F","()",""],["has_charset?","Mail::Message","Mail/Message.html#method-i-has_charset-3F","()",""],["has_constant?","Mail::Ruby18","Mail/Ruby18.html#method-c-has_constant-3F","(klass, string)",""],["has_constant?","Mail::Ruby19","Mail/Ruby19.html#method-c-has_constant-3F","(klass, string)",""],["has_content_id?","Mail::Header","Mail/Header.html#method-i-has_content_id-3F","()","<p>Returns true if the header has a Content-ID defined (empty or not)\n"],["has_content_id?","Mail::Part","Mail/Part.html#method-i-has_content_id-3F","()","<p>Returns true if the part has a content ID field, the field may or may not\nhave a value, but the field …\n"],["has_content_transfer_encoding?","Mail::Message","Mail/Message.html#method-i-has_content_transfer_encoding-3F","()",""],["has_content_type?","Mail::Message","Mail/Message.html#method-i-has_content_type-3F","()",""],["has_date?","Mail::Header","Mail/Header.html#method-i-has_date-3F","()","<p>Returns true if the header has a Date defined (empty or not)\n"],["has_date?","Mail::Message","Mail/Message.html#method-i-has_date-3F","()","<p>Returns true if the message has a Date field, the field may or may not have\na value, but the field exists …\n"],["has_key?","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-has_key-3F","(key)",""],["has_message_id?","Mail::Header","Mail/Header.html#method-i-has_message_id-3F","()","<p>Returns true if the header has a Message-ID defined (empty or not)\n"],["has_message_id?","Mail::Message","Mail/Message.html#method-i-has_message_id-3F","()","<p>Returns true if the message has a message ID field, the field may or may\nnot have a value, but the field …\n"],["has_mime_version?","Mail::Header","Mail/Header.html#method-i-has_mime_version-3F","()","<p>Returns true if the header has a MIME version defined (empty or not)\n"],["has_mime_version?","Mail::Message","Mail/Message.html#method-i-has_mime_version-3F","()","<p>Returns true if the message has a Mime-Version field, the field may or may\nnot have a value, but the …\n"],["have_sent_email","Mail::Matchers","Mail/Matchers.html#method-i-have_sent_email","()",""],["header","Mail::Message","Mail/Message.html#method-i-header","(value = nil)","<p>Returns the header object of the message object. Or, if passed a parameter\nsets the value.\n<p>Example:\n\n<pre>mail ...</pre>\n"],["header=","Mail::Message","Mail/Message.html#method-i-header-3D","(value)","<p>Sets the header of the message object.\n<p>Example:\n\n<pre>mail.header = 'To: mikel@test.lindsaar.net\\r\\nFrom: Bob@bob.com' ...</pre>\n"],["header_fields","Mail::Message","Mail/Message.html#method-i-header_fields","()","<p>Returns an FieldList of all the fields in the header in the order that they\nappear in the header\n"],["headers","Mail::Message","Mail/Message.html#method-i-headers","(hash = {})","<p>Provides a way to set custom headers, by passing in a hash\n"],["html_part","Mail::Message","Mail/Message.html#method-i-html_part","(&block)","<p>Accessor for html_part\n"],["html_part=","Mail::Message","Mail/Message.html#method-i-html_part-3D","(msg)","<p>Helper to add a html part to a multipart/alternative email.  If this and\ntext_part are both defined in …\n"],["identify_and_set_transfer_encoding","Mail::Message","Mail/Message.html#method-i-identify_and_set_transfer_encoding","()",""],["in_char_class?","Mail::Multibyte::Unicode","Mail/Multibyte/Unicode.html#method-i-in_char_class-3F","(codepoint, classes)","<p>Detect whether the codepoint is in a certain character class. Returns\n<code>true</code> when it’s in the specified …\n"],["in_reply_to","Mail::Message","Mail/Message.html#method-i-in_reply_to","( val = nil )",""],["in_reply_to=","Mail::Message","Mail/Message.html#method-i-in_reply_to-3D","( val )",""],["include?","Mail::Body","Mail/Body.html#method-i-include-3F","(other)","<p>Accepts anything that responds to #to_s and checks if it’s a substring of\nthe decoded text\n<p>Examples:\n\n<pre>body ...</pre>\n"],["include?","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-include-3F","(key)",""],["include?","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-include-3F","(other)","<p>Returns <code>true</code> if contained string contains <em>other</em>.\nReturns <code>false</code> otherwise.\n<p>Example:\n\n<pre>'Café'.mb_chars.include?('é') ...</pre>\n"],["index","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-index","(needle, offset=0)","<p>Returns the position <em>needle</em> in the string, counting in codepoints.\nReturns <code>nil</code> if <em>needle</em> isn’t found. …\n"],["info","Mail::ReceivedElement","Mail/ReceivedElement.html#method-i-info","()",""],["info","Mail::ReceivedField","Mail/ReceivedField.html#method-i-info","()",""],["inform_interceptors","Mail","Mail.html#method-c-inform_interceptors","(mail)",""],["inform_interceptors","Mail::Message","Mail/Message.html#method-i-inform_interceptors","()",""],["inform_observers","Mail","Mail.html#method-c-inform_observers","(mail)",""],["inform_observers","Mail::Message","Mail/Message.html#method-i-inform_observers","()",""],["init_with_hash","Mail::Message","Mail/Message.html#method-i-init_with_hash","(hash)",""],["init_with_string","Mail::Message","Mail/Message.html#method-i-init_with_string","(string)",""],["initialize_copy","Mail::Header","Mail/Header.html#method-i-initialize_copy","(original)",""],["initialize_copy","Mail::Message","Mail/Message.html#method-i-initialize_copy","(original)",""],["inline","Mail::AttachmentsList","Mail/AttachmentsList.html#method-i-inline","()",""],["inline?","Mail::Part","Mail/Part.html#method-i-inline-3F","()",""],["inline_content_id","Mail::Part","Mail/Part.html#method-i-inline_content_id","()",""],["insert","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-insert","(offset, fragment)","<p>Inserts the passed string at specified codepoint offsets.\n<p>Example:\n\n<pre>'Café'.mb_chars.insert(4, ' périferôl').to_s ...</pre>\n"],["inspect","Mail::Address","Mail/Address.html#method-i-inspect","()","<p>Shows the Address object basic details, including the Address\n\n<pre>a = Address.new('Mikel (My email) &lt;mikel@test.lindsaar.net&gt;') ...</pre>\n"],["inspect","Mail::Field","Mail/Field.html#method-i-inspect","()",""],["inspect","Mail::Message","Mail/Message.html#method-i-inspect","()",""],["is_marked_for_delete?","Mail::Message","Mail/Message.html#method-i-is_marked_for_delete-3F","()","<p>Returns whether message will be marked for deletion. If so, the message\nwill be deleted at session close …\n"],["is_utf8?","String","String.html#method-i-is_utf8-3F","()",""],["key?","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-key-3F","(key)","<p>Checks the hash for a key matching the argument passed in:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[&quot;key&quot;] ...</pre>\n"],["keywords","Mail::KeywordsField","Mail/KeywordsField.html#method-i-keywords","()",""],["keywords","Mail::Message","Mail/Message.html#method-i-keywords","( val = nil )",""],["keywords=","Mail::Message","Mail/Message.html#method-i-keywords-3D","( val )",""],["last","Mail","Mail.html#method-c-last","(*args, &block)","<p>Receive the first email(s) from the default retriever See Mail::Retriever\nfor a complete documentation. …\n"],["last","Mail::Retriever","Mail/Retriever.html#method-i-last","(options = {}, &block)","<p>Get the most recent received email(s)\n<p>Possible options:\n\n<pre>count: number of emails to retrieve. The default ...</pre>\n"],["last","String","String.html#method-i-last","(limit = 1)","<p>Returns the last character of the string or the last <code>limit</code>\ncharacters.\n<p>Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;hello&quot;</span>.<span class=\"ruby-identifier\">last</span>     <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["limit","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-limit","(limit)","<p>Limit the byte size of the string to a number of bytes without breaking\ncharacters. Usable when the storage …\n"],["limited_field?","Mail::Header","Mail/Header.html#method-i-limited_field-3F","(name)",""],["ljust","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-ljust","(integer, padstr=' ')","<p>Works just like <code>String#ljust</code>, only integer specifies\ncharacters instead of bytes.\n<p>Example:\n\n<pre>&quot;¾ cup&quot;.mb_chars.rjust(8).to_s ...</pre>\n"],["load","Mail::Multibyte::Unicode::UnicodeDatabase","Mail/Multibyte/Unicode/UnicodeDatabase.html#method-i-load","()","<p>Loads the Unicode database and returns all the internal objects of\nUnicodeDatabase.\n"],["local","Mail::Address","Mail/Address.html#method-i-local","()","<p>Returns the local part (the left hand side of the @ sign in the email\naddress) of the address\n\n<pre>a = Address.new('Mikel ...</pre>\n"],["location","Mail::ContentLocationField","Mail/ContentLocationField.html#method-i-location","()",""],["lookup_delivery_method","Mail::Configuration","Mail/Configuration.html#method-i-lookup_delivery_method","(method)",""],["lookup_retriever_method","Mail::Configuration","Mail/Configuration.html#method-i-lookup_retriever_method","(method)",""],["lstrip","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-lstrip","()","<p>Strips entire range of Unicode whitespace from the left of the string.\n"],["machine_module=","Mail::Parsers::Ragel","Mail/Parsers/Ragel.html#method-c-machine_module-3D","(m)",""],["main_type","Mail::ContentTypeField","Mail/ContentTypeField.html#method-i-main_type","()",""],["main_type","Mail::Message","Mail/Message.html#method-i-main_type","()","<p>Returns the main content type\n"],["major","Mail::MimeVersionElement","Mail/MimeVersionElement.html#method-i-major","()",""],["major","Mail::MimeVersionField","Mail/MimeVersionField.html#method-i-major","()",""],["map","Mail::PartsList","Mail/PartsList.html#method-i-map","()",""],["map!","Mail::PartsList","Mail/PartsList.html#method-i-map-21","()",""],["map_lines","Mail::Utilities","Mail/Utilities.html#method-i-map_lines","( str, &block )",""],["map_with_index","Mail::Utilities","Mail/Utilities.html#method-i-map_with_index","( enum, &block )",""],["mark_for_delete=","Mail::Message","Mail/Message.html#method-i-mark_for_delete-3D","(value = true)","<p>Sets whether this message should be deleted at session close (i.e. after\n#find). Message will only be …\n"],["match","Mail::Body","Mail/Body.html#method-i-match","(regexp)","<p>Accepts a string and performs a regular expression against the decoded text\n<p>Examples:\n\n<pre>body = Mail::Body.new('The ...</pre>\n"],["match_to_s","Mail::Utilities","Mail/Utilities.html#method-i-match_to_s","( obj1, obj2 )","<p>Matches two objects with their to_s values case insensitively\n<p>Example:\n\n<pre>obj2 = &quot;This_is_An_object&quot;\nobj1 ...</pre>\n"],["matches?","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-matches-3F","(subject)",""],["matches_on_blind_copy_recipients?","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-matches_on_blind_copy_recipients-3F","(delivery)",""],["matches_on_body?","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-matches_on_body-3F","(delivery)",""],["matches_on_body_matcher?","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-matches_on_body_matcher-3F","(delivery)",""],["matches_on_copy_recipients?","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-matches_on_copy_recipients-3F","(delivery)",""],["matches_on_recipients?","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-matches_on_recipients-3F","(delivery)",""],["matches_on_sender?","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-matches_on_sender-3F","(delivery)",""],["matches_on_subject?","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-matches_on_subject-3F","(delivery)",""],["matches_on_subject_matcher?","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-matches_on_subject_matcher-3F","(delivery)",""],["matching_body","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-matching_body","(body_matcher)",""],["matching_subject","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-matching_subject","(subject_matcher)",""],["maximum_amount","Mail::Header","Mail/Header.html#method-c-maximum_amount","()","<p>Large amount of headers in Email might create extra high CPU load Use this\nparameter to limit number …\n"],["maximum_amount=","Mail::Header","Mail/Header.html#method-c-maximum_amount-3D","(value)",""],["mb_chars","String","String.html#method-i-mb_chars","()","<p>Multibyte proxy\n<p><code>mb_chars</code> is a multibyte safe proxy for string methods.\n<p>In Ruby 1.8 and older it creates …\n"],["member?","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-member-3F","(key)",""],["merge","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-merge","(hash)","<p>Merges the instantized and the specified hashes together, giving precedence\nto the values from the second …\n"],["merge!","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-merge-21","(other_hash)",""],["message_content_type","Mail::Message","Mail/Message.html#method-i-message_content_type","()",""],["message_id","Mail::Message","Mail/Message.html#method-i-message_id","( val = nil )","<p>Returns the Message-ID of the mail object.  Note, per RFC 2822 the Message\nID consists of what is INSIDE …\n"],["message_id","Mail::MessageIdsElement","Mail/MessageIdsElement.html#method-i-message_id","()",""],["message_id=","Mail::Message","Mail/Message.html#method-i-message_id-3D","( val )","<p>Sets the Message-ID. Note, per RFC 2822 the Message ID consists of what is\nINSIDE the &lt; &gt; usually …\n"],["message_ids","Mail::MessageIdField","Mail/MessageIdField.html#method-i-message_ids","()",""],["message_ids","Mail::MessageIdsElement","Mail/MessageIdsElement.html#method-i-message_ids","()",""],["method_missing","Mail::ContentTypeField","Mail/ContentTypeField.html#method-i-method_missing","(name, *args, &block)",""],["method_missing","Mail::Field","Mail/Field.html#method-i-method_missing","(name, *args, &block)",""],["method_missing","Mail::Message","Mail/Message.html#method-i-method_missing","(name, *args, &block)","<p>Method Missing in this implementation allows you to set any of the standard\nfields directly as you would …\n"],["method_missing","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-method_missing","(method, *args, &block)","<p>Forward all undefined methods to the wrapped string.\n"],["mime_parameters","Mail::Message","Mail/Message.html#method-i-mime_parameters","()","<p>Returns the content type parameters\n"],["mime_type","Mail::Message","Mail/Message.html#method-i-mime_type","()","<p>Returns the MIME media type of part we are on, this is taken from the\ncontent-type header\n"],["mime_version","Mail::Message","Mail/Message.html#method-i-mime_version","( val = nil )","<p>Returns the MIME version of the email as a string\n<p>Example:\n\n<pre>mail.mime_version = '1.0'\nmail.mime_version ...</pre>\n"],["mime_version=","Mail::Message","Mail/Message.html#method-i-mime_version-3D","( val )","<p>Sets the MIME version of the email by accepting a string\n<p>Example:\n\n<pre>mail.mime_version = '1.0'\nmail.mime_version ...</pre>\n"],["minor","Mail::MimeVersionElement","Mail/MimeVersionElement.html#method-i-minor","()",""],["minor","Mail::MimeVersionField","Mail/MimeVersionField.html#method-i-minor","()",""],["multipart?","Mail::Body","Mail/Body.html#method-i-multipart-3F","()","<p>Returns true if there are parts defined in the body\n"],["multipart?","Mail::Message","Mail/Message.html#method-i-multipart-3F","()","<p>Returns true if the message is multipart\n"],["multipart_report?","Mail::Message","Mail/Message.html#method-i-multipart_report-3F","()","<p>Returns true if the message is a multipart/report\n"],["name","Mail::Address","Mail/Address.html#method-i-name","()","<p>Sometimes an address will not have a display name, but might have the name\nas a comment field after the …\n"],["name","Mail::ContentIdField","Mail/ContentIdField.html#method-i-name","()",""],["name","Mail::Field","Mail/Field.html#method-i-name","()",""],["name","Mail::MessageIdField","Mail/MessageIdField.html#method-i-name","()",""],["name","Mail::ResentMessageIdField","Mail/ResentMessageIdField.html#method-i-name","()",""],["negative_failure_message","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-negative_failure_message","()",""],["new","Mail","Mail.html#method-c-new","(*args, &block)","<p>Allows you to create a new Mail::Message object.\n<p>You can make an email via passing a string or passing …\n"],["new","Mail::Address","Mail/Address.html#method-c-new","(value = nil)","<p>Mail::Address handles all email addresses in Mail.  It takes an email\naddress string and parses it, breaking …\n"],["new","Mail::AddressContainer","Mail/AddressContainer.html#method-c-new","(field, list = [])",""],["new","Mail::AttachmentsList","Mail/AttachmentsList.html#method-c-new","(parts_list)",""],["new","Mail::BccField","Mail/BccField.html#method-c-new","(value = '', charset = 'utf-8')",""],["new","Mail::Body","Mail/Body.html#method-c-new","(string = '')",""],["new","Mail::CcField","Mail/CcField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::CommentsField","Mail/CommentsField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::Configuration","Mail/Configuration.html#method-c-new","()",""],["new","Mail::ContentDescriptionField","Mail/ContentDescriptionField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::ContentDispositionField","Mail/ContentDispositionField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::ContentIdField","Mail/ContentIdField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::ContentLocationField","Mail/ContentLocationField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::ContentTransferEncodingElement","Mail/ContentTransferEncodingElement.html#method-c-new","(string)",""],["new","Mail::ContentTransferEncodingField","Mail/ContentTransferEncodingField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::ContentTypeField","Mail/ContentTypeField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::DateField","Mail/DateField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::Envelope","Mail/Envelope.html#method-c-new","(*args)",""],["new","Mail::EnvelopeFromElement","Mail/EnvelopeFromElement.html#method-c-new","( string )",""],["new","Mail::Exim","Mail/Exim.html#method-c-new","(values)",""],["new","Mail::Field","Mail/Field.html#method-c-new","(name, value = nil, charset = 'utf-8')","<p>Accepts a string:\n\n<pre>Field.new(&quot;field-name: field data&quot;)</pre>\n<p>Or name, value pair:\n"],["new","Mail::FileDelivery","Mail/FileDelivery.html#method-c-new","(values)",""],["new","Mail::FromField","Mail/FromField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::Header","Mail/Header.html#method-c-new","(header_text = nil, charset = nil)","<p>Creates a new header object.\n<p>Accepts raw text or nothing.  If given raw text will attempt to parse it …\n"],["new","Mail::IMAP","Mail/IMAP.html#method-c-new","(values)",""],["new","Mail::InReplyToField","Mail/InReplyToField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::IndifferentHash","Mail/IndifferentHash.html#method-c-new","(constructor = {})",""],["new","Mail::KeywordsField","Mail/KeywordsField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-c-new","(_context)",""],["new","Mail::Message","Mail/Message.html#method-c-new","(*args, &block)","<p>Making an email\n<p>You can make an new mail object via a block, passing a string, file or\ndirect assignment. …\n"],["new","Mail::MessageIdField","Mail/MessageIdField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::MessageIdsElement","Mail/MessageIdsElement.html#method-c-new","(string)",""],["new","Mail::MimeVersionElement","Mail/MimeVersionElement.html#method-c-new","( string )",""],["new","Mail::MimeVersionField","Mail/MimeVersionField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-c-new","(string)","<p>Creates a new Chars instance by wrapping <em>string</em>.\n"],["new","Mail::Multibyte::Unicode::UnicodeDatabase","Mail/Multibyte/Unicode/UnicodeDatabase.html#method-c-new","()",""],["new","Mail::POP3","Mail/POP3.html#method-c-new","(values)",""],["new","Mail::PhraseList","Mail/PhraseList.html#method-c-new","(string)",""],["new","Mail::ReceivedElement","Mail/ReceivedElement.html#method-c-new","( string )",""],["new","Mail::ReceivedField","Mail/ReceivedField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::ReferencesField","Mail/ReferencesField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::ReplyToField","Mail/ReplyToField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::ResentBccField","Mail/ResentBccField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::ResentCcField","Mail/ResentCcField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::ResentDateField","Mail/ResentDateField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::ResentFromField","Mail/ResentFromField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::ResentMessageIdField","Mail/ResentMessageIdField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::ResentSenderField","Mail/ResentSenderField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::ResentToField","Mail/ResentToField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::ReturnPathField","Mail/ReturnPathField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::SMTP","Mail/SMTP.html#method-c-new","(values)",""],["new","Mail::SMTPConnection","Mail/SMTPConnection.html#method-c-new","(values)",""],["new","Mail::SenderField","Mail/SenderField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::Sendmail","Mail/Sendmail.html#method-c-new","(values)",""],["new","Mail::StructuredField","Mail/StructuredField.html#method-c-new","(name = nil, value = nil, charset = nil)",""],["new","Mail::SubjectField","Mail/SubjectField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::TestMailer","Mail/TestMailer.html#method-c-new","(values)",""],["new","Mail::TestRetriever","Mail/TestRetriever.html#method-c-new","(values)",""],["new","Mail::ToField","Mail/ToField.html#method-c-new","(value = nil, charset = 'utf-8')",""],["new","Mail::UnstructuredField","Mail/UnstructuredField.html#method-c-new","(name, value, charset = nil)",""],["new_field","Mail::Field","Mail/Field.html#method-i-new_field","(name, value, charset)",""],["new_from_hash_copying_default","Mail::IndifferentHash","Mail/IndifferentHash.html#method-c-new_from_hash_copying_default","(hash)",""],["normalize","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-normalize","(form = nil)","<p>Returns the KC normalization of the string by default. NFKC is considered\nthe best normalization form …\n"],["normalize","Mail::Multibyte::Unicode","Mail/Multibyte/Unicode.html#method-i-normalize","(string, form=nil)","<p>Returns the KC normalization of the string by default. NFKC is considered\nthe best normalization form …\n"],["normalized_encoding","Mail::UnstructuredField","Mail/UnstructuredField.html#method-i-normalized_encoding","()",""],["only_us_ascii?","Mail::Body","Mail/Body.html#method-i-only_us_ascii-3F","()",""],["ord","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-ord","()","<p>Returns the codepoint of the first character in the string.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'こんにちは'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">ord</span> <span class=\"ruby-comment\"># =&gt; 12371</span>\n</pre>\n"],["param_decode","Mail::Encodings","Mail/Encodings.html#method-c-param_decode","(str, encoding)","<p>Decodes a parameter value using URI Escaping.\n<p>Example:\n\n<pre>Mail::Encodings.param_decode(&quot;This%20is%20fun&quot;, ...</pre>\n"],["param_decode","Mail::Ruby18","Mail/Ruby18.html#method-c-param_decode","(str, encoding)",""],["param_decode","Mail::Ruby19","Mail/Ruby19.html#method-c-param_decode","(str, encoding)",""],["param_encode","Mail::Encodings","Mail/Encodings.html#method-c-param_encode","(str)","<p>Encodes a parameter value using URI Escaping, note the language field ‘en’\ncan be set using Mail::Configuration …\n"],["param_encode","Mail::Ruby18","Mail/Ruby18.html#method-c-param_encode","(str)",""],["param_encode","Mail::Ruby19","Mail/Ruby19.html#method-c-param_encode","(str)",""],["param_encode_language","Mail::Configuration","Mail/Configuration.html#method-i-param_encode_language","(value = nil)",""],["parameters","Mail::ContentDispositionField","Mail/ContentDispositionField.html#method-i-parameters","()",""],["parameters","Mail::ContentTypeField","Mail/ContentTypeField.html#method-i-parameters","()",""],["paren","Mail::Ruby18","Mail/Ruby18.html#method-c-paren","( str )",""],["paren","Mail::Ruby19","Mail/Ruby19.html#method-c-paren","( str )",""],["paren","Mail::Utilities","Mail/Utilities.html#method-i-paren","( str )","<p>Wraps a string in parenthesis and escapes any that are in the string\nitself.\n<p>Example:\n\n<pre>paren( 'This is a ...</pre>\n"],["parse","Mail::Address","Mail/Address.html#method-i-parse","(value = nil)",""],["parse","Mail::ContentDispositionField","Mail/ContentDispositionField.html#method-i-parse","(val = value)",""],["parse","Mail::ContentIdField","Mail/ContentIdField.html#method-i-parse","(val = value)",""],["parse","Mail::ContentLocationField","Mail/ContentLocationField.html#method-i-parse","(val = value)",""],["parse","Mail::ContentTransferEncodingField","Mail/ContentTransferEncodingField.html#method-i-parse","(val = value)",""],["parse","Mail::ContentTypeField","Mail/ContentTypeField.html#method-i-parse","(val = value)",""],["parse","Mail::KeywordsField","Mail/KeywordsField.html#method-i-parse","(val = value)",""],["parse","Mail::MimeVersionField","Mail/MimeVersionField.html#method-i-parse","(val = value)",""],["parse","Mail::Parsers::AddressListsParser","Mail/Parsers/AddressListsParser.html#method-i-parse","(s)",""],["parse","Mail::Parsers::ContentDispositionParser","Mail/Parsers/ContentDispositionParser.html#method-i-parse","(s)",""],["parse","Mail::Parsers::ContentLocationParser","Mail/Parsers/ContentLocationParser.html#method-i-parse","(s)",""],["parse","Mail::Parsers::ContentTransferEncodingParser","Mail/Parsers/ContentTransferEncodingParser.html#method-i-parse","(s)",""],["parse","Mail::Parsers::ContentTypeParser","Mail/Parsers/ContentTypeParser.html#method-i-parse","(s)",""],["parse","Mail::Parsers::DateTimeParser","Mail/Parsers/DateTimeParser.html#method-i-parse","(s)",""],["parse","Mail::Parsers::EnvelopeFromParser","Mail/Parsers/EnvelopeFromParser.html#method-i-parse","(s)",""],["parse","Mail::Parsers::MessageIdsParser","Mail/Parsers/MessageIdsParser.html#method-i-parse","(s)",""],["parse","Mail::Parsers::MimeVersionParser","Mail/Parsers/MimeVersionParser.html#method-i-parse","(s)",""],["parse","Mail::Parsers::PhraseListsParser","Mail/Parsers/PhraseListsParser.html#method-i-parse","(s)",""],["parse","Mail::Parsers::Ragel","Mail/Parsers/Ragel.html#method-c-parse","(machine, string)",""],["parse","Mail::Parsers::Ragel::AddressListsMachine","Mail/Parsers/Ragel/AddressListsMachine.html#method-c-parse","(data)","<p>line 17\n“/home/bpot/src/gh/bpot/mail/lib/mail/parsers/ragel/ruby/machines/address_lists_machine.rb.rl”\n…\n"],["parse","Mail::Parsers::Ragel::ContentDispositionMachine","Mail/Parsers/Ragel/ContentDispositionMachine.html#method-c-parse","(data)","<p>line 17\n“/home/bpot/src/gh/bpot/mail/lib/mail/parsers/ragel/ruby/machines/content_disposition_machine.rb.rl”\n…\n"],["parse","Mail::Parsers::Ragel::ContentLocationMachine","Mail/Parsers/Ragel/ContentLocationMachine.html#method-c-parse","(data)","<p>line 17\n“/home/bpot/src/gh/bpot/mail/lib/mail/parsers/ragel/ruby/machines/content_location_machine.rb.rl”\n…\n"],["parse","Mail::Parsers::Ragel::ContentTransferEncodingMachine","Mail/Parsers/Ragel/ContentTransferEncodingMachine.html#method-c-parse","(data)","<p>line 17\n“/home/bpot/src/gh/bpot/mail/lib/mail/parsers/ragel/ruby/machines/content_transfer_encoding_machine.rb.rl”\n…\n"],["parse","Mail::Parsers::Ragel::ContentTypeMachine","Mail/Parsers/Ragel/ContentTypeMachine.html#method-c-parse","(data)","<p>line 17\n“/home/bpot/src/gh/bpot/mail/lib/mail/parsers/ragel/ruby/machines/content_type_machine.rb.rl”\n…\n"],["parse","Mail::Parsers::Ragel::DateTimeMachine","Mail/Parsers/Ragel/DateTimeMachine.html#method-c-parse","(data)","<p>line 17\n“/home/bpot/src/gh/bpot/mail/lib/mail/parsers/ragel/ruby/machines/date_time_machine.rb.rl”\n…\n"],["parse","Mail::Parsers::Ragel::EnvelopeFromMachine","Mail/Parsers/Ragel/EnvelopeFromMachine.html#method-c-parse","(data)","<p>line 17\n“/home/bpot/src/gh/bpot/mail/lib/mail/parsers/ragel/ruby/machines/envelope_from_machine.rb.rl”\n…\n"],["parse","Mail::Parsers::Ragel::MessageIdsMachine","Mail/Parsers/Ragel/MessageIdsMachine.html#method-c-parse","(data)","<p>line 17\n“/home/bpot/src/gh/bpot/mail/lib/mail/parsers/ragel/ruby/machines/message_ids_machine.rb.rl”\n…\n"],["parse","Mail::Parsers::Ragel::MimeVersionMachine","Mail/Parsers/Ragel/MimeVersionMachine.html#method-c-parse","(data)","<p>line 17\n“/home/bpot/src/gh/bpot/mail/lib/mail/parsers/ragel/ruby/machines/mime_version_machine.rb.rl”\n…\n"],["parse","Mail::Parsers::Ragel::PhraseListsMachine","Mail/Parsers/Ragel/PhraseListsMachine.html#method-c-parse","(data)","<p>line 17\n“/home/bpot/src/gh/bpot/mail/lib/mail/parsers/ragel/ruby/machines/phrase_lists_machine.rb.rl”\n…\n"],["parse","Mail::Parsers::Ragel::ReceivedMachine","Mail/Parsers/Ragel/ReceivedMachine.html#method-c-parse","(data)","<p>line 17\n“/home/bpot/src/gh/bpot/mail/lib/mail/parsers/ragel/ruby/machines/received_machine.rb.rl”\n…\n"],["parse","Mail::Parsers::Ragel::Ruby","Mail/Parsers/Ragel/Ruby.html#method-c-parse","(machine, string)",""],["parse","Mail::Parsers::ReceivedParser","Mail/Parsers/ReceivedParser.html#method-i-parse","(s)",""],["parse","Mail::ReceivedField","Mail/ReceivedField.html#method-i-parse","(val = value)",""],["parse","Mail::UnstructuredField","Mail/UnstructuredField.html#method-i-parse","()",""],["parse_delivery_status_report","Mail::Part","Mail/Part.html#method-i-parse_delivery_status_report","()",""],["parse_message","Mail::Message","Mail/Message.html#method-i-parse_message","()","\n<pre>2.1. General Description\n A message consists of header fields (collectively called &quot;the header\n of the ...</pre>\n"],["parse_message","Mail::Part","Mail/Part.html#method-i-parse_message","()","<p>A part may not have a header.… so, just init a body if no header\n"],["part","Mail::Message","Mail/Message.html#method-i-part","(params = {})","<p>Allows you to add a part in block form to an existing mail message object\n<p>Example:\n\n<pre>mail = Mail.new do\n ...</pre>\n"],["parts","Mail::Body","Mail/Body.html#method-i-parts","()",""],["parts","Mail::Message","Mail/Message.html#method-i-parts","()","<p>Returns a parts list object of all the parts in the message\n"],["phrase_list","Mail::KeywordsField","Mail/KeywordsField.html#method-i-phrase_list","()",""],["phrases","Mail::PhraseList","Mail/PhraseList.html#method-i-phrases","()",""],["pick_encoding","Mail::Ruby19","Mail/Ruby19.html#method-c-pick_encoding","(charset)","<p>Pick a Ruby encoding corresponding to the message charset. Most charsets\nhave a Ruby encoding, but some …\n"],["popen","Mail::Sendmail","Mail/Sendmail.html#method-c-popen","(command, &block)",""],["preamble","Mail::Body","Mail/Body.html#method-i-preamble","()","<p>Returns the preamble (any text that is before the first MIME boundary)\n"],["preamble=","Mail::Body","Mail/Body.html#method-i-preamble-3D","( val )","<p>Sets the preamble to a string (adds text before the first MIME boundary)\n"],["process_body_raw","Mail::Message","Mail/Message.html#method-i-process_body_raw","()",""],["proxy_class","Mail::Multibyte","Mail/Multibyte.html#method-c-proxy_class","()","<p>Returns the current proxy class\n"],["proxy_class","Mail::Multibyte","Mail/Multibyte.html#method-c-proxy_class","()","<p>Returns the current proxy class\n"],["proxy_class=","Mail::Multibyte","Mail/Multibyte.html#method-c-proxy_class-3D","(klass)","<p>The proxy class returned when calling mb_chars. You can use this accessor\nto configure your own proxy …\n"],["proxy_class=","Mail::Multibyte","Mail/Multibyte.html#method-c-proxy_class-3D","(klass)","<p>The proxy class returned when calling mb_chars. You can use this accessor\nto configure your own proxy …\n"],["q_value_decode","Mail::Encodings","Mail/Encodings.html#method-c-q_value_decode","(str)","<p>Decodes a Quoted-Printable string from the\n“=?UTF-8?Q?This_is_=E3=81=82_string?=” format\n<p>Example: …\n"],["q_value_decode","Mail::Ruby18","Mail/Ruby18.html#method-c-q_value_decode","(str)",""],["q_value_decode","Mail::Ruby19","Mail/Ruby19.html#method-c-q_value_decode","(str)",""],["q_value_encode","Mail::Encodings","Mail/Encodings.html#method-c-q_value_encode","(encoded_str, encoding = nil)","<p>Encode a string with Quoted-Printable Encoding and returns it ready to be\ninserted as a value for a field, …\n"],["q_value_encode","Mail::Ruby18","Mail/Ruby18.html#method-c-q_value_encode","(str, encoding)",""],["q_value_encode","Mail::Ruby19","Mail/Ruby19.html#method-c-q_value_encode","(str, encoding = nil)",""],["quote_atom","Mail::Utilities","Mail/Utilities.html#method-i-quote_atom","( str )","<p>If the string supplied has ATOM unsafe characters in it, will return the\nstring quoted in double quotes, …\n"],["quote_phrase","Mail::Utilities","Mail/Utilities.html#method-i-quote_phrase","( str )","<p>If the string supplied has PHRASE unsafe characters in it, will return the\nstring quoted in double quotes, …\n"],["quote_token","Mail::Utilities","Mail/Utilities.html#method-i-quote_token","( str )","<p>If the string supplied has TOKEN unsafe characters in it, will return the\nstring quoted in double quotes, …\n"],["random_tag","Mail","Mail.html#method-c-random_tag","()",""],["raw","Mail::Address","Mail/Address.html#method-i-raw","()","<p>Returns the raw input of the passed in string, this is before it is passed\nby the parser.\n"],["raw_envelope","Mail::Message","Mail/Message.html#method-i-raw_envelope","()","<p>The raw_envelope is the From mikel@test.lindsaar.net Mon May  2 16:07:05\n2009 type field that you can …\n"],["raw_source","Mail::Body","Mail/Body.html#method-i-raw_source","()","<p>Returns the raw source that the body was initialized with, without any\ntampering\n"],["raw_source","Mail::Header","Mail/Header.html#method-i-raw_source","()","<p>The preserved raw source of the header as you passed it in, untouched for\nyour Regexing glory.\n"],["raw_source","Mail::Message","Mail/Message.html#method-i-raw_source","()","<p>Provides access to the raw source of the message as it was when it was\ninstantiated. This is set at initialization …\n"],["raw_source=","Mail::Header","Mail/Header.html#method-i-raw_source-3D","(val)",""],["raw_source=","Mail::Message","Mail/Message.html#method-i-raw_source-3D","(value)",""],["read","Mail","Mail.html#method-c-read","(filename)","<p>Reads in an email message from a path and instantiates it as a new\nMail::Message\n"],["read","Mail::Message","Mail/Message.html#method-i-read","()",""],["read_from_string","Mail","Mail.html#method-c-read_from_string","(mail_as_string)","<p>Instantiates a new Mail::Message using a string\n"],["ready_to_send!","Mail::Message","Mail/Message.html#method-i-ready_to_send-21","()","<p>Encodes the message, calls encode on all its parts, gets an email message\nready to send\n"],["received","Mail::Message","Mail/Message.html#method-i-received","( val = nil )",""],["received=","Mail::Message","Mail/Message.html#method-i-received-3D","( val )",""],["references","Mail::Message","Mail/Message.html#method-i-references","( val = nil )",""],["references=","Mail::Message","Mail/Message.html#method-i-references-3D","( val )",""],["register","Mail::Encodings","Mail/Encodings.html#method-c-register","(name, cls)","<p>Register transfer encoding\n<p>Example\n<p>Encodings.register “base64”, Mail::Encodings::Base64\n"],["register_autoload","Mail","Mail.html#method-c-register_autoload","(name, path)",""],["register_for_delivery_notification","Mail::Message","Mail/Message.html#method-i-register_for_delivery_notification","(observer)",""],["register_interceptor","Mail","Mail.html#method-c-register_interceptor","(interceptor)","<p>You can register an object to be given every mail object that will be sent,\nbefore it is sent.  So if …\n"],["register_observer","Mail","Mail.html#method-c-register_observer","(observer)","<p>You can register an object to be informed of every email that is sent\nthrough this method.\n<p>Your object …\n"],["regular_update","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-regular_update","(other_hash)",""],["regular_writer","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-regular_writer","(key, value)",""],["remote_mta","Mail::Message","Mail/Message.html#method-i-remote_mta","()",""],["remote_mta","Mail::Part","Mail/Part.html#method-i-remote_mta","()",""],["reorder_characters","Mail::Multibyte::Unicode","Mail/Multibyte/Unicode.html#method-i-reorder_characters","(codepoints)","<p>Re-order codepoints so the string becomes canonical.\n"],["reply","Mail::Message","Mail/Message.html#method-i-reply","(*args, &block)",""],["reply_to","Mail::Message","Mail/Message.html#method-i-reply_to","( val = nil )","<p>Returns the Reply-To value of the mail object as an array of strings of\naddress specs.\n<p>Example:\n\n<pre>mail.reply_to ...</pre>\n"],["reply_to=","Mail::Message","Mail/Message.html#method-i-reply_to-3D","( val )","<p>Sets the Reply-To value of the mail object, pass in a string of the field\n<p>Example:\n\n<pre>mail.reply_to = 'Mikel ...</pre>\n"],["resent_bcc","Mail::Message","Mail/Message.html#method-i-resent_bcc","( val = nil )","<p>Returns the Resent-Bcc value of the mail object as an array of strings of\naddress specs.\n<p>Example:\n\n<pre>mail.resent_bcc ...</pre>\n"],["resent_bcc=","Mail::Message","Mail/Message.html#method-i-resent_bcc-3D","( val )","<p>Sets the Resent-Bcc value of the mail object, pass in a string of the field\n<p>Example:\n\n<pre>mail.resent_bcc = ...</pre>\n"],["resent_cc","Mail::Message","Mail/Message.html#method-i-resent_cc","( val = nil )","<p>Returns the Resent-Cc value of the mail object as an array of strings of\naddress specs.\n<p>Example:\n\n<pre>mail.resent_cc ...</pre>\n"],["resent_cc=","Mail::Message","Mail/Message.html#method-i-resent_cc-3D","( val )","<p>Sets the Resent-Cc value of the mail object, pass in a string of the field\n<p>Example:\n\n<pre>mail.resent_cc = 'Mikel ...</pre>\n"],["resent_date","Mail::Message","Mail/Message.html#method-i-resent_date","( val = nil )",""],["resent_date=","Mail::Message","Mail/Message.html#method-i-resent_date-3D","( val )",""],["resent_from","Mail::Message","Mail/Message.html#method-i-resent_from","( val = nil )","<p>Returns the Resent-From value of the mail object as an array of strings of\naddress specs.\n<p>Example:\n\n<pre>mail.resent_from ...</pre>\n"],["resent_from=","Mail::Message","Mail/Message.html#method-i-resent_from-3D","( val )","<p>Sets the Resent-From value of the mail object, pass in a string of the\nfield\n<p>Example:\n\n<pre>mail.resent_from ...</pre>\n"],["resent_message_id","Mail::Message","Mail/Message.html#method-i-resent_message_id","( val = nil )",""],["resent_message_id=","Mail::Message","Mail/Message.html#method-i-resent_message_id-3D","( val )",""],["resent_sender","Mail::Message","Mail/Message.html#method-i-resent_sender","( val = nil )","<p>Returns the Resent-Sender value of the mail object, as a single string of\nan address spec.  A sender …\n"],["resent_sender=","Mail::Message","Mail/Message.html#method-i-resent_sender-3D","( val )","<p>Sets the Resent-Sender value of the mail object, pass in a string of the\nfield\n<p>Example:\n\n<pre>mail.resent_sender ...</pre>\n"],["resent_to","Mail::Message","Mail/Message.html#method-i-resent_to","( val = nil )","<p>Returns the Resent-To value of the mail object as an array of strings of\naddress specs.\n<p>Example:\n\n<pre>mail.resent_to ...</pre>\n"],["resent_to=","Mail::Message","Mail/Message.html#method-i-resent_to-3D","( val )","<p>Sets the Resent-To value of the mail object, pass in a string of the field\n<p>Example:\n\n<pre>mail.resent_to = 'Mikel ...</pre>\n"],["respond_to?","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-respond_to-3F","(method, include_private=false)","<p>Returns <code>true</code> if <em>obj</em> responds to the given method.\nPrivate methods are included in the search only if …\n"],["responsible_for?","Mail::Field","Mail/Field.html#method-i-responsible_for-3F","( val )",""],["retriever_method","Mail","Mail.html#method-c-retriever_method","()","<p>Returns the retriever method selected, defaults to an instance of\nMail::POP3\n"],["retriever_method","Mail::Configuration","Mail/Configuration.html#method-i-retriever_method","(method = nil, settings = {})",""],["retryable?","Mail::Message","Mail/Message.html#method-i-retryable-3F","()",""],["retryable?","Mail::Part","Mail/Part.html#method-i-retryable-3F","()",""],["return_path","Mail::Message","Mail/Message.html#method-i-return_path","( val = nil )","<p>Returns the return path of the mail object, or sets it if you pass a string\n"],["return_path=","Mail::Message","Mail/Message.html#method-i-return_path-3D","( val )","<p>Sets the return path of the object\n"],["reverse","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-reverse","()","<p>Reverses all characters in the string.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">'Café'</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">reverse</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; 'éfaC'</span>\n</pre>\n"],["reverse_merge","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-reverse_merge","(other_hash)","<p>Performs the opposite of merge, with the keys and values from the first\nhash taking precedence over the …\n"],["reverse_merge!","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-reverse_merge-21","(other_hash)",""],["rindex","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-rindex","(needle, offset=nil)","<p>Returns the position <em>needle</em> in the string, counting in codepoints,\nsearching backward from <em>offset</em> or …\n"],["rjust","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-rjust","(integer, padstr=' ')","<p>Works just like <code>String#rjust</code>, only integer specifies\ncharacters instead of bytes.\n<p>Example:\n\n<pre>&quot;¾ cup&quot;.mb_chars.rjust(8).to_s ...</pre>\n"],["rstrip","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-rstrip","()","<p>Strips entire range of Unicode whitespace from the right of the string.\n"],["same","Mail::Field","Mail/Field.html#method-i-same","( other )",""],["sanatize","Mail::ContentTypeField","Mail/ContentTypeField.html#method-i-sanatize","( val )","<p>Various special cases from random emails found that I am not going to\nchange the parser for\n"],["select_field_for","Mail::Header","Mail/Header.html#method-i-select_field_for","(name)",""],["sender","Mail::Message","Mail/Message.html#method-i-sender","( val = nil )","<p>Returns the Sender value of the mail object, as a single string of an\naddress spec.  A sender per RFC …\n"],["sender=","Mail::Message","Mail/Message.html#method-i-sender-3D","( val )","<p>Sets the Sender value of the mail object, pass in a string of the field\n<p>Example:\n\n<pre>mail.sender = 'Mikel &lt;mikel@test.lindsaar.net&gt;' ...</pre>\n"],["separate_parts","Mail::Message","Mail/Message.html#method-i-separate_parts","()",""],["set_charset","Mail::Body","Mail/Body.html#method-i-set_charset","()",""],["set_envelope","Mail::Message","Mail/Message.html#method-i-set_envelope","( val )","<p>Sets the envelope from for the email\n"],["set_envelope_header","Mail::Message","Mail/Message.html#method-i-set_envelope_header","()",""],["set_mime_type","Mail::AttachmentsList","Mail/AttachmentsList.html#method-i-set_mime_type","(filename)",""],["set_sort_order","Mail::Body","Mail/Body.html#method-i-set_sort_order","(order)","<p>Allows you to set the sort order of the parts, overriding the default sort\norder. Defaults to ‘text/plain’, …\n"],["shellquote","Mail::Sendmail","Mail/Sendmail.html#method-c-shellquote","(address)","<p>The following is an adaptation of ruby 1.9.2’s shellwords.rb file, it is\nmodified to include ‘+’ in the …\n"],["silence_warnings","Mail::Parsers::Ragel::Ruby","Mail/Parsers/Ragel/Ruby.html#method-c-silence_warnings","()",""],["size","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-size","()","<p>Returns the number of codepoints in the string\n"],["skip_deletion","Mail::Message","Mail/Message.html#method-i-skip_deletion","()","<p>Skips the deletion of this message. All other messages flagged for delete\nstill will be deleted at session …\n"],["slice","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-slice","(*args)","<p>Implements Unicode-aware slice with codepoints. Slicing on one point\nreturns the codepoints for that …\n"],["smtp_envelope_from","Mail::Message","Mail/Message.html#method-i-smtp_envelope_from","( val = nil )","<p>Returns the SMTP Envelope From value of the mail object, as a single string\nof an address spec.\n<p>Defaults …\n"],["smtp_envelope_from=","Mail::Message","Mail/Message.html#method-i-smtp_envelope_from-3D","( val )","<p>Sets the From address on the SMTP Envelope.\n<p>Example:\n\n<pre>mail.smtp_envelope_from = 'Mikel &lt;mikel@test.lindsaar.net&gt;' ...</pre>\n"],["smtp_envelope_to","Mail::Message","Mail/Message.html#method-i-smtp_envelope_to","( val = nil )","<p>Returns the SMTP Envelope To value of the mail object.\n<p>Defaults to #destinations: To, Cc, and Bcc addresses. …\n"],["smtp_envelope_to=","Mail::Message","Mail/Message.html#method-i-smtp_envelope_to-3D","( val )","<p>Sets the To addresses on the SMTP Envelope.\n<p>Example:\n\n<pre>mail.smtp_envelope_to = 'Mikel &lt;mikel@test.lindsaar.net&gt;' ...</pre>\n"],["something_random","Mail","Mail.html#method-c-something_random","()",""],["sort","Mail::PartsList","Mail/PartsList.html#method-i-sort","()",""],["sort!","Mail::PartsList","Mail/PartsList.html#method-i-sort-21","(order)",""],["sort_parts!","Mail::Body","Mail/Body.html#method-i-sort_parts-21","()","<p>Allows you to sort the parts according to the default sort order, or the\nsort order you set with :set_sort_order. …\n"],["split","Mail::Field","Mail/Field.html#method-i-split","(raw_field)",""],["split","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-split","(*args)","<p>Works just like <code>String#split</code>, with the exception that the\nitems in the resulting list are Chars instances …\n"],["split!","Mail::Body","Mail/Body.html#method-i-split-21","(boundary)",""],["split_encoding_from_string","Mail::Encodings","Mail/Encodings.html#method-c-split_encoding_from_string","( str )",""],["split_header","Mail::Header","Mail/Header.html#method-i-split_header","()","<p>Splits an unfolded and line break cleaned header into individual field\nstrings.\n"],["split_value_encoding_from_string","Mail::Encodings","Mail/Encodings.html#method-c-split_value_encoding_from_string","(str)","<p>Gets the encoding type (Q or B) from the string.\n"],["ssl_context","Mail::SMTP","Mail/SMTP.html#method-i-ssl_context","()","<p>Allow SSL context to be configured via settings, for Ruby &gt;= 1.9 Just\nreturns openssl verify mode …\n"],["start","Mail::IMAP","Mail/IMAP.html#method-i-start","(config=Mail::Configuration.instance, &block)","<p>Start an IMAP session and ensures that it will be closed in any case.\n"],["start","Mail::POP3","Mail/POP3.html#method-i-start","(config = Configuration.instance, &block)","<p>Start a POP3 session and ensure that it will be closed in any case. Any\nmessages marked for deletion …\n"],["store","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-store","(key, value)",""],["string","Mail::ContentTypeField","Mail/ContentTypeField.html#method-i-string","()",""],["stringify","Mail::ContentTypeField","Mail/ContentTypeField.html#method-i-stringify","(params)",""],["stringify_keys","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-stringify_keys","()",""],["stringify_keys!","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-stringify_keys-21","()",""],["strip","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-strip","()","<p>Strips entire range of Unicode whitespace from the right and left of the\nstring.\n"],["strip_all_comments","Mail::Address","Mail/Address.html#method-i-strip_all_comments","(string)",""],["strip_domain_comments","Mail::Address","Mail/Address.html#method-i-strip_domain_comments","(value)",""],["sub_type","Mail::ContentTypeField","Mail/ContentTypeField.html#method-i-sub_type","()",""],["sub_type","Mail::Message","Mail/Message.html#method-i-sub_type","()","<p>Returns the sub content type\n"],["subject","Mail::Message","Mail/Message.html#method-i-subject","( val = nil )","<p>Returns the decoded value of the subject field, as a single string.\n<p>Example:\n\n<pre>mail.subject = &quot;G'Day mate&quot; ...</pre>\n"],["subject=","Mail::Message","Mail/Message.html#method-i-subject-3D","( val )","<p>Sets the Subject value of the mail object, pass in a string of the field\n<p>Example:\n\n<pre>mail.subject = '=?UTF-8?Q?This_is_=E3=81=82_string?=' ...</pre>\n"],["symbolize_keys","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-symbolize_keys","()",""],["text?","Mail::Message","Mail/Message.html#method-i-text-3F","()",""],["text_part","Mail::Message","Mail/Message.html#method-i-text_part","(&block)","<p>Accessor for text_part\n"],["text_part=","Mail::Message","Mail/Message.html#method-i-text_part-3D","(msg)","<p>Helper to add a text part to a multipart/alternative email.  If this and\nhtml_part are both defined in …\n"],["tidy_byte","Mail::Multibyte::Unicode","Mail/Multibyte/Unicode.html#method-i-tidy_byte","(byte)",""],["tidy_bytes","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-tidy_bytes","(force = false)","<p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent\nresulting in a valid UTF-8 string. …\n"],["tidy_bytes","Mail::Multibyte::Unicode","Mail/Multibyte/Unicode.html#method-i-tidy_bytes","(string, force = false)","<p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent\nresulting in a valid UTF-8 string. …\n"],["titlecase","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-titlecase","()",""],["titleize","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-titleize","()","<p>Capitalizes the first letter of every word, when possible.\n<p>Example:\n\n<pre>&quot;ÉL QUE SE ENTERÓ&quot;.mb_chars.titleize ...</pre>\n"],["tlsconnect","Net::SMTP","Net/SMTP.html#method-i-tlsconnect","(s)",""],["to","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-to","(recipient_or_list)",""],["to","Mail::Message","Mail/Message.html#method-i-to","( val = nil )","<p>Returns the To value of the mail object as an array of strings of address\nspecs.\n<p>Example:\n\n<pre>mail.to = 'Mikel ...</pre>\n"],["to","String","String.html#method-i-to","(position)","<p>Returns the beginning of the string up to the <code>position</code>\ntreating the string as an array (where 0 is the …\n"],["to=","Mail::Message","Mail/Message.html#method-i-to-3D","( val )","<p>Sets the To value of the mail object, pass in a string of the field\n<p>Example:\n\n<pre>mail.to = 'Mikel &lt;mikel@test.lindsaar.net&gt;' ...</pre>\n"],["to_addrs","Mail::Message","Mail/Message.html#method-i-to_addrs","()","<p>Returns an array of addresses (the encoded value) in the To field, if no To\nfield, returns an empty array …\n"],["to_hash","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-to_hash","()",""],["to_options!","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-to_options-21","()",""],["to_s","Mail::Address","Mail/Address.html#method-i-to_s","()","<p>Returns the format of the address, or returns nothing\n\n<pre>a = Address.new('Mikel Lindsaar (My email address) ...</pre>\n"],["to_s","Mail::Body","Mail/Body.html#method-i-to_s","()",""],["to_s","Mail::ContentIdField","Mail/ContentIdField.html#method-i-to_s","()",""],["to_s","Mail::Encodings::TransferEncoding","Mail/Encodings/TransferEncoding.html#method-i-to_s","()",""],["to_s","Mail::Encodings::TransferEncoding","Mail/Encodings/TransferEncoding.html#method-c-to_s","()",""],["to_s","Mail::EnvelopeFromElement","Mail/EnvelopeFromElement.html#method-i-to_s","()",""],["to_s","Mail::Field","Mail/Field.html#method-i-to_s","()",""],["to_s","Mail::Header","Mail/Header.html#method-i-to_s","()",""],["to_s","Mail::Message","Mail/Message.html#method-i-to_s","()",""],["to_s","Mail::MessageIdField","Mail/MessageIdField.html#method-i-to_s","()",""],["to_s","Mail::ReceivedElement","Mail/ReceivedElement.html#method-i-to_s","(*args)",""],["to_yaml","Mail::Message","Mail/Message.html#method-i-to_yaml","(opts = {})",""],["token_safe?","Mail::Utilities","Mail/Utilities.html#method-i-token_safe-3F","( str )","<p>Returns true if the string supplied is free from characters not allowed as\na TOKEN\n"],["transport_encoding","Mail::Message","Mail/Message.html#method-i-transport_encoding","( val = nil)",""],["transport_encoding=","Mail::Message","Mail/Message.html#method-i-transport_encoding-3D","( val )",""],["u_unpack","Mail::Multibyte::Unicode","Mail/Multibyte/Unicode.html#method-i-u_unpack","(string)","<p>Unpack the string at codepoints boundaries. Raises an EncodingError when\nthe encoding of the string isn’t …\n"],["unbracket","Mail::Utilities","Mail/Utilities.html#method-i-unbracket","( str )","<p>Unwraps a string from being wrapped in parenthesis\n<p>Example:\n\n<pre>str = '&lt;This is a string&gt;'\nunbracket( str ) ...</pre>\n"],["underscoreize","Mail::Utilities","Mail/Utilities.html#method-i-underscoreize","( str )","<p>Swaps out all hyphens (-) for underscores (_) good for stringing to symbols\na field name.\n<p>Example:\n\n<pre>string ...</pre>\n"],["unfold","Mail::Field","Mail/Field.html#method-i-unfold","(string)","<p>2.2.3. Long Header Fields\n\n<pre>The process of moving from this folded multiple-line representation\nof a header ...</pre>\n"],["uniq","Mail","Mail.html#method-c-uniq","()",""],["unparen","Mail::Utilities","Mail/Utilities.html#method-i-unparen","( str )","<p>Unwraps a string from being wrapped in parenthesis\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">str</span> = <span class=\"ruby-string\">'(This is a string)'</span>\n<span class=\"ruby-identifier\">unparen</span>( <span class=\"ruby-identifier\">str</span> ) <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["unquote","Mail::Utilities","Mail/Utilities.html#method-i-unquote","( str )","<p>Unwraps supplied string from inside double quotes and removes any\n-escaping.\n<p>Example:\n\n<pre>string = '&quot;This is ...</pre>\n"],["unquote_and_convert_to","Mail::Encodings","Mail/Encodings.html#method-c-unquote_and_convert_to","(str, to_encoding)","<p>Takes an encoded string of the format =?&lt;encoding>??&lt;string&gt;?=\n"],["unregister_interceptor","Mail","Mail.html#method-c-unregister_interceptor","(interceptor)","<p>Unregister the given interceptor, allowing mail to resume operations\nwithout it.\n"],["unregister_observer","Mail","Mail.html#method-c-unregister_observer","(observer)","<p>Unregister the given observer, allowing mail to resume operations without\nit.\n"],["upcase","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-i-upcase","()","<p>Convert characters in the string to uppercase.\n<p>Example:\n\n<pre>'Laurent, où sont les tests ?'.mb_chars.upcase.to_s ...</pre>\n"],["update","Mail::Field","Mail/Field.html#method-i-update","(name, value)",""],["update","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-update","(other_hash)","<p>Updates the instantized hash with values from the second:\n\n<pre>hash_1 = HashWithIndifferentAccess.new\nhash_1[:key] ...</pre>\n"],["uri_escape","Mail::Utilities","Mail/Utilities.html#method-i-uri_escape","( str )",""],["uri_parser","Mail::Ruby19","Mail/Ruby19.html#method-c-uri_parser","()",""],["uri_parser","Mail::Utilities","Mail/Utilities.html#method-i-uri_parser","()",""],["uri_unescape","Mail::Utilities","Mail/Utilities.html#method-i-uri_unescape","( str )",""],["url","Mail::Part","Mail/Part.html#method-i-url","()",""],["validate_options","Mail::IMAP","Mail/IMAP.html#method-i-validate_options","(options)","<p>Set default options\n"],["validate_options","Mail::POP3","Mail/POP3.html#method-i-validate_options","(options)","<p>Set default options\n"],["value","Mail::ContentTypeField","Mail/ContentTypeField.html#method-i-value","()",""],["value","Mail::Field","Mail/Field.html#method-i-value","()",""],["value=","Mail::Field","Mail/Field.html#method-i-value-3D","(val)",""],["value_decode","Mail::Encodings","Mail/Encodings.html#method-c-value_decode","(str)","<p>Decodes a given string as Base64 or Quoted Printable, depending on what\ntype it is.\n<p>String has to be of …\n"],["values_at","Mail::IndifferentHash","Mail/IndifferentHash.html#method-i-values_at","(*indices)","<p>Returns an array of the values at the specified indices:\n\n<pre>hash = HashWithIndifferentAccess.new\nhash[:a] ...</pre>\n"],["version","Mail::MimeVersionField","Mail/MimeVersionField.html#method-i-version","()",""],["version","Mail::VERSION","Mail/VERSION.html#method-c-version","()",""],["wants?","Mail::Multibyte::Chars","Mail/Multibyte/Chars.html#method-c-wants-3F","(string)","<p>Returns <code>true</code> if the Chars class can and should act as a proxy\nfor the string <em>string</em>. Returns <code>false</code> otherwise. …\n"],["with_body","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-with_body","(body)",""],["with_boundary","Mail::ContentTypeField","Mail/ContentTypeField.html#method-c-with_boundary","(type)",""],["with_subject","Mail::Matchers::HasSentEmailMatcher","Mail/Matchers/HasSentEmailMatcher.html#method-i-with_subject","(subject)",""],["without_attachments!","Mail::Message","Mail/Message.html#method-i-without_attachments-21","()",""],["wrap_lines","Mail::UnstructuredField","Mail/UnstructuredField.html#method-i-wrap_lines","(name, folded_lines)","<p>6.2. Display of ‘encoded-word’s\n\n<pre>When displaying a particular header field that contains multiple\n'encoded-word's, ...</pre>\n"],["CHANGELOG","","CHANGELOG_rdoc.html","","<p>HEAD\n<p>Features:\n<p>Performance:\n"],["CONTRIBUTING","","CONTRIBUTING_md.html","","<p>Contributing to Mail\n<p>Hi there, I welcome pull requests! Here are some thoughts on how to get\nyour\npull ...\n"],["README","","README_md.html","","<p>Mail <img src=\"https://travis-ci.org/mikel/mail.png?branch=master\">\n<p>Introduction\n<p>Mail is an internet library …\n"],["TODO","","TODO_rdoc.html","","<p>Not really in any order:\n<p>Add multibyte handling to fields, if they get a multibyte string, try\nencoding …\n"],["common.rl","","lib/mail/parsers/ragel/common_rl.html","","<p>%%{\n\n<pre>machine common;\n\naction comment_begin { fcall comment_tail; }\naction comment_exit { fret; }\n\n# RFC5322: ...</pre>\n"],["date_time.rl","","lib/mail/parsers/ragel/date_time_rl.html","","<p>%%{\n\n<pre>machine date_time;\n\n# day_of_week\nday_name = &quot;Mon&quot; | &quot;Tue&quot; | &quot;Wed&quot; | &quot;Thu&quot; | &quot;Fri&quot; | &quot;Sat&quot; | &quot;Sun&quot;; ...</pre>\n"],["address_lists_machine.rb.rl","","lib/mail/parsers/ragel/ruby/machines/address_lists_machine_rb_rl.html","","<p>%%{\n\n<pre>machine address_lists;\n\ninclude rb_actions &quot;rb_actions.rl&quot;;\ninclude common &quot;../../common.rl&quot;;\n\ngetkey ...</pre>\n"],["content_disposition_machine.rb.rl","","lib/mail/parsers/ragel/ruby/machines/content_disposition_machine_rb_rl.html","","<p>%%{\n\n<pre>machine content_disposition;\n\ninclude rb_actions &quot;rb_actions.rl&quot;;\ninclude common &quot;../../common.rl&quot;; ...</pre>\n"],["content_location_machine.rb.rl","","lib/mail/parsers/ragel/ruby/machines/content_location_machine_rb_rl.html","","<p>%%{\n\n<pre>machine content_location;\n\ninclude rb_actions &quot;rb_actions.rl&quot;;\ninclude common &quot;../../common.rl&quot;;\n ...</pre>\n"],["content_transfer_encoding_machine.rb.rl","","lib/mail/parsers/ragel/ruby/machines/content_transfer_encoding_machine_rb_rl.html","","<p>%%{\n\n<pre>machine content_transfer_encoding;\n\ninclude rb_actions &quot;rb_actions.rl&quot;;\ninclude common &quot;../../common.rl&quot;; ...</pre>\n"],["content_type_machine.rb.rl","","lib/mail/parsers/ragel/ruby/machines/content_type_machine_rb_rl.html","","<p>%%{\n\n<pre>machine content_type;\n\ninclude rb_actions &quot;rb_actions.rl&quot;;\ninclude common &quot;../../common.rl&quot;;\n\ngetkey ...</pre>\n"],["date_time_machine.rb.rl","","lib/mail/parsers/ragel/ruby/machines/date_time_machine_rb_rl.html","","<p>%%{\n\n<pre>machine date_time;\n\ninclude rb_actions &quot;rb_actions.rl&quot;;\ninclude common &quot;../../common.rl&quot;;\n\ngetkey ...</pre>\n"],["envelope_from_machine.rb.rl","","lib/mail/parsers/ragel/ruby/machines/envelope_from_machine_rb_rl.html","","<p>%%{\n\n<pre>machine envelope_from;\n\ninclude rb_actions &quot;rb_actions.rl&quot;;\ninclude common &quot;../../common.rl&quot;;\n\ngetkey ...</pre>\n"],["message_ids_machine.rb.rl","","lib/mail/parsers/ragel/ruby/machines/message_ids_machine_rb_rl.html","","<p>%%{\n\n<pre>machine message_ids;\n\ninclude rb_actions &quot;rb_actions.rl&quot;;\ninclude common &quot;../../common.rl&quot;;\n\ngetkey ...</pre>\n"],["mime_version_machine.rb.rl","","lib/mail/parsers/ragel/ruby/machines/mime_version_machine_rb_rl.html","","<p>%%{\n\n<pre>machine mime_version;\n\ninclude rb_actions &quot;rb_actions.rl&quot;;\ninclude common &quot;../../common.rl&quot;;\n\ngetkey ...</pre>\n"],["phrase_lists_machine.rb.rl","","lib/mail/parsers/ragel/ruby/machines/phrase_lists_machine_rb_rl.html","","<p>%%{\n\n<pre>machine phrase_lists;\n\ninclude rb_actions &quot;rb_actions.rl&quot;;\ninclude common &quot;../../common.rl&quot;;\n\ngetkey ...</pre>\n"],["rb_actions.rl","","lib/mail/parsers/ragel/ruby/machines/rb_actions_rl.html","","<p>%%{ machine rb_actions; action addr_spec { actions.push(0, p) } action\naddress_e { actions.push(1, p) …\n"],["received_machine.rb.rl","","lib/mail/parsers/ragel/ruby/machines/received_machine_rb_rl.html","","<p>%%{\n\n<pre>machine received;\n\ninclude rb_actions &quot;rb_actions.rl&quot;;\ninclude common &quot;../../common.rl&quot;;\n\ngetkey data_unpacked[p]; ...</pre>\n"]]}}