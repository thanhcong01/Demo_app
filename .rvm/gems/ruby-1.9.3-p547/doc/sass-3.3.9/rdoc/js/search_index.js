var search_data = {"index":{"searchIndex":["actioncontroller","base","merb","bootloader","object","orderedhash","sass","baseenvironment","css","cachestores","base","chain","filesystem","memory","null","callbacks","instancemethods","engine","line","environment","exec","generic","sass","sassconvert","scss","features","importers","base","deprecatedpath","filesystem","logger","base","loglevel","classmethods","media","query","querylist","plugin","compiler","configuration","merbbootloader","rack","stalenesschecker","readonlyenvironment","repl","scss","cssparser","parser","rx","scriptlexer","scriptparser","staticparser","script","csslexer","cssparser","functions","evaluationcontext","lexer","parser","tree","funcall","interpolation","listliteral","literal","mapliteral","node","operation","stringinterpolation","unaryoperation","variable","value","arglist","base","bool","color","deprecatedfalse","helpers","list","map","null","number","string","selector","abstractsequence","attribute","class","commasequence","element","id","interpolation","parent","placeholder","pseudo","selectorpseudoclass","sequence","simple","simplesequence","universal","shared","source","map","mapping","position","range","stack","frame","supports","condition","declaration","interpolation","negation","operator","syntaxerror","tree","atrootnode","charsetnode","commentnode","contentnode","cssimportnode","debugnode","directivenode","eachnode","extendnode","fornode","functionnode","ifnode","importnode","medianode","mixindefnode","mixinnode","node","propnode","returnnode","rootnode","rulenode","supportsnode","tracenode","variablenode","visitors","base","checknesting","convert","cssize","bubble","deepcopy","extend","perform","setoptions","tocss","warnnode","whilenode","unitconversionerror","util","crossplatformrandom","multibytestringscanner","normalizedmap","staticconditionalcontext","subsetmap","test","version","<<()","==()","==()","==()","==()","==()","==()","==()","[]()","[]()","[]()","[]=()","[]=()","[]=()","_adjust()","_dependencies()","_dump()","_dump()","_enc()","_eql?()","_eql?()","_eql?()","_find()","_forward()","_hash()","_hash()","_hash()","_interp_string()","_interp_to_src()","_load()","_load()","_log()","_match()","_matched()","_moz_document_directive()","_perform()","_perform()","_perform()","_perform()","_perform()","_perform()","_perform()","_perform()","_perform()","_perform()","_perform()","_render_with_sourcemap()","_retrieve()","_retrieve()","_retrieve()","_selector()","_size()","_sources()","_specificity()","_store()","_store()","_store()","_superselector?()","_to_tree()","_variable()","abs()","absolute_path()","abstract()","add()","add_backtrace()","add_else()","add_feature()","add_rules()","add_sources!()","add_template_location()","adjust_color()","adjust_hue()","after()","after_interpolation?()","alpha()","alpha()","alpha?()","ap_geq?()","ap_geq_3?()","append()","append_children()","arg_hash()","arglist()","array_minus()","as_stored()","assert_done()","assert_done()","assert_expr()","assert_int!()","assert_integer()","assert_tok()","assert_toks()","assert_type()","assert_unit()","assert_valid_index()","associative?()","at_root_directive()","at_root_directive_list()","at_root_query()","atomic_create_and_write_file()","attrib()","attrib_name!()","av_template_class()","backtrace()","balance()","balance()","base()","block()","block_child()","block_child()","block_contents()","blue()","blue()","bool()","bubblable?()","bubble()","bubble_subject()","bubbles?()","bubbles?()","bubbles?()","bubbles?()","build_tree()","build_tree()","byte_matched_size()","byte_pos()","call()","call()","caller()","caller()","caller_info()","catch_error()","ceil()","change_color()","charset_directive()","check()","check!()","check_directives_match!()","check_encoding()","check_encoding!()","check_encoding!()","check_extends_fired!()","check_for_no_children()","check_for_updates()","check_range()","check_sass_encoding()","check_until()","child_of_directory?()","children()","children()","children()","children()","children()","children()","children()","children()","children()","children()","children=()","chunks()","class_selector()","cleanpath()","clear()","clear()","clear_callbacks!()","coerce()","coercion_factor()","colon_path?()","color()","combinator()","comment?()","comparable()","comparable_to?()","compile()","compile_file()","compiler()","complement()","compute_dependencies()","compute_units()","const_missing()","construct_ruby_args()","content()","content()","content_directive()","continued?()","conversion_factor()","convertable?()","counter()","counters()","create_listener()","css()","css_filename()","css_import?()","css_locations()","css_tree()","css_with_sourcemap()","darken()","dasherize()","dasherize()","debubble()","debug_directive()","debug_info()","debug_info_rule()","declaration()","declaration()","declaration_or_ruleset()","declare()","deep_copy()","deep_copy()","deep_copy()","deep_copy()","deep_copy()","deep_copy()","deep_copy()","deep_copy()","deep_copy()","deep_copy()","deep_copy()","deep_copy()","deep_copy()","deep_copy()","deep_copy()","deep_copy()","deep_copy()","deep_copy()","deep_copy()","default_options()","default_sass_path()","define_callback()","define_logger()","defn_arglist!()","delete()","delete()","delete_if()","denormalize()","dependencies()","dependencies()","dependencies_stale?()","dependency_updated?()","deprecated()","deprecation_warning()","desaturate()","destructure()","directive()","directive_body()","directories_to_watch()","directories_to_watch()","directories_to_watch()","div()","div()","div()","do_extend()","do_extend()","do_extend()","done?()","dump_selectors()","dup()","each()","each()","each()","each_directive()","each_key()","each_pair()","each_value()","each_value()","element_name()","element_needs_parens?()","else_block()","else_directive()","empty?()","empty?()","encode_and_set_charset()","encode_vlq()","engine_options()","enum_cons()","enum_slice()","enum_with_index()","eq()","eq()","eq()","eq()","eq()","eq()","eq()","eql?()","eql?()","eql?()","eql?()","eql?()","equality_key()","erase!()","err()","escape_char()","escape_glob_characters()","escape_ident()","escape_uri()","exception_to_css()","exclude?()","exclude_node?()","expand_commas()","expected()","expected()","expected!()","expr()","expr()","expr!()","extend_directive()","extended()","extended_not_expanded_to_s()","extensions()","extract!()","extract_values()","fade_in()","fade_out()","feature_exists()","filename()","filename=()","filename=()","filename=()","find()","find()","find()","find_real_file()","find_relative()","find_relative()","first_seq()","first_simple_sel()","first_sseq()","flatten()","flatten_rule()","flatten_rules()","flatten_vertically()","floor()","fn_arglist()","fold_commas()","for_directive()","for_file()","for_node()","force_update_stylesheets()","format_comment_text()","from_hex()","from_node()","full_line_range()","funcall()","function()","function_directive()","function_exists()","get()","get_byte()","get_line()","getbyte()","getch()","glob()","global_env()","global_variable_exists()","grayscale()","green()","green()","group_by_to_a()","group_selectors()","gt()","gte()","handle_import_loop!()","handle_interpolation()","handle_load_error()","has?()","has_children?()","has_feature?()","has_key?()","has_placeholder?()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash_to_a()","header_string()","hex_color()","hex_str()","hsl()","hsl()","hsl_color()","hsl_to_rgb!()","hsla()","hsla()","hue()","hue()","hue_to_rgb()","human_indentation()","id_selector()","ident()","ident()","identifier()","ie_hex_str()","if()","if_directive()","import()","import_arg()","import_directive()","important()","imported_file()","include()","include_directive()","included()","index()","inherited()","inherited()","inherited_hash_accessor()","inherited_hash_reader()","inherited_hash_writer()","init_scanner!()","initialize_copy()","inject_values()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect_obj()","int?()","int_to_rgba()","interactive()","interp_ident()","interp_ident()","interp_ident_or_var()","interp_name()","interp_string()","interp_string()","interp_to_src()","interp_uri()","interp_uri()","interpolation()","interpolation()","interpolation()","interpolation()","interpolation_selector()","intersperse()","invalid_charset_parent?()","invalid_content_parent?()","invalid_extend_parent?()","invalid_function_child?()","invalid_function_parent?()","invalid_import_parent?()","invalid_mixindef_parent?()","invalid_prop_child?()","invalid_prop_parent?()","invalid_return_parent?()","invert()","invert()","invisible?()","invisible?()","invisible?()","invisible?()","invisible?()","invisible?()","invisible?()","invisible?()","ironruby?()","is_a?()","is_any_of?()","is_base?()","is_import?()","is_mixin?()","is_pseudo_map?()","is_unit?()","join()","jruby1_6?()","jruby?()","jruby_version()","json_escape_string()","json_value_of()","key()","key()","key()","keys()","keys()","keywords()","keywords()","lcs()","lcs_backtrace()","lcs_table()","left_parens()","legal_units?()","length()","lexer_class()","lexer_class()","lexer_class()","lighten()","lightness()","lightness()","line()","line()","line=()","line=()","line=()","lines()","list()","list()","list_separator()","listen_geq_2?()","listen_to()","literal()","literal_node()","load_compass()","load_listen!()","load_paths()","load_paths()","log()","log_level()","log_level?()","log_levels()","logging_level?()","lstrip()","lt()","lte()","macruby?()","make_cseq()","make_seq()","make_sseq()","map()","map()","map()","map_get()","map_has_key()","map_hash()","map_keys()","map_keys()","map_merge()","map_pair()","map_remove()","map_vals()","map_values()","match?()","matched_size()","max()","media_directive()","media_expr()","media_query()","media_query_list()","merge()","merge()","merge()","merge()","merge!()","merge_adjacent_strings()","merge_final_ops()","merge_initial_ops()","method_missing()","method_missing()","method_missing()","min()","minus()","minus()","minus()","mix()","mixin_arglist()","mixin_directive()","mixin_exists()","mod()","mod()","modify_backtrace()","moz_document_function()","moz_document_function()","mtime()","mtime()","mtime()","name()","name()","needs_map_warning?()","neq()","neq()","neq()","nest_seqs()","nested_properties!()","nested_properties!()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next()","node()","node()","node_name()","normalize()","normalize!()","normalize_indentation()","normalize_options()","normalize_template_location!()","normalized_load_paths()","nth()","null()","null?()","null?()","number()","number()","numeric_transformation()","offset()","offset()","on_file_changed()","opacify()","opacity()","open_file()","operand_to_sass()","operate()","operator()","optional?()","options()","options()","options()","options=()","options=()","options=()","options=()","options=()","options=()","options=()","options=()","options=()","options=()","options_for_importer()","opts()","ord()","ordered_hash()","output()","paren()","paren()","parens()","parent()","parent_ref_rules()","parent_selector()","parent_selector()","parent_superselector?()","parse()","parse()","parse()","parse()","parse()","parse!()","parse_at_root_directive()","parse_at_root_query()","parse_charset_directive()","parse_comment()","parse_content_directive()","parse_debug_directive()","parse_directive()","parse_each_directive()","parse_else_directive()","parse_extend_directive()","parse_for_directive()","parse_function_definition_arglist()","parse_function_directive()","parse_if_directive()","parse_import_arg()","parse_import_directive()","parse_include_directive()","parse_input()","parse_interp()","parse_interp()","parse_interp_ident()","parse_interpolated()","parse_line()","parse_media_directive()","parse_media_query_list()","parse_mixin_definition()","parse_mixin_definition_arglist()","parse_mixin_directive()","parse_mixin_include()","parse_mixin_include_arglist()","parse_property()","parse_property_or_rule()","parse_return_directive()","parse_script()","parse_selector()","parse_selectors()","parse_static_at_root_query()","parse_str()","parse_string()","parse_supports_condition()","parse_unit_string()","parse_until()","parse_variable()","parse_warn_directive()","parse_while_directive()","path_has_two_subjects?()","path_to()","pathname()","paths()","peek()","peek()","peep()","percentage()","perform()","perform()","perform()","perform()","perform()","perform()","perform()","perform_arg()","perform_arguments()","perform_sass_fn()","perform_splat()","piecewise()","placeholder_selector()","placeholder_selector()","plus()","plus()","plus()","plus()","pointer()","pos()","pos=()","possible_files()","powerset()","precedence_of()","precision()","precision=()","precision_factor()","prefixed_directive()","prepend!()","probably_dest_dir?()","process_comment()","process_directory()","process_file()","process_result()","process_result()","process_result()","production()","pseudo()","pseudo_arg()","pseudo_class_selector_message()","pseudo_elements()","pseudo_expr()","pseudo_expr_token()","public_url()","public_url()","puts()","puts_action()","qualified_name()","query_expr()","query_interp_to_src()","quote()","quote()","quoted_string()","rails_env()","rails_root()","rand()","random()","random_number_generator()","random_seed=()","range()","range()","raw()","rbx?()","read_token()","red()","red()","reference_combinator()","reformat_argument_error()","reject()","reject!()","relative_to_pwd()","remove_redundant_directories()","remove_root()","remove_template_location()","render()","render()","render()","render_with_sourcemap()","render_with_sourcemap()","replace()","replace_subseq()","reset()","reset!()","reset!()","resolve_parent_refs()","resolve_parent_refs()","resolve_parent_refs()","resolved()","resolved()","resolved_modifier()","resolved_type()","resolved_value()","resolved_value()","resolved_value()","respond_to?()","respond_to?()","respond_to_missing?()","rest()","rest_size()","restrict()","rethrow()","retrieve()","retrieve()","retrieve()","return_directive()","revision_number()","rgb()","rgb()","rgb_color()","rgb_to_hsl!()","rgba()","rgba()","rgba_str()","right_parens()","round()","round()","rstrip!()","ruby1?()","ruby1_8?()","ruby1_8_6?()","ruby_name()","ruleset()","run()","run()","run_interp()","run_interp_no_strip()","s()","sans_common_units()","sass_backtrace_str()","sass_filename()","sass_line()","sass_mixin()","sass_script()","sass_warn()","sassc_key()","saturate()","saturation()","saturation()","scale_color()","scan()","scan_full()","scan_until()","scope()","script_value()","search_full()","selector()","selector()","selector()","selector_comma_sequence()","selector_sequence()","selector_to_sass()","selector_to_scss()","selector_to_src()","semi()","sep_str()","sep_str()","separator()","separator()","set_eql?()","set_hash()","set_nth()","set_opts()","set_opts()","set_opts()","shift()","shift_output_lines()","shift_output_offsets()","signature()","signature()","silence_sass_warnings()","silence_warnings()","simple_selector_sequence()","single_eq()","size()","skip()","skip()","skip_until()","slice_by()","smallest()","sort_by()","source_encoding()","source_encoding()","source_position()","source_position()","sourcemap_name()","space()","special_directive()","special_directive()","special_fun()","specificity()","specificity()","specificity()","specificity()","specificity()","specificity()","specificity()","specificity()","specificity()","split()","split_colon_path()","ss()","ss_comments()","stack()","store()","store()","store()","str()","str()","str?()","str_index()","str_insert()","str_length()","str_slice()","string()","string()","string()","string()","string=()","string_re()","strip_string_array()","style()","stylesheet()","stylesheet_modified_since?()","stylesheet_modified_since?()","stylesheet_needs_update?()","stylesheet_needs_update?()","stylesheet_needs_update?()","subject?()","subsequence?()","substitute()","subweave()","superselector?()","superselector?()","supports_condition()","supports_condition_in_parens()","supports_declaration_condition()","supports_directive()","supports_interpolation()","supports_negation()","supports_operator()","sync_keys!()","tab_str()","tabulate()","template_location_array()","template_locations()","term()","terminate()","throw_error()","times()","times()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_bool()","to_bool()","to_css()","to_css()","to_css()","to_css()","to_css()","to_css()","to_css()","to_css()","to_h()","to_h()","to_h()","to_hash()","to_hash()","to_hash()","to_i()","to_i()","to_json()","to_literal()","to_lower_case()","to_parser_offset()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_sass()","to_sass()","to_sass()","to_sass()","to_sass()","to_sass()","to_sass()","to_sass()","to_sass()","to_sass()","to_sass()","to_sass()","to_sass()","to_sass()","to_sass()","to_sass()","to_sass()","to_sass()","to_sass()","to_scss()","to_src()","to_src()","to_src()","to_src()","to_src()","to_src()","to_src()","to_tree()","to_upper_case()","to_value()","tok()","tok!()","tok?()","token()","token()","transparent_parent?()","transparentize()","tree()","tree()","trim()","try_comment()","try_delete_css()","try_op_before_interp()","try_ops_after_interp()","try_send()","try_to_parse_non_interpolated_rules()","try_tok()","try_toks()","type()","type_of()","unary()","unary_div()","unary_minus()","unary_minus()","unary_not()","unary_plus()","unary_plus()","undefined_conversion_error_char()","unify()","unify()","unify()","unify()","unify()","unify()","unify()","unify()","unify_namespaces()","unique_id()","unit()","unit_str()","unitless()","unitless?()","unpeek!()","unquote()","unquoted_string()","unscan()","update()","update()","update_stylesheet()","update_stylesheets()","update_stylesheets()","use_css_import?()","use_css_import?()","use_css_import?()","val_to_sass()","val_to_sass_comma()","val_to_sass_concat()","val_to_sass_div()","validate_and_append_child()","value()","value()","value()","value!()","values()","values()","var_expr()","var_expr()","variable()","variable()","variable()","variable()","variable()","variable_exists()","version()","version_date()","version_geq()","version_gt()","visit()","visit()","visit()","visit()","visit()","visit()","visit()","visit()","visit()","visit()","visit()","visit()","visit()","visit_atroot()","visit_atroot()","visit_atroot()","visit_charset()","visit_charset()","visit_children()","visit_children()","visit_children()","visit_children()","visit_children()","visit_children()","visit_children()","visit_children_without_parent()","visit_comment()","visit_comment()","visit_comment()","visit_comment()","visit_content()","visit_content()","visit_cssimport()","visit_cssimport()","visit_cssimport()","visit_cssimport()","visit_debug()","visit_debug()","visit_debug()","visit_debug()","visit_directive()","visit_directive()","visit_directive()","visit_directive()","visit_directive()","visit_directive()","visit_each()","visit_each()","visit_each()","visit_each()","visit_extend()","visit_extend()","visit_extend()","visit_extend()","visit_extend()","visit_for()","visit_for()","visit_for()","visit_for()","visit_function()","visit_function()","visit_function()","visit_function()","visit_if()","visit_if()","visit_if()","visit_if()","visit_if()","visit_import()","visit_import()","visit_import()","visit_import()","visit_import()","visit_media()","visit_media()","visit_media()","visit_media()","visit_media()","visit_media()","visit_mixin()","visit_mixin()","visit_mixin()","visit_mixin()","visit_mixindef()","visit_mixindef()","visit_mixindef()","visit_mixindef()","visit_mixindef()","visit_prop()","visit_prop()","visit_prop()","visit_prop()","visit_prop()","visit_prop()","visit_return()","visit_return()","visit_return()","visit_return()","visit_root()","visit_root()","visit_root()","visit_root()","visit_root()","visit_rule()","visit_rule()","visit_rule()","visit_rule()","visit_rule()","visit_rule()","visit_rule()","visit_supports()","visit_supports()","visit_supports()","visit_supports()","visit_supports()","visit_supports()","visit_trace()","visit_variable()","visit_variable()","visit_variable()","visit_variable()","visit_warn()","visit_warn()","visit_warn()","visit_warn()","visit_while()","visit_while()","visit_while()","visit_while()","warn_about_public_url()","warn_directive()","warned=()","warned?()","was_set?()","watch()","watch_or_update()","watched_file?()","watched_file?()","watched_file?()","watched_paths()","weave()","while_directive()","whitespace()","whitespace()","whitespace?()","windows?()","with()","with_base()","with_dependency_cache()","with_environment()","with_extracted_values()","with_frame()","with_import()","with_mixin()","with_more_sources()","with_parent()","with_tabs()","without_original()","write_file()","write_json_field()","write_output()","zip()"],"longSearchIndex":["actioncontroller","actioncontroller::base","merb","merb::bootloader","object","orderedhash","sass","sass::baseenvironment","sass::css","sass::cachestores","sass::cachestores::base","sass::cachestores::chain","sass::cachestores::filesystem","sass::cachestores::memory","sass::cachestores::null","sass::callbacks","sass::callbacks::instancemethods","sass::engine","sass::engine::line","sass::environment","sass::exec","sass::exec::generic","sass::exec::sass","sass::exec::sassconvert","sass::exec::scss","sass::features","sass::importers","sass::importers::base","sass::importers::deprecatedpath","sass::importers::filesystem","sass::logger","sass::logger::base","sass::logger::loglevel","sass::logger::loglevel::classmethods","sass::media","sass::media::query","sass::media::querylist","sass::plugin","sass::plugin::compiler","sass::plugin::configuration","sass::plugin::merbbootloader","sass::plugin::rack","sass::plugin::stalenesschecker","sass::readonlyenvironment","sass::repl","sass::scss","sass::scss::cssparser","sass::scss::parser","sass::scss::rx","sass::scss::scriptlexer","sass::scss::scriptparser","sass::scss::staticparser","sass::script","sass::script::csslexer","sass::script::cssparser","sass::script::functions","sass::script::functions::evaluationcontext","sass::script::lexer","sass::script::parser","sass::script::tree","sass::script::tree::funcall","sass::script::tree::interpolation","sass::script::tree::listliteral","sass::script::tree::literal","sass::script::tree::mapliteral","sass::script::tree::node","sass::script::tree::operation","sass::script::tree::stringinterpolation","sass::script::tree::unaryoperation","sass::script::tree::variable","sass::script::value","sass::script::value::arglist","sass::script::value::base","sass::script::value::bool","sass::script::value::color","sass::script::value::deprecatedfalse","sass::script::value::helpers","sass::script::value::list","sass::script::value::map","sass::script::value::null","sass::script::value::number","sass::script::value::string","sass::selector","sass::selector::abstractsequence","sass::selector::attribute","sass::selector::class","sass::selector::commasequence","sass::selector::element","sass::selector::id","sass::selector::interpolation","sass::selector::parent","sass::selector::placeholder","sass::selector::pseudo","sass::selector::selectorpseudoclass","sass::selector::sequence","sass::selector::simple","sass::selector::simplesequence","sass::selector::universal","sass::shared","sass::source","sass::source::map","sass::source::map::mapping","sass::source::position","sass::source::range","sass::stack","sass::stack::frame","sass::supports","sass::supports::condition","sass::supports::declaration","sass::supports::interpolation","sass::supports::negation","sass::supports::operator","sass::syntaxerror","sass::tree","sass::tree::atrootnode","sass::tree::charsetnode","sass::tree::commentnode","sass::tree::contentnode","sass::tree::cssimportnode","sass::tree::debugnode","sass::tree::directivenode","sass::tree::eachnode","sass::tree::extendnode","sass::tree::fornode","sass::tree::functionnode","sass::tree::ifnode","sass::tree::importnode","sass::tree::medianode","sass::tree::mixindefnode","sass::tree::mixinnode","sass::tree::node","sass::tree::propnode","sass::tree::returnnode","sass::tree::rootnode","sass::tree::rulenode","sass::tree::supportsnode","sass::tree::tracenode","sass::tree::variablenode","sass::tree::visitors","sass::tree::visitors::base","sass::tree::visitors::checknesting","sass::tree::visitors::convert","sass::tree::visitors::cssize","sass::tree::visitors::cssize::bubble","sass::tree::visitors::deepcopy","sass::tree::visitors::extend","sass::tree::visitors::perform","sass::tree::visitors::setoptions","sass::tree::visitors::tocss","sass::tree::warnnode","sass::tree::whilenode","sass::unitconversionerror","sass::util","sass::util::crossplatformrandom","sass::util::multibytestringscanner","sass::util::normalizedmap","sass::util::staticconditionalcontext","sass::util::subsetmap","sass::util::test","sass::version","sass::tree::node#<<()","sass::script::value::base#==()","sass::selector::abstractsequence#==()","sass::selector::simple#==()","sass::tree::commentnode#==()","sass::tree::node#==()","sass::tree::propnode#==()","sass::tree::rulenode#==()","orderedhash::[]()","sass::util::normalizedmap#[]()","sass::util::subsetmap#[]()","orderedhash#[]=()","sass::util::normalizedmap#[]=()","sass::util::subsetmap#[]=()","sass::script::functions#_adjust()","sass::engine#_dependencies()","sass::cachestores::memory#_dump()","sass::tree::ifnode#_dump()","sass::util#_enc()","sass::selector::commasequence#_eql?()","sass::selector::sequence#_eql?()","sass::selector::simplesequence#_eql?()","sass::importers::filesystem#_find()","sass::util::multibytestringscanner#_forward()","sass::selector::commasequence#_hash()","sass::selector::sequence#_hash()","sass::selector::simplesequence#_hash()","sass::scss::parser#_interp_string()","sass::media::_interp_to_src()","sass::cachestores::memory::_load()","sass::tree::ifnode::_load()","sass::logger::base#_log()","sass::util::multibytestringscanner#_match()","sass::util::multibytestringscanner#_matched()","sass::scss::parser#_moz_document_directive()","sass::script::tree::funcall#_perform()","sass::script::tree::interpolation#_perform()","sass::script::tree::listliteral#_perform()","sass::script::tree::literal#_perform()","sass::script::tree::mapliteral#_perform()","sass::script::tree::node#_perform()","sass::script::tree::operation#_perform()","sass::script::tree::stringinterpolation#_perform()","sass::script::tree::unaryoperation#_perform()","sass::script::tree::variable#_perform()","sass::script::value::base#_perform()","sass::engine#_render_with_sourcemap()","sass::cachestores::base#_retrieve()","sass::cachestores::filesystem#_retrieve()","sass::cachestores::null#_retrieve()","sass::scss::parser#_selector()","sass::util::multibytestringscanner#_size()","sass::selector::sequence#_sources()","sass::selector::abstractsequence#_specificity()","sass::cachestores::base#_store()","sass::cachestores::filesystem#_store()","sass::cachestores::null#_store()","sass::selector::sequence#_superselector?()","sass::engine#_to_tree()","sass::script::lexer#_variable()","sass::script::functions#abs()","sass::util#absolute_path()","sass::util#abstract()","sass::source::map#add()","sass::syntaxerror#add_backtrace()","sass::tree::ifnode#add_else()","sass::features#add_feature()","sass::tree::rulenode#add_rules()","sass::selector::sequence#add_sources!()","sass::plugin::configuration#add_template_location()","sass::script::functions#adjust_color()","sass::script::functions#adjust_hue()","sass::source::position#after()","sass::script::lexer#after_interpolation?()","sass::script::functions#alpha()","sass::script::value::color#alpha()","sass::script::value::color#alpha?()","sass::util#ap_geq?()","sass::util#ap_geq_3?()","sass::script::functions#append()","sass::engine#append_children()","sass::tree::visitors::perform#arg_hash()","sass::script::parser#arglist()","sass::util#array_minus()","sass::util::normalizedmap#as_stored()","sass::scss::scriptparser#assert_done()","sass::script::parser#assert_done()","sass::script::parser#assert_expr()","sass::script::value::base#assert_int!()","sass::script::functions::evaluationcontext#assert_integer()","sass::script::parser#assert_tok()","sass::script::parser#assert_toks()","sass::script::functions::evaluationcontext#assert_type()","sass::script::functions::evaluationcontext#assert_unit()","sass::script::value::list::assert_valid_index()","sass::script::parser#associative?()","sass::scss::parser#at_root_directive()","sass::scss::parser#at_root_directive_list()","sass::scss::parser#at_root_query()","sass::util#atomic_create_and_write_file()","sass::scss::parser#attrib()","sass::scss::parser#attrib_name!()","sass::util#av_template_class()","sass::syntaxerror#backtrace()","sass::shared#balance()","sass::tree::node#balance()","sass::selector::simplesequence#base()","sass::scss::parser#block()","sass::scss::cssparser#block_child()","sass::scss::parser#block_child()","sass::scss::parser#block_contents()","sass::script::functions#blue()","sass::script::value::color#blue()","sass::script::value::helpers#bool()","sass::tree::visitors::cssize#bubblable?()","sass::tree::visitors::cssize#bubble()","sass::css#bubble_subject()","sass::tree::atrootnode#bubbles?()","sass::tree::directivenode#bubbles?()","sass::tree::node#bubbles?()","sass::tree::visitors::cssize::bubble#bubbles?()","sass::css#build_tree()","sass::engine#build_tree()","sass::util::multibytestringscanner#byte_matched_size()","sass::util::multibytestringscanner#byte_pos()","sass::plugin::rack#call()","sass::script::functions#call()","sass::baseenvironment#caller()","sass::readonlyenvironment#caller()","sass::util#caller_info()","sass::scss::parser#catch_error()","sass::script::functions#ceil()","sass::script::functions#change_color()","sass::scss::parser#charset_directive()","sass::util::multibytestringscanner#check()","sass::tree::propnode#check!()","sass::selector::simplesequence#check_directives_match!()","sass::util#check_encoding()","sass::css#check_encoding!()","sass::engine#check_encoding!()","sass::tree::visitors::extend::check_extends_fired!()","sass::engine#check_for_no_children()","sass::plugin#check_for_updates()","sass::util#check_range()","sass::util#check_sass_encoding()","sass::util::multibytestringscanner#check_until()","sass::plugin::compiler#child_of_directory?()","sass::script::tree::funcall#children()","sass::script::tree::interpolation#children()","sass::script::tree::listliteral#children()","sass::script::tree::literal#children()","sass::script::tree::mapliteral#children()","sass::script::tree::node#children()","sass::script::tree::operation#children()","sass::script::tree::stringinterpolation#children()","sass::script::tree::unaryoperation#children()","sass::script::tree::variable#children()","sass::tree::node#children=()","sass::selector::sequence#chunks()","sass::scss::parser#class_selector()","sass::util#cleanpath()","orderedhash#clear()","sass::util::multibytestringscanner#clear()","sass::callbacks::instancemethods#clear_callbacks!()","sass::script::value::number#coerce()","sass::script::value::number#coercion_factor()","sass::exec::sass#colon_path?()","sass::exec::generic#color()","sass::scss::parser#combinator()","sass::engine::line#comment?()","sass::script::functions#comparable()","sass::script::value::number#comparable_to?()","sass::compile()","sass::compile_file()","sass::plugin#compiler()","sass::script::functions#complement()","sass::plugin::stalenesschecker#compute_dependencies()","sass::script::value::number#compute_units()","sass::script::const_missing()","sass::script::tree::funcall#construct_ruby_args()","sass::baseenvironment#content()","sass::readonlyenvironment#content()","sass::scss::parser#content_directive()","sass::tree::rulenode#continued?()","sass::script::value::number#conversion_factor()","sass::script::value::number#convertable?()","sass::script::functions#counter()","sass::script::functions#counters()","sass::plugin::compiler#create_listener()","sass::tree::node#css()","sass::plugin::compiler#css_filename()","sass::tree::importnode#css_import?()","sass::plugin::compiler#css_locations()","sass::tree::rootnode#css_tree()","sass::tree::node#css_with_sourcemap()","sass::script::functions#darken()","sass::script::tree::node#dasherize()","sass::tree::visitors::convert#dasherize()","sass::tree::visitors::cssize#debubble()","sass::scss::parser#debug_directive()","sass::tree::rulenode#debug_info()","sass::tree::visitors::tocss#debug_info_rule()","sass::scss::parser#declaration()","sass::tree::propnode#declaration()","sass::scss::parser#declaration_or_ruleset()","sass::script::functions::declare()","sass::media::query#deep_copy()","sass::media::querylist#deep_copy()","sass::script::tree::funcall#deep_copy()","sass::script::tree::interpolation#deep_copy()","sass::script::tree::listliteral#deep_copy()","sass::script::tree::literal#deep_copy()","sass::script::tree::mapliteral#deep_copy()","sass::script::tree::node#deep_copy()","sass::script::tree::operation#deep_copy()","sass::script::tree::stringinterpolation#deep_copy()","sass::script::tree::unaryoperation#deep_copy()","sass::script::tree::variable#deep_copy()","sass::stack#deep_copy()","sass::supports::condition#deep_copy()","sass::supports::declaration#deep_copy()","sass::supports::interpolation#deep_copy()","sass::supports::negation#deep_copy()","sass::supports::operator#deep_copy()","sass::tree::node#deep_copy()","sass::plugin::configuration#default_options()","sass::exec::sass#default_sass_path()","sass::callbacks#define_callback()","sass::logger::loglevel::classmethods#define_logger()","sass::script::parser#defn_arglist!()","orderedhash#delete()","sass::util::normalizedmap#delete()","orderedhash#delete_if()","sass::util::normalizedmap#denormalize()","sass::engine#dependencies()","sass::plugin::stalenesschecker#dependencies()","sass::plugin::stalenesschecker#dependencies_stale?()","sass::plugin::stalenesschecker#dependency_updated?()","sass::util#deprecated()","sass::importers::deprecatedpath#deprecation_warning()","sass::script::functions#desaturate()","sass::util#destructure()","sass::scss::parser#directive()","sass::scss::parser#directive_body()","sass::importers::base#directories_to_watch()","sass::importers::deprecatedpath#directories_to_watch()","sass::importers::filesystem#directories_to_watch()","sass::script::value::base#div()","sass::script::value::color#div()","sass::script::value::number#div()","sass::selector::commasequence#do_extend()","sass::selector::sequence#do_extend()","sass::selector::simplesequence#do_extend()","sass::script::lexer#done?()","sass::css#dump_selectors()","sass::util::normalizedmap#dup()","orderedhash#each()","sass::tree::node#each()","sass::util::normalizedmap#each()","sass::scss::parser#each_directive()","orderedhash#each_key()","orderedhash#each_pair()","orderedhash#each_value()","sass::util::subsetmap#each_value()","sass::scss::parser#element_name()","sass::script::value::list#element_needs_parens?()","sass::scss::parser#else_block()","sass::scss::parser#else_directive()","sass::util::normalizedmap#empty?()","sass::util::subsetmap#empty?()","sass::engine#encode_and_set_charset()","sass::util#encode_vlq()","sass::plugin::compiler#engine_options()","sass::util#enum_cons()","sass::util#enum_slice()","sass::util#enum_with_index()","sass::script::value::base#eq()","sass::script::value::bool#eq()","sass::script::value::color#eq()","sass::script::value::deprecatedfalse#eq()","sass::script::value::list#eq()","sass::script::value::map#eq()","sass::script::value::number#eq()","sass::importers::filesystem#eql?()","sass::script::value::base#eql?()","sass::script::value::number#eql?()","sass::selector::abstractsequence#eql?()","sass::selector::simple#eql?()","sass::selector::simple#equality_key()","sass::tree::visitors::tocss#erase!()","sass::scss::parser#err()","sass::scss::rx::escape_char()","sass::importers::filesystem#escape_glob_characters()","sass::scss::rx::escape_ident()","sass::util#escape_uri()","sass::syntaxerror#exception_to_css()","sass::tree::atrootnode#exclude?()","sass::tree::atrootnode#exclude_node?()","sass::css#expand_commas()","sass::scss::parser#expected()","sass::scss::parser::expected()","sass::script::lexer#expected!()","sass::scss::parser#expr()","sass::script::parser#expr()","sass::scss::parser#expr!()","sass::scss::parser#extend_directive()","sass::callbacks::extended()","sass::selector::sequence#extended_not_expanded_to_s()","sass::importers::filesystem#extensions()","sass::util#extract!()","sass::util#extract_values()","sass::script::functions#fade_in()","sass::script::functions#fade_out()","sass::script::functions#feature_exists()","sass::tree::node#filename()","sass::selector::abstractsequence#filename=()","sass::selector::sequence#filename=()","sass::tree::rulenode#filename=()","sass::importers::base#find()","sass::importers::deprecatedpath#find()","sass::importers::filesystem#find()","sass::importers::filesystem#find_real_file()","sass::importers::base#find_relative()","sass::importers::filesystem#find_relative()","sass::css#first_seq()","sass::css#first_simple_sel()","sass::css#first_sseq()","sass::util#flatten()","sass::css#flatten_rule()","sass::css#flatten_rules()","sass::util#flatten_vertically()","sass::script::functions#floor()","sass::script::parser#fn_arglist()","sass::css#fold_commas()","sass::scss::parser#for_directive()","sass::engine::for_file()","sass::tree::visitors::tocss#for_node()","sass::plugin#force_update_stylesheets()","sass::engine#format_comment_text()","sass::script::value::color::from_hex()","sass::tree::tracenode::from_node()","sass::engine#full_line_range()","sass::script::parser#funcall()","sass::scss::parser#function()","sass::scss::parser#function_directive()","sass::script::functions#function_exists()","sass::util::subsetmap#get()","sass::util::multibytestringscanner#get_byte()","sass::exec::generic#get_line()","sass::util::multibytestringscanner#getbyte()","sass::util::multibytestringscanner#getch()","sass::util#glob()","sass::baseenvironment#global_env()","sass::script::functions#global_variable_exists()","sass::script::functions#grayscale()","sass::script::functions#green()","sass::script::value::color#green()","sass::util#group_by_to_a()","sass::selector::sequence#group_selectors()","sass::script::value::number#gt()","sass::script::value::number#gte()","sass::tree::visitors::perform#handle_import_loop!()","sass::shared#handle_interpolation()","sass::exec::generic#handle_load_error()","sass::util#has?()","sass::scss::parser#has_children?()","sass::features#has_feature?()","sass::util::normalizedmap#has_key?()","sass::selector::abstractsequence#has_placeholder?()","sass::importers::filesystem#hash()","sass::script::value::base#hash()","sass::script::value::color#hash()","sass::script::value::list#hash()","sass::script::value::map#hash()","sass::script::value::number#hash()","sass::selector::abstractsequence#hash()","sass::selector::simple#hash()","sass::util#hash_to_a()","sass::syntaxerror#header_string()","sass::script::value::helpers#hex_color()","sass::script::value::color#hex_str()","sass::script::functions#hsl()","sass::script::value::color#hsl()","sass::script::value::helpers#hsl_color()","sass::script::value::color#hsl_to_rgb!()","sass::script::functions#hsla()","sass::script::value::color#hsla()","sass::script::functions#hue()","sass::script::value::color#hue()","sass::script::value::color#hue_to_rgb()","sass::shared#human_indentation()","sass::scss::parser#id_selector()","sass::script::lexer#ident()","sass::script::parser#ident()","sass::script::value::helpers#identifier()","sass::script::functions#ie_hex_str()","sass::script::functions#if()","sass::scss::parser#if_directive()","sass::tree::importnode#import()","sass::scss::parser#import_arg()","sass::scss::parser#import_directive()","sass::script::csslexer#important()","sass::tree::importnode#imported_file()","sass::script::functions#include()","sass::scss::parser#include_directive()","sass::logger::loglevel::included()","sass::script::functions#index()","sass::logger::loglevel::classmethods#inherited()","sass::tree::node::inherited()","sass::baseenvironment#inherited_hash_accessor()","sass::baseenvironment#inherited_hash_reader()","sass::baseenvironment#inherited_hash_writer()","sass::scss::parser#init_scanner!()","orderedhash#initialize_copy()","sass::util#inject_values()","orderedhash#inspect()","sass::script::functions#inspect()","sass::script::tree::funcall#inspect()","sass::script::tree::interpolation#inspect()","sass::script::tree::listliteral#inspect()","sass::script::tree::literal#inspect()","sass::script::tree::mapliteral#inspect()","sass::script::tree::operation#inspect()","sass::script::tree::stringinterpolation#inspect()","sass::script::tree::unaryoperation#inspect()","sass::script::tree::variable#inspect()","sass::script::value::base#inspect()","sass::script::value::color#inspect()","sass::script::value::list#inspect()","sass::script::value::map#inspect()","sass::script::value::null#inspect()","sass::script::value::number#inspect()","sass::selector::commasequence#inspect()","sass::selector::sequence#inspect()","sass::selector::simple#inspect()","sass::selector::simplesequence#inspect()","sass::source::map::mapping#inspect()","sass::source::position#inspect()","sass::source::range#inspect()","sass::tree::node#inspect()","sass::tree::visitors::cssize::bubble#inspect()","sass::util#inspect_obj()","sass::script::value::number#int?()","sass::script::value::color::int_to_rgba()","sass::exec::sass#interactive()","sass::scss::parser#interp_ident()","sass::scss::staticparser#interp_ident()","sass::scss::parser#interp_ident_or_var()","sass::scss::parser#interp_name()","sass::scss::parser#interp_string()","sass::scss::staticparser#interp_string()","sass::tree::visitors::convert#interp_to_src()","sass::scss::parser#interp_uri()","sass::scss::staticparser#interp_uri()","sass::scss::cssparser#interpolation()","sass::scss::parser#interpolation()","sass::scss::staticparser#interpolation()","sass::script::parser#interpolation()","sass::scss::parser#interpolation_selector()","sass::util#intersperse()","sass::tree::visitors::checknesting#invalid_charset_parent?()","sass::tree::visitors::checknesting#invalid_content_parent?()","sass::tree::visitors::checknesting#invalid_extend_parent?()","sass::tree::visitors::checknesting#invalid_function_child?()","sass::tree::visitors::checknesting#invalid_function_parent?()","sass::tree::visitors::checknesting#invalid_import_parent?()","sass::tree::visitors::checknesting#invalid_mixindef_parent?()","sass::tree::visitors::checknesting#invalid_prop_child?()","sass::tree::visitors::checknesting#invalid_prop_parent?()","sass::tree::visitors::checknesting#invalid_return_parent?()","orderedhash#invert()","sass::script::functions#invert()","sass::tree::charsetnode#invisible?()","sass::tree::commentnode#invisible?()","sass::tree::importnode#invisible?()","sass::tree::medianode#invisible?()","sass::tree::node#invisible?()","sass::tree::propnode#invisible?()","sass::tree::rulenode#invisible?()","sass::tree::supportsnode#invisible?()","sass::util#ironruby?()","sass::util::multibytestringscanner#is_a?()","sass::tree::visitors::checknesting#is_any_of?()","sass::stack::frame#is_base?()","sass::stack::frame#is_import?()","sass::stack::frame#is_mixin?()","sass::script::value::list#is_pseudo_map?()","sass::script::value::number#is_unit?()","sass::script::functions#join()","sass::util#jruby1_6?()","sass::util#jruby?()","sass::util#jruby_version()","sass::util#json_escape_string()","sass::util#json_value_of()","sass::cachestores::base#key()","sass::importers::base#key()","sass::importers::filesystem#key()","orderedhash#keys()","sass::util::normalizedmap#keys()","sass::script::functions#keywords()","sass::script::value::arglist#keywords()","sass::util#lcs()","sass::util#lcs_backtrace()","sass::util#lcs_table()","sass::supports::operator#left_parens()","sass::script::value::number#legal_units?()","sass::script::functions#length()","sass::scss::scriptparser#lexer_class()","sass::script::cssparser#lexer_class()","sass::script::parser#lexer_class()","sass::script::functions#lighten()","sass::script::functions#lightness()","sass::script::value::color#lightness()","sass::script::lexer#line()","sass::script::parser#line()","sass::selector::abstractsequence#line=()","sass::selector::sequence#line=()","sass::tree::rulenode#line=()","sass::tree::commentnode#lines()","sass::script::parser#list()","sass::script::value::helpers#list()","sass::script::functions#list_separator()","sass::util#listen_geq_2?()","sass::plugin::compiler#listen_to()","sass::script::parser#literal()","sass::script::parser#literal_node()","sass::exec::sass#load_compass()","sass::util#load_listen!()","sass::load_paths()","sass::plugin::compiler#load_paths()","sass::logger::base#log()","sass::logger::loglevel::classmethods#log_level()","sass::logger::loglevel::classmethods#log_level?()","sass::logger::loglevel::classmethods#log_levels()","sass::logger::base#logging_level?()","sass::tree::visitors::tocss#lstrip()","sass::script::value::number#lt()","sass::script::value::number#lte()","sass::util#macruby?()","sass::css#make_cseq()","sass::css#make_seq()","sass::css#make_sseq()","sass::script::parser#map()","sass::script::value::helpers#map()","sass::util::normalizedmap#map()","sass::script::functions#map_get()","sass::script::functions#map_has_key()","sass::util#map_hash()","sass::script::functions#map_keys()","sass::util#map_keys()","sass::script::functions#map_merge()","sass::script::parser#map_pair()","sass::script::functions#map_remove()","sass::util#map_vals()","sass::script::functions#map_values()","sass::util::multibytestringscanner#match?()","sass::util::multibytestringscanner#matched_size()","sass::script::functions#max()","sass::scss::parser#media_directive()","sass::scss::parser#media_expr()","sass::scss::parser#media_query()","sass::scss::parser#media_query_list()","orderedhash#merge()","sass::media::query#merge()","sass::media::querylist#merge()","sass::scss::parser#merge()","orderedhash#merge!()","sass::util#merge_adjacent_strings()","sass::selector::sequence#merge_final_ops()","sass::selector::sequence#merge_initial_ops()","sass::plugin#method_missing()","sass::util::normalizedmap#method_missing()","sass::util::staticconditionalcontext#method_missing()","sass::script::functions#min()","sass::script::value::base#minus()","sass::script::value::color#minus()","sass::script::value::number#minus()","sass::script::functions#mix()","sass::script::parser#mixin_arglist()","sass::scss::parser#mixin_directive()","sass::script::functions#mixin_exists()","sass::script::value::color#mod()","sass::script::value::number#mod()","sass::syntaxerror#modify_backtrace()","sass::scss::parser#moz_document_function()","sass::scss::staticparser#moz_document_function()","sass::importers::base#mtime()","sass::importers::filesystem#mtime()","sass::plugin::stalenesschecker#mtime()","sass::tree::directivenode#name()","sass::tree::medianode#name()","sass::script::value::list#needs_map_warning?()","sass::script::value::base#neq()","sass::script::value::deprecatedfalse#neq()","sass::script::value::null#neq()","sass::css#nest_seqs()","sass::scss::cssparser#nested_properties!()","sass::scss::parser#nested_properties!()","orderedhash::new()","sass::baseenvironment::new()","sass::css::new()","sass::cachestores::chain::new()","sass::cachestores::filesystem::new()","sass::cachestores::memory::new()","sass::cachestores::null::new()","sass::engine::new()","sass::exec::generic::new()","sass::exec::sass::new()","sass::exec::sassconvert::new()","sass::exec::scss::new()","sass::importers::deprecatedpath::new()","sass::importers::filesystem::new()","sass::logger::base::new()","sass::media::query::new()","sass::media::querylist::new()","sass::plugin::compiler::new()","sass::plugin::rack::new()","sass::plugin::stalenesschecker::new()","sass::repl::new()","sass::scss::parser::new()","sass::script::functions::evaluationcontext::new()","sass::script::lexer::new()","sass::script::parser::new()","sass::script::tree::funcall::new()","sass::script::tree::interpolation::new()","sass::script::tree::listliteral::new()","sass::script::tree::literal::new()","sass::script::tree::mapliteral::new()","sass::script::tree::operation::new()","sass::script::tree::stringinterpolation::new()","sass::script::tree::unaryoperation::new()","sass::script::tree::variable::new()","sass::script::value::arglist::new()","sass::script::value::base::new()","sass::script::value::bool::new()","sass::script::value::color::new()","sass::script::value::deprecatedfalse::new()","sass::script::value::deprecatedfalse::new()","sass::script::value::list::new()","sass::script::value::map::new()","sass::script::value::null::new()","sass::script::value::number::new()","sass::script::value::string::new()","sass::selector::attribute::new()","sass::selector::class::new()","sass::selector::commasequence::new()","sass::selector::element::new()","sass::selector::id::new()","sass::selector::interpolation::new()","sass::selector::parent::new()","sass::selector::placeholder::new()","sass::selector::pseudo::new()","sass::selector::selectorpseudoclass::new()","sass::selector::sequence::new()","sass::selector::simplesequence::new()","sass::selector::universal::new()","sass::source::map::new()","sass::source::position::new()","sass::source::range::new()","sass::stack::new()","sass::stack::frame::new()","sass::supports::declaration::new()","sass::supports::interpolation::new()","sass::supports::negation::new()","sass::supports::operator::new()","sass::syntaxerror::new()","sass::tree::atrootnode::new()","sass::tree::charsetnode::new()","sass::tree::commentnode::new()","sass::tree::cssimportnode::new()","sass::tree::debugnode::new()","sass::tree::directivenode::new()","sass::tree::eachnode::new()","sass::tree::extendnode::new()","sass::tree::fornode::new()","sass::tree::functionnode::new()","sass::tree::ifnode::new()","sass::tree::importnode::new()","sass::tree::medianode::new()","sass::tree::mixindefnode::new()","sass::tree::mixinnode::new()","sass::tree::node::new()","sass::tree::propnode::new()","sass::tree::returnnode::new()","sass::tree::rootnode::new()","sass::tree::rulenode::new()","sass::tree::supportsnode::new()","sass::tree::tracenode::new()","sass::tree::variablenode::new()","sass::tree::visitors::checknesting::new()","sass::tree::visitors::convert::new()","sass::tree::visitors::cssize::new()","sass::tree::visitors::cssize::bubble::new()","sass::tree::visitors::extend::new()","sass::tree::visitors::perform::new()","sass::tree::visitors::setoptions::new()","sass::tree::visitors::tocss::new()","sass::tree::warnnode::new()","sass::tree::whilenode::new()","sass::util::crossplatformrandom::new()","sass::util::multibytestringscanner::new()","sass::util::multibytestringscanner::new()","sass::util::normalizedmap::new()","sass::util::staticconditionalcontext::new()","sass::util::subsetmap::new()","sass::script::lexer#next()","sass::scss::parser#node()","sass::script::parser#node()","sass::tree::visitors::base::node_name()","sass::util::normalizedmap#normalize()","sass::script::value::number#normalize!()","sass::tree::commentnode#normalize_indentation()","sass::engine::normalize_options()","sass::plugin::configuration#normalize_template_location!()","sass::plugin::compiler#normalized_load_paths()","sass::script::functions#nth()","sass::script::value::helpers#null()","sass::script::value::base#null?()","sass::script::value::null#null?()","sass::script::parser#number()","sass::script::value::helpers#number()","sass::script::functions#numeric_transformation()","sass::script::lexer#offset()","sass::script::parser#offset()","sass::plugin::compiler#on_file_changed()","sass::script::functions#opacify()","sass::script::functions#opacity()","sass::exec::generic#open_file()","sass::script::tree::operation#operand_to_sass()","sass::script::value::number#operate()","sass::scss::parser#operator()","sass::tree::extendnode#optional?()","sass::plugin#options()","sass::plugin::configuration#options()","sass::script::value::base#options()","sass::script::tree::literal#options=()","sass::script::tree::node#options=()","sass::script::value::list#options=()","sass::script::value::map#options=()","sass::supports::condition#options=()","sass::supports::declaration#options=()","sass::supports::interpolation#options=()","sass::supports::negation#options=()","sass::supports::operator#options=()","sass::tree::node#options=()","sass::tree::importnode#options_for_importer()","sass::script::tree::node#opts()","sass::util#ord()","sass::util#ordered_hash()","sass::tree::visitors::tocss#output()","sass::script::cssparser#paren()","sass::script::parser#paren()","sass::supports::negation#parens()","sass::tree::visitors::cssize#parent()","sass::css#parent_ref_rules()","sass::scss::cssparser#parent_selector()","sass::scss::parser#parent_selector()","sass::selector::sequence#parent_superselector?()","sass::exec::generic#parse()","sass::scss::parser#parse()","sass::script::parse()","sass::script::parser::parse()","sass::script::parser#parse()","sass::exec::generic#parse!()","sass::engine#parse_at_root_directive()","sass::scss::parser#parse_at_root_query()","sass::engine#parse_charset_directive()","sass::engine#parse_comment()","sass::engine#parse_content_directive()","sass::engine#parse_debug_directive()","sass::engine#parse_directive()","sass::engine#parse_each_directive()","sass::engine#parse_else_directive()","sass::engine#parse_extend_directive()","sass::engine#parse_for_directive()","sass::script::parser#parse_function_definition_arglist()","sass::engine#parse_function_directive()","sass::engine#parse_if_directive()","sass::engine#parse_import_arg()","sass::engine#parse_import_directive()","sass::engine#parse_include_directive()","sass::repl#parse_input()","sass::engine#parse_interp()","sass::engine::parse_interp()","sass::scss::parser#parse_interp_ident()","sass::script::parser#parse_interpolated()","sass::engine#parse_line()","sass::engine#parse_media_directive()","sass::scss::parser#parse_media_query_list()","sass::engine#parse_mixin_definition()","sass::script::parser#parse_mixin_definition_arglist()","sass::engine#parse_mixin_directive()","sass::engine#parse_mixin_include()","sass::script::parser#parse_mixin_include_arglist()","sass::engine#parse_property()","sass::engine#parse_property_or_rule()","sass::engine#parse_return_directive()","sass::engine#parse_script()","sass::scss::staticparser#parse_selector()","sass::css#parse_selectors()","sass::scss::staticparser#parse_static_at_root_query()","sass::script::tree::stringinterpolation#parse_str()","sass::script::parser#parse_string()","sass::scss::parser#parse_supports_condition()","sass::script::value::helpers#parse_unit_string()","sass::script::parser#parse_until()","sass::engine#parse_variable()","sass::engine#parse_warn_directive()","sass::engine#parse_while_directive()","sass::selector::sequence#path_has_two_subjects?()","sass::cachestores::filesystem#path_to()","sass::util#pathname()","sass::util#paths()","sass::script::lexer#peek()","sass::util::multibytestringscanner#peek()","sass::util::multibytestringscanner#peep()","sass::script::functions#percentage()","sass::script::functions::evaluationcontext#perform()","sass::script::tree::node#perform()","sass::supports::condition#perform()","sass::supports::declaration#perform()","sass::supports::interpolation#perform()","sass::supports::negation#perform()","sass::supports::operator#perform()","sass::script::tree::funcall#perform_arg()","sass::tree::visitors::perform#perform_arguments()","sass::script::tree::funcall#perform_sass_fn()","sass::tree::visitors::perform#perform_splat()","sass::script::value::color#piecewise()","sass::scss::cssparser#placeholder_selector()","sass::scss::parser#placeholder_selector()","sass::script::value::base#plus()","sass::script::value::color#plus()","sass::script::value::number#plus()","sass::script::value::string#plus()","sass::util::multibytestringscanner#pointer()","sass::util::multibytestringscanner#pos()","sass::util::multibytestringscanner#pos=()","sass::importers::filesystem#possible_files()","sass::util#powerset()","sass::script::parser#precedence_of()","sass::script::value::number::precision()","sass::script::value::number::precision=()","sass::script::value::number::precision_factor()","sass::scss::parser#prefixed_directive()","sass::tree::visitors::tocss#prepend!()","sass::exec::sass#probably_dest_dir?()","sass::scss::parser#process_comment()","sass::exec::sassconvert#process_directory()","sass::exec::sassconvert#process_file()","sass::exec::generic#process_result()","sass::exec::sass#process_result()","sass::exec::sassconvert#process_result()","sass::script::parser#production()","sass::scss::parser#pseudo()","sass::scss::parser#pseudo_arg()","sass::tree::propnode#pseudo_class_selector_message()","sass::selector::simplesequence#pseudo_elements()","sass::scss::parser#pseudo_expr()","sass::scss::parser#pseudo_expr_token()","sass::importers::base#public_url()","sass::importers::filesystem#public_url()","sass::exec::generic#puts()","sass::exec::generic#puts_action()","sass::scss::parser#qualified_name()","sass::scss::parser#query_expr()","sass::tree::visitors::convert#query_interp_to_src()","sass::scss::rx::quote()","sass::script::functions#quote()","sass::script::value::helpers#quoted_string()","sass::util#rails_env()","sass::util#rails_root()","sass::util::crossplatformrandom#rand()","sass::script::functions#random()","sass::script::functions::random_number_generator()","sass::script::functions::random_seed=()","sass::scss::parser#range()","sass::script::parser#range()","sass::script::parser#raw()","sass::util#rbx?()","sass::script::lexer#read_token()","sass::script::functions#red()","sass::script::value::color#red()","sass::scss::parser#reference_combinator()","sass::script::tree::funcall#reformat_argument_error()","orderedhash#reject()","orderedhash#reject!()","sass::plugin::compiler#relative_to_pwd()","sass::plugin::compiler#remove_redundant_directories()","sass::importers::filesystem#remove_root()","sass::plugin::configuration#remove_template_location()","sass::css#render()","sass::engine#render()","sass::tree::rootnode#render()","sass::engine#render_with_sourcemap()","sass::tree::rootnode#render_with_sourcemap()","orderedhash#replace()","sass::util#replace_subseq()","sass::util::multibytestringscanner#reset()","sass::cachestores::memory#reset!()","sass::plugin::configuration#reset!()","sass::selector::commasequence#resolve_parent_refs()","sass::selector::sequence#resolve_parent_refs()","sass::selector::simplesequence#resolve_parent_refs()","sass::tree::cssimportnode::resolved()","sass::tree::directivenode::resolved()","sass::media::query#resolved_modifier()","sass::media::query#resolved_type()","sass::tree::cssimportnode#resolved_value()","sass::tree::medianode#resolved_value()","sass::tree::supportsnode#resolved_value()","sass::plugin#respond_to?()","sass::util::normalizedmap#respond_to?()","sass::util::normalizedmap#respond_to_missing?()","sass::selector::simplesequence#rest()","sass::util::multibytestringscanner#rest_size()","sass::util#restrict()","sass::scss::parser#rethrow()","sass::cachestores::base#retrieve()","sass::cachestores::chain#retrieve()","sass::cachestores::memory#retrieve()","sass::scss::parser#return_directive()","sass::version#revision_number()","sass::script::functions#rgb()","sass::script::value::color#rgb()","sass::script::value::helpers#rgb_color()","sass::script::value::color#rgb_to_hsl!()","sass::script::functions#rgba()","sass::script::value::color#rgba()","sass::script::value::color#rgba_str()","sass::supports::operator#right_parens()","sass::script::functions#round()","sass::script::value::number::round()","sass::tree::visitors::tocss#rstrip!()","sass::util#ruby1?()","sass::util#ruby1_8?()","sass::util#ruby1_8_6?()","sass::script::tree::funcall#ruby_name()","sass::scss::parser#ruleset()","sass::plugin::merbbootloader::run()","sass::repl#run()","sass::tree::visitors::perform#run_interp()","sass::tree::visitors::perform#run_interp_no_strip()","sass::scss::parser#s()","sass::script::value::number#sans_common_units()","sass::syntaxerror#sass_backtrace_str()","sass::syntaxerror#sass_filename()","sass::syntaxerror#sass_line()","sass::syntaxerror#sass_mixin()","sass::scss::parser#sass_script()","sass::util#sass_warn()","sass::engine#sassc_key()","sass::script::functions#saturate()","sass::script::functions#saturation()","sass::script::value::color#saturation()","sass::script::functions#scale_color()","sass::util::multibytestringscanner#scan()","sass::util::multibytestringscanner#scan_full()","sass::util::multibytestringscanner#scan_until()","sass::util#scope()","sass::scss::staticparser#script_value()","sass::util::multibytestringscanner#search_full()","sass::baseenvironment#selector()","sass::scss::parser#selector()","sass::script::parser#selector()","sass::scss::parser#selector_comma_sequence()","sass::scss::parser#selector_sequence()","sass::tree::visitors::convert#selector_to_sass()","sass::tree::visitors::convert#selector_to_scss()","sass::tree::visitors::convert#selector_to_src()","sass::tree::visitors::convert#semi()","sass::script::tree::listliteral#sep_str()","sass::script::value::list#sep_str()","sass::script::value::base#separator()","sass::script::value::map#separator()","sass::util#set_eql?()","sass::util#set_hash()","sass::script::functions#set_nth()","sass::exec::generic#set_opts()","sass::exec::sass#set_opts()","sass::exec::sassconvert#set_opts()","orderedhash#shift()","sass::source::map#shift_output_lines()","sass::source::map#shift_output_offsets()","sass::script::functions::signature()","sass::script::tree::funcall#signature()","sass::util#silence_sass_warnings()","sass::util#silence_warnings()","sass::scss::parser#simple_selector_sequence()","sass::script::value::base#single_eq()","sass::util::normalizedmap#size()","sass::util::multibytestringscanner#skip()","sass::util::test#skip()","sass::util::multibytestringscanner#skip_until()","sass::util#slice_by()","sass::script::value::color#smallest()","sass::util::normalizedmap#sort_by()","sass::css#source_encoding()","sass::engine#source_encoding()","sass::scss::parser#source_position()","sass::script::parser#source_position()","sass::util#sourcemap_name()","sass::script::parser#space()","sass::scss::parser#special_directive()","sass::scss::staticparser#special_directive()","sass::script::parser#special_fun()","sass::selector::abstractsequence#specificity()","sass::selector::attribute#specificity()","sass::selector::class#specificity()","sass::selector::element#specificity()","sass::selector::id#specificity()","sass::selector::placeholder#specificity()","sass::selector::pseudo#specificity()","sass::selector::selectorpseudoclass#specificity()","sass::selector::universal#specificity()","sass::importers::filesystem#split()","sass::exec::sass#split_colon_path()","sass::scss::parser#ss()","sass::scss::parser#ss_comments()","sass::baseenvironment#stack()","sass::cachestores::base#store()","sass::cachestores::chain#store()","sass::cachestores::memory#store()","sass::scss::parser#str()","sass::script::lexer#str()","sass::scss::parser#str?()","sass::script::functions#str_index()","sass::script::functions#str_insert()","sass::script::functions#str_length()","sass::script::functions#str_slice()","sass::script::csslexer#string()","sass::script::cssparser#string()","sass::script::lexer#string()","sass::script::parser#string()","sass::util::multibytestringscanner#string=()","sass::script::lexer#string_re()","sass::util#strip_string_array()","sass::tree::node#style()","sass::scss::parser#stylesheet()","sass::plugin::stalenesschecker::stylesheet_modified_since?()","sass::plugin::stalenesschecker#stylesheet_modified_since?()","sass::plugin::compiler#stylesheet_needs_update?()","sass::plugin::stalenesschecker#stylesheet_needs_update?()","sass::plugin::stalenesschecker::stylesheet_needs_update?()","sass::selector::simplesequence#subject?()","sass::util#subsequence?()","sass::util#substitute()","sass::selector::sequence#subweave()","sass::selector::sequence#superselector?()","sass::selector::simplesequence#superselector?()","sass::scss::parser#supports_condition()","sass::scss::parser#supports_condition_in_parens()","sass::scss::parser#supports_declaration_condition()","sass::scss::parser#supports_directive()","sass::scss::parser#supports_interpolation()","sass::scss::parser#supports_negation()","sass::scss::parser#supports_operator()","orderedhash#sync_keys!()","sass::tree::visitors::convert#tab_str()","sass::engine#tabulate()","sass::plugin::configuration#template_location_array()","sass::plugin::compiler#template_locations()","sass::scss::parser#term()","sass::util::multibytestringscanner#terminate()","sass::scss::parser#throw_error()","sass::script::value::color#times()","sass::script::value::number#times()","orderedhash#to_a()","sass::media::query#to_a()","sass::media::querylist#to_a()","sass::script::value::base#to_a()","sass::script::value::map#to_a()","sass::selector::attribute#to_a()","sass::selector::class#to_a()","sass::selector::commasequence#to_a()","sass::selector::element#to_a()","sass::selector::id#to_a()","sass::selector::interpolation#to_a()","sass::selector::parent#to_a()","sass::selector::placeholder#to_a()","sass::selector::pseudo#to_a()","sass::selector::selectorpseudoclass#to_a()","sass::selector::sequence#to_a()","sass::selector::simple#to_a()","sass::selector::simplesequence#to_a()","sass::selector::universal#to_a()","sass::util::normalizedmap#to_a()","sass::script::value::base#to_bool()","sass::script::value::null#to_bool()","sass::engine#to_css()","sass::media::query#to_css()","sass::media::querylist#to_css()","sass::supports::condition#to_css()","sass::supports::declaration#to_css()","sass::supports::interpolation#to_css()","sass::supports::negation#to_css()","sass::supports::operator#to_css()","sass::script::functions#to_h()","sass::script::value::base#to_h()","sass::script::value::list#to_h()","orderedhash#to_hash()","sass::util#to_hash()","sass::util::normalizedmap#to_hash()","sass::script::value::base#to_i()","sass::script::value::number#to_i()","sass::source::map#to_json()","sass::script::tree::funcall#to_literal()","sass::script::functions#to_lower_case()","sass::engine#to_parser_offset()","sass::exec::generic#to_s()","sass::importers::base#to_s()","sass::importers::deprecatedpath#to_s()","sass::importers::filesystem#to_s()","sass::script::value::base#to_s()","sass::script::value::bool#to_s()","sass::script::value::color#to_s()","sass::script::value::list#to_s()","sass::script::value::map#to_s()","sass::script::value::null#to_s()","sass::script::value::number#to_s()","sass::script::value::string#to_s()","sass::selector::abstractsequence#to_s()","sass::selector::simple#to_s()","sass::stack#to_s()","sass::syntaxerror#to_s()","sass::script::tree::funcall#to_sass()","sass::script::tree::interpolation#to_sass()","sass::script::tree::listliteral#to_sass()","sass::script::tree::literal#to_sass()","sass::script::tree::mapliteral#to_sass()","sass::script::tree::node#to_sass()","sass::script::tree::operation#to_sass()","sass::script::tree::stringinterpolation#to_sass()","sass::script::tree::unaryoperation#to_sass()","sass::script::tree::variable#to_sass()","sass::script::value::base#to_sass()","sass::script::value::bool#to_sass()","sass::script::value::color#to_sass()","sass::script::value::list#to_sass()","sass::script::value::map#to_sass()","sass::script::value::null#to_sass()","sass::script::value::number#to_sass()","sass::script::value::string#to_sass()","sass::tree::node#to_sass()","sass::tree::node#to_scss()","sass::media::query#to_src()","sass::media::querylist#to_src()","sass::supports::condition#to_src()","sass::supports::declaration#to_src()","sass::supports::interpolation#to_src()","sass::supports::negation#to_src()","sass::supports::operator#to_src()","sass::engine#to_tree()","sass::script::functions#to_upper_case()","sass::script::tree::funcall#to_value()","sass::scss::parser#tok()","sass::scss::parser#tok!()","sass::scss::parser#tok?()","sass::script::csslexer#token()","sass::script::lexer#token()","sass::tree::visitors::checknesting#transparent_parent?()","sass::script::functions#transparentize()","sass::engine#tree()","sass::plugin::stalenesschecker#tree()","sass::selector::sequence#trim()","sass::engine#try_comment()","sass::plugin::compiler#try_delete_css()","sass::script::parser#try_op_before_interp()","sass::script::parser#try_ops_after_interp()","sass::tree::visitors::checknesting#try_send()","sass::tree::rulenode#try_to_parse_non_interpolated_rules()","sass::script::parser#try_tok()","sass::script::parser#try_toks()","sass::selector::pseudo#type()","sass::script::functions#type_of()","sass::script::parser#unary()","sass::script::value::base#unary_div()","sass::script::value::base#unary_minus()","sass::script::value::number#unary_minus()","sass::script::value::base#unary_not()","sass::script::value::base#unary_plus()","sass::script::value::number#unary_plus()","sass::util#undefined_conversion_error_char()","sass::selector::element#unify()","sass::selector::id#unify()","sass::selector::interpolation#unify()","sass::selector::parent#unify()","sass::selector::pseudo#unify()","sass::selector::simple#unify()","sass::selector::simplesequence#unify()","sass::selector::universal#unify()","sass::selector::simple#unify_namespaces()","sass::script::functions#unique_id()","sass::script::functions#unit()","sass::script::value::number#unit_str()","sass::script::functions#unitless()","sass::script::value::number#unitless?()","sass::script::lexer#unpeek!()","sass::script::functions#unquote()","sass::script::value::helpers#unquoted_string()","sass::util::multibytestringscanner#unscan()","orderedhash#update()","sass::util::normalizedmap#update()","sass::plugin::compiler#update_stylesheet()","sass::plugin#update_stylesheets()","sass::plugin::compiler#update_stylesheets()","sass::scss::cssparser#use_css_import?()","sass::scss::parser#use_css_import?()","sass::scss::staticparser#use_css_import?()","sass::tree::propnode#val_to_sass()","sass::tree::propnode#val_to_sass_comma()","sass::tree::propnode#val_to_sass_concat()","sass::tree::propnode#val_to_sass_div()","sass::engine#validate_and_append_child()","sass::tree::cssimportnode#value()","sass::tree::medianode#value()","sass::tree::supportsnode#value()","sass::scss::parser#value!()","orderedhash#values()","sass::util::normalizedmap#values()","sass::scss::parser#var_expr()","sass::scss::staticparser#var_expr()","sass::scss::parser#variable()","sass::scss::scriptlexer#variable()","sass::scss::staticparser#variable()","sass::script::lexer#variable()","sass::script::parser#variable()","sass::script::functions#variable_exists()","sass::version#version()","sass::version#version_date()","sass::util#version_geq()","sass::util#version_gt()","sass::tree::visitors::base#visit()","sass::tree::visitors::base::visit()","sass::tree::visitors::checknesting#visit()","sass::tree::visitors::convert::visit()","sass::tree::visitors::cssize#visit()","sass::tree::visitors::cssize::visit()","sass::tree::visitors::deepcopy#visit()","sass::tree::visitors::extend#visit()","sass::tree::visitors::extend::visit()","sass::tree::visitors::perform#visit()","sass::tree::visitors::setoptions#visit()","sass::tree::visitors::setoptions::visit()","sass::tree::visitors::tocss#visit()","sass::tree::visitors::convert#visit_atroot()","sass::tree::visitors::cssize#visit_atroot()","sass::tree::visitors::perform#visit_atroot()","sass::tree::visitors::convert#visit_charset()","sass::tree::visitors::tocss#visit_charset()","sass::tree::visitors::base#visit_children()","sass::tree::visitors::checknesting#visit_children()","sass::tree::visitors::convert#visit_children()","sass::tree::visitors::cssize#visit_children()","sass::tree::visitors::deepcopy#visit_children()","sass::tree::visitors::extend#visit_children()","sass::tree::visitors::perform#visit_children()","sass::tree::visitors::cssize#visit_children_without_parent()","sass::tree::visitors::convert#visit_comment()","sass::tree::visitors::perform#visit_comment()","sass::tree::visitors::setoptions#visit_comment()","sass::tree::visitors::tocss#visit_comment()","sass::tree::visitors::convert#visit_content()","sass::tree::visitors::perform#visit_content()","sass::tree::visitors::convert#visit_cssimport()","sass::tree::visitors::perform#visit_cssimport()","sass::tree::visitors::setoptions#visit_cssimport()","sass::tree::visitors::tocss#visit_cssimport()","sass::tree::visitors::convert#visit_debug()","sass::tree::visitors::deepcopy#visit_debug()","sass::tree::visitors::perform#visit_debug()","sass::tree::visitors::setoptions#visit_debug()","sass::tree::visitors::convert#visit_directive()","sass::tree::visitors::cssize#visit_directive()","sass::tree::visitors::deepcopy#visit_directive()","sass::tree::visitors::perform#visit_directive()","sass::tree::visitors::setoptions#visit_directive()","sass::tree::visitors::tocss#visit_directive()","sass::tree::visitors::convert#visit_each()","sass::tree::visitors::deepcopy#visit_each()","sass::tree::visitors::perform#visit_each()","sass::tree::visitors::setoptions#visit_each()","sass::tree::visitors::convert#visit_extend()","sass::tree::visitors::cssize#visit_extend()","sass::tree::visitors::deepcopy#visit_extend()","sass::tree::visitors::perform#visit_extend()","sass::tree::visitors::setoptions#visit_extend()","sass::tree::visitors::convert#visit_for()","sass::tree::visitors::deepcopy#visit_for()","sass::tree::visitors::perform#visit_for()","sass::tree::visitors::setoptions#visit_for()","sass::tree::visitors::convert#visit_function()","sass::tree::visitors::deepcopy#visit_function()","sass::tree::visitors::perform#visit_function()","sass::tree::visitors::setoptions#visit_function()","sass::tree::visitors::base#visit_if()","sass::tree::visitors::convert#visit_if()","sass::tree::visitors::deepcopy#visit_if()","sass::tree::visitors::perform#visit_if()","sass::tree::visitors::setoptions#visit_if()","sass::tree::visitors::checknesting#visit_import()","sass::tree::visitors::convert#visit_import()","sass::tree::visitors::cssize#visit_import()","sass::tree::visitors::perform#visit_import()","sass::tree::visitors::setoptions#visit_import()","sass::tree::visitors::convert#visit_media()","sass::tree::visitors::cssize#visit_media()","sass::tree::visitors::deepcopy#visit_media()","sass::tree::visitors::perform#visit_media()","sass::tree::visitors::setoptions#visit_media()","sass::tree::visitors::tocss#visit_media()","sass::tree::visitors::convert#visit_mixin()","sass::tree::visitors::deepcopy#visit_mixin()","sass::tree::visitors::perform#visit_mixin()","sass::tree::visitors::setoptions#visit_mixin()","sass::tree::visitors::checknesting#visit_mixindef()","sass::tree::visitors::convert#visit_mixindef()","sass::tree::visitors::deepcopy#visit_mixindef()","sass::tree::visitors::perform#visit_mixindef()","sass::tree::visitors::setoptions#visit_mixindef()","sass::tree::visitors::convert#visit_prop()","sass::tree::visitors::cssize#visit_prop()","sass::tree::visitors::deepcopy#visit_prop()","sass::tree::visitors::perform#visit_prop()","sass::tree::visitors::setoptions#visit_prop()","sass::tree::visitors::tocss#visit_prop()","sass::tree::visitors::convert#visit_return()","sass::tree::visitors::deepcopy#visit_return()","sass::tree::visitors::perform#visit_return()","sass::tree::visitors::setoptions#visit_return()","sass::tree::visitors::checknesting#visit_root()","sass::tree::visitors::convert#visit_root()","sass::tree::visitors::cssize#visit_root()","sass::tree::visitors::perform#visit_root()","sass::tree::visitors::tocss#visit_root()","sass::tree::visitors::convert#visit_rule()","sass::tree::visitors::cssize#visit_rule()","sass::tree::visitors::deepcopy#visit_rule()","sass::tree::visitors::extend#visit_rule()","sass::tree::visitors::perform#visit_rule()","sass::tree::visitors::setoptions#visit_rule()","sass::tree::visitors::tocss#visit_rule()","sass::tree::visitors::convert#visit_supports()","sass::tree::visitors::cssize#visit_supports()","sass::tree::visitors::deepcopy#visit_supports()","sass::tree::visitors::perform#visit_supports()","sass::tree::visitors::setoptions#visit_supports()","sass::tree::visitors::tocss#visit_supports()","sass::tree::visitors::cssize#visit_trace()","sass::tree::visitors::convert#visit_variable()","sass::tree::visitors::deepcopy#visit_variable()","sass::tree::visitors::perform#visit_variable()","sass::tree::visitors::setoptions#visit_variable()","sass::tree::visitors::convert#visit_warn()","sass::tree::visitors::deepcopy#visit_warn()","sass::tree::visitors::perform#visit_warn()","sass::tree::visitors::setoptions#visit_warn()","sass::tree::visitors::convert#visit_while()","sass::tree::visitors::deepcopy#visit_while()","sass::tree::visitors::perform#visit_while()","sass::tree::visitors::setoptions#visit_while()","sass::importers::filesystem#warn_about_public_url()","sass::scss::parser#warn_directive()","sass::script::value::deprecatedfalse#warned=()","sass::script::value::deprecatedfalse#warned?()","sass::cachestores::null#was_set?()","sass::plugin::compiler#watch()","sass::exec::sass#watch_or_update()","sass::importers::base#watched_file?()","sass::importers::filesystem#watched_file?()","sass::plugin::compiler#watched_file?()","sass::plugin::compiler#watched_paths()","sass::selector::sequence#weave()","sass::scss::parser#while_directive()","sass::scss::parser#whitespace()","sass::script::lexer#whitespace()","sass::script::lexer#whitespace?()","sass::util#windows?()","sass::script::value::color#with()","sass::stack#with_base()","sass::plugin::stalenesschecker#with_dependency_cache()","sass::tree::visitors::perform#with_environment()","sass::util#with_extracted_values()","sass::stack#with_frame()","sass::stack#with_import()","sass::stack#with_mixin()","sass::selector::simplesequence#with_more_sources()","sass::tree::visitors::cssize#with_parent()","sass::tree::visitors::tocss#with_tabs()","sass::script::tree::funcall#without_original()","sass::plugin::compiler#write_file()","sass::source::map#write_json_field()","sass::exec::generic#write_output()","sass::script::functions#zip()"],"info":[["ActionController","","ActionController.html","",""],["ActionController::Base","","ActionController/Base.html","",""],["Merb","","Merb.html","",""],["Merb::BootLoader","","Merb/BootLoader.html","",""],["Object","","Object.html","",""],["OrderedHash","","OrderedHash.html","","<p>This class was copied from an old version of ActiveSupport.\n"],["Sass","","Sass.html","","<p>The module that contains everything Sass-related:\n<p>{Sass::Engine} is the class used to render Sass/SCSS …\n"],["Sass::BaseEnvironment","","Sass/BaseEnvironment.html","","<p>The abstract base class for lexical environments for SassScript.\n"],["Sass::CSS","","Sass/CSS.html","","<p>This class converts CSS documents into Sass or SCSS templates. It works by\nparsing the CSS document into …\n"],["Sass::CacheStores","","Sass/CacheStores.html","","<p>Sass cache stores are in charge of storing cached information, especially\nparse trees for Sass documents. …\n"],["Sass::CacheStores::Base","","Sass/CacheStores/Base.html","","<p>An abstract base class for backends for the Sass cache. Any key-value store\ncan act as such a backend; …\n"],["Sass::CacheStores::Chain","","Sass/CacheStores/Chain.html","","<p>A meta-cache that chains multiple caches together. Specifically:\n<p>All `#store`s are passed to all caches. …\n"],["Sass::CacheStores::Filesystem","","Sass/CacheStores/Filesystem.html","","<p>A backend for the Sass cache using the filesystem.\n"],["Sass::CacheStores::Memory","","Sass/CacheStores/Memory.html","","<p>A backend for the Sass cache using in-process memory.\n"],["Sass::CacheStores::Null","","Sass/CacheStores/Null.html","","<p>Doesn’t store anything, but records what things it should have stored. This\ndoesn’t currently have any …\n"],["Sass::Callbacks","","Sass/Callbacks.html","","<p>A lightweight infrastructure for defining and running callbacks. Callbacks\nare defined using {#define_callback} …\n"],["Sass::Callbacks::InstanceMethods","","Sass/Callbacks/InstanceMethods.html","",""],["Sass::Engine","","Sass/Engine.html","","<p>This class handles the parsing and compilation of the Sass template.\nExample usage:\n\n<pre>template = File.load('stylesheets/sassy.sass') ...</pre>\n"],["Sass::Engine::Line","","Sass/Engine/Line.html","","<p>A line of Sass code.\n<p>`text`: `String` : The text in the line, without any whitespace at the\nbeginning …\n"],["Sass::Environment","","Sass/Environment.html","","<p>The lexical environment for SassScript. This keeps track of variable,\nmixin, and function definitions. …\n"],["Sass::Exec","","Sass/Exec.html","","<p>This module handles the various Sass executables (`sass` and\n`sass-convert`).\n"],["Sass::Exec::Generic","","Sass/Exec/Generic.html","","<p>An abstract class that encapsulates the executable code for all three\nexecutables.\n"],["Sass::Exec::Sass","","Sass/Exec/Sass.html","","<p>The `sass` executable.\n"],["Sass::Exec::SassConvert","","Sass/Exec/SassConvert.html","","<p>The `sass-convert` executable.\n"],["Sass::Exec::Scss","","Sass/Exec/Scss.html","",""],["Sass::Features","","Sass/Features.html","","<p>Provides `Sass.has_feature?` which allows for simple feature detection by\nproviding a feature name.\n"],["Sass::Importers","","Sass/Importers.html","","<p>Sass importers are in charge of taking paths passed to `@import` and\nfinding the appropriate Sass code …\n"],["Sass::Importers::Base","","Sass/Importers/Base.html","","<p>The abstract base class for Sass importers. All importers should inherit\nfrom this.\n<p>At the most basic …\n"],["Sass::Importers::DeprecatedPath","","Sass/Importers/DeprecatedPath.html","","<p>This importer emits a deprecation warning the first time it is used to\nimport a file. It is used to deprecate …\n"],["Sass::Importers::Filesystem","","Sass/Importers/Filesystem.html","","<p>The default importer, used for any strings found in the load path. Simply\nloads Sass files from the filesystem …\n"],["Sass::Logger","","Sass/Logger.html","",""],["Sass::Logger::Base","","Sass/Logger/Base.html","",""],["Sass::Logger::LogLevel","","Sass/Logger/LogLevel.html","",""],["Sass::Logger::LogLevel::ClassMethods","","Sass/Logger/LogLevel/ClassMethods.html","",""],["Sass::Media","","Sass/Media.html","","<p>A namespace for the `@media` query parse tree.\n"],["Sass::Media::Query","","Sass/Media/Query.html","","<p>A single media query.\n\n<pre>[ [ONLY | NOT]? S* media_type S* | expression ] [ AND S* expression ]*</pre>\n"],["Sass::Media::QueryList","","Sass/Media/QueryList.html","","<p>A comma-separated list of queries.\n\n<pre>media_query [ ',' S* media_query ]*</pre>\n"],["Sass::Plugin","","Sass/Plugin.html","","<p>This module provides a single interface to the compilation of Sass/SCSS\nfiles for an application. It …\n"],["Sass::Plugin::Compiler","","Sass/Plugin/Compiler.html","","<p>The Compiler class handles compilation of multiple files and/or\ndirectories, including checking which …\n"],["Sass::Plugin::Configuration","","Sass/Plugin/Configuration.html","","<p>We keep configuration in its own self-contained file so that we can load it\nindependently in Rails 3, …\n"],["Sass::Plugin::MerbBootLoader","","Sass/Plugin/MerbBootLoader.html","",""],["Sass::Plugin::Rack","","Sass/Plugin/Rack.html","","<p>Rack middleware for compiling Sass code.\n<p>## Activate\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'sass/plugin/rack'</span>\n<span class=\"ruby-identifier\">use</span> <span class=\"ruby-constant\">Sass</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Plugin</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Rack</span>\n</pre>\n"],["Sass::Plugin::StalenessChecker","","Sass/Plugin/StalenessChecker.html","","<p>The class handles `.sss` file staleness checks via their mtime timestamps.\n<p>To speed things up two level …\n"],["Sass::ReadOnlyEnvironment","","Sass/ReadOnlyEnvironment.html","","<p>A read-only wrapper for a lexical environment for SassScript.\n"],["Sass::Repl","","Sass/Repl.html","","<p>Runs a SassScript read-eval-print loop. It presents a prompt on the\nterminal, reads in SassScript expressions, …\n"],["Sass::SCSS","","Sass/SCSS.html","","<p>SCSS is the CSS syntax for Sass. It parses into the same syntax tree as\nSass, and generates the same …\n"],["Sass::SCSS::CssParser","","Sass/SCSS/CssParser.html","","<p>This is a subclass of {Parser} which only parses plain CSS. It doesn’t\nsupport any Sass extensions, such …\n"],["Sass::SCSS::Parser","","Sass/SCSS/Parser.html","","<p>The parser for SCSS. It parses a string of code into a tree of\n{Sass::Tree::Node}s.\n"],["Sass::SCSS::RX","","Sass/SCSS/RX.html","","<p>A module containing regular expressions used for lexing tokens in an SCSS\ndocument. Most of these are …\n"],["Sass::SCSS::ScriptLexer","","Sass/SCSS/ScriptLexer.html","","<p>A mixin for subclasses of {Sass::Script::Lexer} that makes them usable by\n{SCSS::Parser} to parse SassScript …\n"],["Sass::SCSS::ScriptParser","","Sass/SCSS/ScriptParser.html","","<p>A mixin for subclasses of {Sass::Script::Parser} that makes them usable by\n{SCSS::Parser} to parse SassScript …\n"],["Sass::SCSS::StaticParser","","Sass/SCSS/StaticParser.html","","<p>A parser for a static SCSS tree. Parses with SCSS extensions, like nested\nrules and parent selectors, …\n"],["Sass::Script","","Sass/Script.html","","<p>SassScript is code that’s embedded in Sass documents to allow for property\nvalues to be computed from …\n"],["Sass::Script::CssLexer","","Sass/Script/CssLexer.html","","<p>This is a subclass of {Lexer} for use in parsing plain CSS properties.\n<p>@see Sass::SCSS::CssParser\n"],["Sass::Script::CssParser","","Sass/Script/CssParser.html","","<p>This is a subclass of {Parser} for use in parsing plain CSS properties.\n<p>@see Sass::SCSS::CssParser\n"],["Sass::Script::Functions","","Sass/Script/Functions.html","","<p>@comment\n\n<pre>YARD can't handle some multiline tags, and we need really long tags for function declarations. ...</pre>\n"],["Sass::Script::Functions::EvaluationContext","","Sass/Script/Functions/EvaluationContext.html","","<p>The context in which methods in {Script::Functions} are evaluated. That\nmeans that all instance methods …\n"],["Sass::Script::Lexer","","Sass/Script/Lexer.html","","<p>The lexical analyzer for SassScript. It takes a raw string and converts it\nto individual tokens that …\n"],["Sass::Script::Parser","","Sass/Script/Parser.html","","<p>The parser for SassScript. It parses a string of code into a tree of\n{Script::Tree::Node}s.\n"],["Sass::Script::Tree","","Sass/Script/Tree.html","","<p>The module containing nodes in the SassScript parse tree. These nodes are\nall subclasses of {Sass::Script::Tree::Node}. …\n"],["Sass::Script::Tree::Funcall","","Sass/Script/Tree/Funcall.html","","<p>A SassScript parse node representing a function call.\n<p>A function call either calls one of the functions …\n"],["Sass::Script::Tree::Interpolation","","Sass/Script/Tree/Interpolation.html","","<p>A SassScript object representing `#{}` interpolation outside a string.\n<p>@see StringInterpolation\n"],["Sass::Script::Tree::ListLiteral","","Sass/Script/Tree/ListLiteral.html","","<p>A parse tree node representing a list literal. When resolved, this returns\na {Sass::Tree::Value::List}. …\n"],["Sass::Script::Tree::Literal","","Sass/Script/Tree/Literal.html","","<p>The parse tree node for a literal scalar value. This wraps an instance of\n{Sass::Script::Value::Base}. …\n"],["Sass::Script::Tree::MapLiteral","","Sass/Script/Tree/MapLiteral.html","","<p>A class representing a map literal. When resolved, this returns a\n{Sass::Script::Node::Map}.\n"],["Sass::Script::Tree::Node","","Sass/Script/Tree/Node.html","","<p>The abstract superclass for SassScript parse tree nodes.\n<p>Use {#perform} to evaluate a parse tree.\n"],["Sass::Script::Tree::Operation","","Sass/Script/Tree/Operation.html","","<p>A SassScript parse node representing a binary operation, such as `$a + $b`\nor `“foo” + 1`. …\n"],["Sass::Script::Tree::StringInterpolation","","Sass/Script/Tree/StringInterpolation.html","","<p>A SassScript object representing `#{}` interpolation within a string.\n<p>@see Interpolation\n"],["Sass::Script::Tree::UnaryOperation","","Sass/Script/Tree/UnaryOperation.html","","<p>A SassScript parse node representing a unary operation, such as `-$b` or\n`not true`.\n<p>Currently only `-`, …\n"],["Sass::Script::Tree::Variable","","Sass/Script/Tree/Variable.html","","<p>A SassScript parse node representing a variable.\n"],["Sass::Script::Value","","Sass/Script/Value.html","",""],["Sass::Script::Value::ArgList","","Sass/Script/Value/ArgList.html","","<p>A SassScript object representing a variable argument list. This works just\nlike a normal list, but can …\n"],["Sass::Script::Value::Base","","Sass/Script/Value/Base.html","","<p>The abstract superclass for SassScript objects.\n<p>Many of these methods, especially the ones that correspond …\n"],["Sass::Script::Value::Bool","","Sass/Script/Value/Bool.html","","<p>A SassScript object representing a boolean (true or false) value.\n"],["Sass::Script::Value::Color","","Sass/Script/Value/Color.html","","<p>A SassScript object representing a CSS color.\n<p>A color may be represented internally as RGBA, HSLA, or …\n"],["Sass::Script::Value::DeprecatedFalse","","Sass/Script/Value/DeprecatedFalse.html","","<p>A SassScript object representing a `false` value that came from a call to\n`index()`. It will print deprecation …\n"],["Sass::Script::Value::Helpers","","Sass/Script/Value/Helpers.html","","<p>Provides helper functions for creating sass values from within ruby\nmethods. @since `3.3.0`\n"],["Sass::Script::Value::List","","Sass/Script/Value/List.html","","<p>A SassScript object representing a CSS list. This includes both\ncomma-separated lists and space-separated …\n"],["Sass::Script::Value::Map","","Sass/Script/Value/Map.html","","<p>A SassScript object representing a map from keys to values. Both keys and\nvalues can be any SassScript …\n"],["Sass::Script::Value::Null","","Sass/Script/Value/Null.html","","<p>A SassScript object representing a null value.\n"],["Sass::Script::Value::Number","","Sass/Script/Value/Number.html","","<p>A SassScript object representing a number. SassScript numbers can have\ndecimal values, and can also have …\n"],["Sass::Script::Value::String","","Sass/Script/Value/String.html","","<p>A SassScript object representing a CSS string <strong>or</strong> a CSS\nidentifier.\n"],["Sass::Selector","","Sass/Selector.html","","<p>A namespace for nodes in the parse tree for selectors.\n<p>{CommaSequence} is the toplevel selector, representing …\n"],["Sass::Selector::AbstractSequence","","Sass/Selector/AbstractSequence.html","","<p>The abstract parent class of the various selector sequence classes.\n<p>All subclasses should implement a …\n"],["Sass::Selector::Attribute","","Sass/Selector/Attribute.html","","<p>An attribute selector (e.g. `[href^=“http://”]`).\n"],["Sass::Selector::Class","","Sass/Selector/Class.html","","<p>A class selector (e.g. `.foo`).\n"],["Sass::Selector::CommaSequence","","Sass/Selector/CommaSequence.html","","<p>A comma-separated sequence of selectors.\n"],["Sass::Selector::Element","","Sass/Selector/Element.html","","<p>An element selector (e.g. `h1`).\n"],["Sass::Selector::Id","","Sass/Selector/Id.html","","<p>An id selector (e.g. `#foo`).\n"],["Sass::Selector::Interpolation","","Sass/Selector/Interpolation.html","","<p>Selector interpolation (`#{}` in Sass).\n"],["Sass::Selector::Parent","","Sass/Selector/Parent.html","","<p>A parent-referencing selector (`&amp;` in Sass). The function of this is to\nbe replaced by the parent …\n"],["Sass::Selector::Placeholder","","Sass/Selector/Placeholder.html","","<p>A placeholder selector (e.g. `%foo`). This exists to be replaced via\n`@extend`. Rulesets using this selector …\n"],["Sass::Selector::Pseudo","","Sass/Selector/Pseudo.html","","<p>A pseudoclass (e.g. `:visited`) or pseudoelement (e.g. `::first-line`)\nselector. It can have arguments …\n"],["Sass::Selector::SelectorPseudoClass","","Sass/Selector/SelectorPseudoClass.html","","<p>A pseudoclass selector whose argument is itself a selector (e.g.\n`:not(.foo)` or `:-moz-all(.foo, .bar)`). …\n"],["Sass::Selector::Sequence","","Sass/Selector/Sequence.html","","<p>An operator-separated sequence of {SimpleSequence simple selector\nsequences}.\n"],["Sass::Selector::Simple","","Sass/Selector/Simple.html","","<p>The abstract superclass for simple selectors (that is, those that don’t\ncompose multiple selectors). …\n"],["Sass::Selector::SimpleSequence","","Sass/Selector/SimpleSequence.html","","<p>A unseparated sequence of selectors that all apply to a single element. For\nexample, `.foo#bar` is a …\n"],["Sass::Selector::Universal","","Sass/Selector/Universal.html","","<p>A universal selector (`*` in CSS).\n"],["Sass::Shared","","Sass/Shared.html","","<p>This module contains functionality that’s shared between Haml and Sass.\n"],["Sass::Source","","Sass/Source.html","",""],["Sass::Source::Map","","Sass/Source/Map.html","",""],["Sass::Source::Map::Mapping","","Sass/Source/Map/Mapping.html","","<p>A mapping from one source range to another. Indicates that `input` was\ncompiled to `output`.\n<p>@!attribute …\n"],["Sass::Source::Position","","Sass/Source/Position.html","",""],["Sass::Source::Range","","Sass/Source/Range.html","",""],["Sass::Stack","","Sass/Stack.html","","<p>A class representing the stack when compiling a Sass file.\n"],["Sass::Stack::Frame","","Sass/Stack/Frame.html","","<p>A single stack frame.\n"],["Sass::Supports","","Sass/Supports.html","","<p>A namespace for the `@supports` condition parse tree.\n"],["Sass::Supports::Condition","","Sass/Supports/Condition.html","","<p>The abstract superclass of all Supports conditions.\n"],["Sass::Supports::Declaration","","Sass/Supports/Declaration.html","","<p>A declaration condition (e.g. `(feature: value)`).\n"],["Sass::Supports::Interpolation","","Sass/Supports/Interpolation.html","","<p>An interpolation condition (e.g. `#{$var}`).\n"],["Sass::Supports::Negation","","Sass/Supports/Negation.html","","<p>A negation condition (`not CONDITION`).\n"],["Sass::Supports::Operator","","Sass/Supports/Operator.html","","<p>An operator condition (e.g. `CONDITION1 and CONDITION2`).\n"],["Sass::SyntaxError","","Sass/SyntaxError.html","","<p>An exception class that keeps track of the line of the Sass template it was\nraised on and the Sass file …\n"],["Sass::Tree","","Sass/Tree.html","","<p>A namespace for nodes in the Sass parse tree.\n<p>The Sass parse tree has three states: dynamic, static Sass …\n"],["Sass::Tree::AtRootNode","","Sass/Tree/AtRootNode.html","","<p>A dynamic node representing an `@at-root` directive.\n<p>An `@at-root` directive with a selector is converted …\n"],["Sass::Tree::CharsetNode","","Sass/Tree/CharsetNode.html","","<p>A static node representing an unprocessed Sass `@charset` directive.\n<p>@see Sass::Tree\n"],["Sass::Tree::CommentNode","","Sass/Tree/CommentNode.html","","<p>A static node representing a Sass comment (silent or loud).\n<p>@see Sass::Tree\n"],["Sass::Tree::ContentNode","","Sass/Tree/ContentNode.html","","<p>A node representing the placement within a mixin of the include statement’s\ncontent.\n<p>@see Sass::Tree\n"],["Sass::Tree::CssImportNode","","Sass/Tree/CssImportNode.html","","<p>A node representing an `@import` rule that’s importing plain CSS.\n<p>@see Sass::Tree\n"],["Sass::Tree::DebugNode","","Sass/Tree/DebugNode.html","","<p>A dynamic node representing a Sass `@debug` statement.\n<p>@see Sass::Tree\n"],["Sass::Tree::DirectiveNode","","Sass/Tree/DirectiveNode.html","","<p>A static node representing an unprocessed Sass `@`-directive. Directives\nknown to Sass, like `@for` and …\n"],["Sass::Tree::EachNode","","Sass/Tree/EachNode.html","","<p>A dynamic node representing a Sass `@each` loop.\n<p>@see Sass::Tree\n"],["Sass::Tree::ExtendNode","","Sass/Tree/ExtendNode.html","","<p>A static node representing an `@extend` directive.\n<p>@see Sass::Tree\n"],["Sass::Tree::ForNode","","Sass/Tree/ForNode.html","","<p>A dynamic node representing a Sass `@for` loop.\n<p>@see Sass::Tree\n"],["Sass::Tree::FunctionNode","","Sass/Tree/FunctionNode.html","","<p>A dynamic node representing a function definition.\n<p>@see Sass::Tree\n"],["Sass::Tree::IfNode","","Sass/Tree/IfNode.html","","<p>A dynamic node representing a Sass `@if` statement.\n<p>{IfNode}s are a little odd, in that they also represent …\n"],["Sass::Tree::ImportNode","","Sass/Tree/ImportNode.html","","<p>A static node that wraps the {Sass::Tree} for an `@import`ed file. It\ndoesn’t have a functional purpose …\n"],["Sass::Tree::MediaNode","","Sass/Tree/MediaNode.html","","<p>A static node representing a `@media` rule. `@media` rules behave\ndifferently from other directives in …\n"],["Sass::Tree::MixinDefNode","","Sass/Tree/MixinDefNode.html","","<p>A dynamic node representing a mixin definition.\n<p>@see Sass::Tree\n"],["Sass::Tree::MixinNode","","Sass/Tree/MixinNode.html","","<p>A static node representing a mixin include. When in a static tree, the sole\npurpose is to wrap exceptions …\n"],["Sass::Tree::Node","","Sass/Tree/Node.html","","<p>The abstract superclass of all parse-tree nodes.\n"],["Sass::Tree::PropNode","","Sass/Tree/PropNode.html","","<p>A static node representing a CSS property.\n<p>@see Sass::Tree\n"],["Sass::Tree::ReturnNode","","Sass/Tree/ReturnNode.html","","<p>A dynamic node representing returning from a function.\n<p>@see Sass::Tree\n"],["Sass::Tree::RootNode","","Sass/Tree/RootNode.html","","<p>A static node that is the root node of the Sass document.\n"],["Sass::Tree::RuleNode","","Sass/Tree/RuleNode.html","","<p>A static node representing a CSS rule.\n<p>@see Sass::Tree\n"],["Sass::Tree::SupportsNode","","Sass/Tree/SupportsNode.html","","<p>A static node representing a `@supports` rule.\n<p>@see Sass::Tree\n"],["Sass::Tree::TraceNode","","Sass/Tree/TraceNode.html","","<p>A solely static node left over after a mixin include or @content has been\nperformed. Its sole purpose …\n"],["Sass::Tree::VariableNode","","Sass/Tree/VariableNode.html","","<p>A dynamic node representing a variable definition.\n<p>@see Sass::Tree\n"],["Sass::Tree::Visitors","","Sass/Tree/Visitors.html","","<p>Visitors are used to traverse the Sass parse tree. Visitors should extend\n{Visitors::Base}, which provides …\n"],["Sass::Tree::Visitors::Base","","Sass/Tree/Visitors/Base.html","","<p>The abstract base class for Sass visitors. Visitors should extend this\nclass, then implement `visit_*` …\n"],["Sass::Tree::Visitors::CheckNesting","","Sass/Tree/Visitors/CheckNesting.html","","<p>A visitor for checking that all nodes are properly nested.\n"],["Sass::Tree::Visitors::Convert","","Sass/Tree/Visitors/Convert.html","","<p>A visitor for converting a Sass tree into a source string.\n"],["Sass::Tree::Visitors::Cssize","","Sass/Tree/Visitors/Cssize.html","","<p>A visitor for converting a static Sass tree into a static CSS tree.\n"],["Sass::Tree::Visitors::Cssize::Bubble","","Sass/Tree/Visitors/Cssize/Bubble.html","","<p>A wrapper class for a node that indicates to the parent that it should\ntreat the wrapped node as a sibling …\n"],["Sass::Tree::Visitors::DeepCopy","","Sass/Tree/Visitors/DeepCopy.html","","<p>A visitor for copying the full structure of a Sass tree.\n"],["Sass::Tree::Visitors::Extend","","Sass/Tree/Visitors/Extend.html","","<p>A visitor for performing selector inheritance on a static CSS tree.\n<p>Destructively modifies the tree.\n"],["Sass::Tree::Visitors::Perform","","Sass/Tree/Visitors/Perform.html","","<p>A visitor for converting a dynamic Sass tree into a static Sass tree.\n"],["Sass::Tree::Visitors::SetOptions","","Sass/Tree/Visitors/SetOptions.html","","<p>A visitor for setting options on the Sass tree\n"],["Sass::Tree::Visitors::ToCss","","Sass/Tree/Visitors/ToCss.html","","<p>A visitor for converting a Sass tree into CSS.\n"],["Sass::Tree::WarnNode","","Sass/Tree/WarnNode.html","","<p>A dynamic node representing a Sass `@warn` statement.\n<p>@see Sass::Tree\n"],["Sass::Tree::WhileNode","","Sass/Tree/WhileNode.html","","<p>A dynamic node representing a Sass `@while` loop.\n<p>@see Sass::Tree\n"],["Sass::UnitConversionError","","Sass/UnitConversionError.html","","<p>The class for Sass errors that are raised due to invalid unit conversions\nin SassScript.\n"],["Sass::Util","","Sass/Util.html","","<p>A module containing various useful functions.\n"],["Sass::Util::CrossPlatformRandom","","Sass/Util/CrossPlatformRandom.html","","<p>Ruby 1.8 doesn’t support an actual Random class with a settable seed.\n"],["Sass::Util::MultibyteStringScanner","","Sass/Util/MultibyteStringScanner.html","","<p>A wrapper of the native StringScanner class that works correctly with\nmultibyte character encodings. …\n"],["Sass::Util::NormalizedMap","","Sass/Util/NormalizedMap.html","",""],["Sass::Util::StaticConditionalContext","","Sass/Util/StaticConditionalContext.html","","<p>The context in which the ERB for {#def_static_method} will be run.\n"],["Sass::Util::SubsetMap","","Sass/Util/SubsetMap.html","","<p>A map from sets to values. A value is {#[]= set} by providing a set (the\n“set-set”) and a …\n"],["Sass::Util::Test","","Sass/Util/Test.html","",""],["Sass::Version","","Sass/Version.html","","<p>Handles Sass version-reporting. Sass not only reports the standard three\nversion numbers, but its Git …\n"],["<<","Sass::Tree::Node","Sass/Tree/Node.html#method-i-3C-3C","(child)","<p>Appends a child to the node.\n<p>@param child [Tree::Node, Array&lt;Tree::Node&gt;] The child node or nodes\n…\n"],["==","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-3D-3D","(other)","<p>Compares this object with another.\n<p>@param other [Object] The object to compare with @return [Boolean] …\n"],["==","Sass::Selector::AbstractSequence","Sass/Selector/AbstractSequence.html#method-i-3D-3D","(other)",""],["==","Sass::Selector::Simple","Sass/Selector/Simple.html#method-i-3D-3D","(other)",""],["==","Sass::Tree::CommentNode","Sass/Tree/CommentNode.html#method-i-3D-3D","(other)","<p>Compares the contents of two comments.\n<p>@param other [Object] The object to compare with @return [Boolean] …\n"],["==","Sass::Tree::Node","Sass/Tree/Node.html#method-i-3D-3D","(other)","<p>Compares this node and another object (only other {Tree::Node}s will be\nequal). This does a structural …\n"],["==","Sass::Tree::PropNode","Sass/Tree/PropNode.html#method-i-3D-3D","(other)","<p>Compares the names and values of two properties.\n<p>@param other [Object] The object to compare with @return …\n"],["==","Sass::Tree::RuleNode","Sass/Tree/RuleNode.html#method-i-3D-3D","(other)","<p>Compares the contents of two rules.\n<p>@param other [Object] The object to compare with @return [Boolean] …\n"],["[]","OrderedHash","OrderedHash.html#method-c-5B-5D","(*args)",""],["[]","Sass::Util::NormalizedMap","Sass/Util/NormalizedMap.html#method-i-5B-5D","(k)","<p>@private\n"],["[]","Sass::Util::SubsetMap","Sass/Util/SubsetMap.html#method-i-5B-5D","(set)","<p>Same as {#get}, but doesn’t return the subsets of the argument for which\nvalues were found.\n<p>@param set …\n"],["[]=","OrderedHash","OrderedHash.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Sass::Util::NormalizedMap","Sass/Util/NormalizedMap.html#method-i-5B-5D-3D","(k, v)","<p>@private\n"],["[]=","Sass::Util::SubsetMap","Sass/Util/SubsetMap.html#method-i-5B-5D-3D","(set, value)","<p>Associates a value with a set. When `set` or any of its supersets is\naccessed, `value` will be among …\n"],["_adjust","Sass::Script::Functions","Sass/Script/Functions.html#method-i-_adjust","(color, amount, attr, range, op, units = \"\")","<p>@comment\n\n<pre>rubocop:disable ParameterLists</pre>\n"],["_dependencies","Sass::Engine","Sass/Engine.html#method-i-_dependencies","(seen, engines)","<p>Helper for {#dependencies}.\n<p>@private\n"],["_dump","Sass::CacheStores::Memory","Sass/CacheStores/Memory.html#method-i-_dump","(depth)","<p>Since the {Memory} store is stored in the Sass tree’s options hash, when\nthe options get serialized as …\n"],["_dump","Sass::Tree::IfNode","Sass/Tree/IfNode.html#method-i-_dump","(f)",""],["_enc","Sass::Util","Sass/Util.html#method-i-_enc","(string, encoding)","<p>@private\n"],["_eql?","Sass::Selector::CommaSequence","Sass/Selector/CommaSequence.html#method-i-_eql-3F","(other)",""],["_eql?","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-i-_eql-3F","(other)",""],["_eql?","Sass::Selector::SimpleSequence","Sass/Selector/SimpleSequence.html#method-i-_eql-3F","(other)",""],["_find","Sass::Importers::Filesystem","Sass/Importers/Filesystem.html#method-i-_find","(dir, name, options)",""],["_forward","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-_forward","(str)",""],["_hash","Sass::Selector::CommaSequence","Sass/Selector/CommaSequence.html#method-i-_hash","()",""],["_hash","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-i-_hash","()",""],["_hash","Sass::Selector::SimpleSequence","Sass/Selector/SimpleSequence.html#method-i-_hash","()",""],["_interp_string","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-_interp_string","(type)",""],["_interp_to_src","Sass::Media","Sass/Media.html#method-c-_interp_to_src","(interp, options)","<p>Converts an interpolation array to source.\n<p>@param interp [Array&lt;String, Sass::Script::Tree::Node&gt;] …\n"],["_load","Sass::CacheStores::Memory","Sass/CacheStores/Memory.html#method-c-_load","(repr)","<p>If we deserialize this class, just make a new empty one.\n<p>@private\n"],["_load","Sass::Tree::IfNode","Sass/Tree/IfNode.html#method-c-_load","(data)",""],["_log","Sass::Logger::Base","Sass/Logger/Base.html#method-i-_log","(level, message)",""],["_match","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-_match","(str)",""],["_matched","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-_matched","(res)",""],["_moz_document_directive","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-_moz_document_directive","(start_pos)","<p>The document directive is specified in www.w3.org/TR/css3-conditional/, but\nGecko allows the `url-prefix` …\n"],["_perform","Sass::Script::Tree::Funcall","Sass/Script/Tree/Funcall.html#method-i-_perform","(environment)","<p>Evaluates the function call.\n<p>@param environment [Sass::Environment] The environment in which to evaluate\n…\n"],["_perform","Sass::Script::Tree::Interpolation","Sass/Script/Tree/Interpolation.html#method-i-_perform","(environment)","<p>Evaluates the interpolation.\n<p>@param environment [Sass::Environment] The environment in which to evaluate\n…\n"],["_perform","Sass::Script::Tree::ListLiteral","Sass/Script/Tree/ListLiteral.html#method-i-_perform","(environment)",""],["_perform","Sass::Script::Tree::Literal","Sass/Script/Tree/Literal.html#method-i-_perform","(environment)",""],["_perform","Sass::Script::Tree::MapLiteral","Sass/Script/Tree/MapLiteral.html#method-i-_perform","(environment)","<p>@see Node#_perform\n"],["_perform","Sass::Script::Tree::Node","Sass/Script/Tree/Node.html#method-i-_perform","(environment)","<p>Evaluates this node. Note that all {Sass::Script::Value} objects created\nwithin this method should have …\n"],["_perform","Sass::Script::Tree::Operation","Sass/Script/Tree/Operation.html#method-i-_perform","(environment)","<p>Evaluates the operation.\n<p>@param environment [Sass::Environment] The environment in which to evaluate\nthe …\n"],["_perform","Sass::Script::Tree::StringInterpolation","Sass/Script/Tree/StringInterpolation.html#method-i-_perform","(environment)","<p>Evaluates the interpolation.\n<p>@param environment [Sass::Environment] The environment in which to evaluate\n…\n"],["_perform","Sass::Script::Tree::UnaryOperation","Sass/Script/Tree/UnaryOperation.html#method-i-_perform","(environment)","<p>Evaluates the operation.\n<p>@param environment [Sass::Environment] The environment in which to evaluate\nthe …\n"],["_perform","Sass::Script::Tree::Variable","Sass/Script/Tree/Variable.html#method-i-_perform","(environment)","<p>Evaluates the variable.\n<p>@param environment [Sass::Environment] The environment in which to evaluate\nthe …\n"],["_perform","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-_perform","(environment)","<p>Evaluates the value.\n<p>@param environment [Sass::Environment] The environment in which to evaluate\nthe  …\n"],["_render_with_sourcemap","Sass::Engine","Sass/Engine.html#method-i-_render_with_sourcemap","(sourcemap_uri)",""],["_retrieve","Sass::CacheStores::Base","Sass/CacheStores/Base.html#method-i-_retrieve","(key, version, sha)","<p>Retrieved cached contents. Must be implemented by all subclasses.\n<p>Note: if the key exists but the sha …\n"],["_retrieve","Sass::CacheStores::Filesystem","Sass/CacheStores/Filesystem.html#method-i-_retrieve","(key, version, sha)","<p>@see Base#_retrieve\n"],["_retrieve","Sass::CacheStores::Null","Sass/CacheStores/Null.html#method-i-_retrieve","(key, version, sha)",""],["_selector","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-_selector","()",""],["_size","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-_size","(str)",""],["_sources","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-i-_sources","(seq)",""],["_specificity","Sass::Selector::AbstractSequence","Sass/Selector/AbstractSequence.html#method-i-_specificity","(arr)",""],["_store","Sass::CacheStores::Base","Sass/CacheStores/Base.html#method-i-_store","(key, version, sha, contents)","<p>Store cached contents for later retrieval Must be implemented by all\nCacheStore subclasses\n<p>Note: cache …\n"],["_store","Sass::CacheStores::Filesystem","Sass/CacheStores/Filesystem.html#method-i-_store","(key, version, sha, contents)","<p>@see Base#_store\n"],["_store","Sass::CacheStores::Null","Sass/CacheStores/Null.html#method-i-_store","(key, version, sha, contents)",""],["_superselector?","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-i-_superselector-3F","(seq1, seq2)","<p>Given two selector sequences, returns whether `seq1` is a superselector of\n`seq2`; that is, whether `seq1` …\n"],["_to_tree","Sass::Engine","Sass/Engine.html#method-i-_to_tree","()",""],["_variable","Sass::Script::Lexer","Sass/Script/Lexer.html#method-i-_variable","(rx)",""],["abs","Sass::Script::Functions","Sass/Script/Functions.html#method-i-abs","(number)","<p>Returns the absolute value of a number.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">abs</span>(<span class=\"ruby-value\">10</span><span class=\"ruby-identifier\">px</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">10</span><span class=\"ruby-identifier\">px</span>\n<span class=\"ruby-identifier\">abs</span>(<span class=\"ruby-value\">-10</span><span class=\"ruby-identifier\">px</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">10</span><span class=\"ruby-identifier\">px</span>\n</pre>\n"],["absolute_path","Sass::Util","Sass/Util.html#method-i-absolute_path","(path, dir_string = nil)","<p>A cross-platform implementation of `File.absolute_path`.\n<p>@param path [String] @param dir_string [String] …\n"],["abstract","Sass::Util","Sass/Util.html#method-i-abstract","(obj)","<p>Throws a NotImplementedError for an abstract method.\n<p>@param obj [Object] `self` @raise [NotImplementedError] …\n"],["add","Sass::Source::Map","Sass/Source/Map.html#method-i-add","(input, output)","<p>Adds a new mapping from one source range to another. Multiple invocations\nof this method should have …\n"],["add_backtrace","Sass::SyntaxError","Sass/SyntaxError.html#method-i-add_backtrace","(attrs)","<p>Adds an entry to the exception’s Sass backtrace.\n<p>@param attrs [{Symbol =&gt; Object}] The information …\n"],["add_else","Sass::Tree::IfNode","Sass/Tree/IfNode.html#method-i-add_else","(node)","<p>Append an `@else` node to the end of the list.\n<p>@param node [IfNode] The `@else` node to append\n"],["add_feature","Sass::Features","Sass/Features.html#method-i-add_feature","(feature_name)","<p>Add a feature to Sass. Plugins can use this to easily expose their\navailability to end users. Plugins …\n"],["add_rules","Sass::Tree::RuleNode","Sass/Tree/RuleNode.html#method-i-add_rules","(node)","<p>Adds another {RuleNode}‘s rules to this one’s.\n<p>@param node [RuleNode] The other node\n"],["add_sources!","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-i-add_sources-21","(sources)","<p>Add to the {SimpleSequence#sources} sets of the child simple sequences.\nThis destructively modifies this …\n"],["add_template_location","Sass::Plugin::Configuration","Sass/Plugin/Configuration.html#method-i-add_template_location","(template_location, css_location = options[:css_location])","<p>Adds a new template-location/css-location mapping. This means that\nSass/SCSS files in `template_location` …\n"],["adjust_color","Sass::Script::Functions","Sass/Script/Functions.html#method-i-adjust_color","(color, kwargs)","<p>Increases or decreases one or more properties of a color. This can change\nthe red, green, blue, hue, …\n"],["adjust_hue","Sass::Script::Functions","Sass/Script/Functions.html#method-i-adjust_hue","(color, degrees)","<p>Changes the hue of a color. Takes a color and a number of degrees (usually\nbetween `-360deg` and `360deg`), …\n"],["after","Sass::Source::Position","Sass/Source/Position.html#method-i-after","(str)","<p>@param str [String] The string to move through. @return [Position] The\nsource position after proceeding …\n"],["after_interpolation?","Sass::Script::Lexer","Sass/Script/Lexer.html#method-i-after_interpolation-3F","()","<p>@return [Boolean] Whether or not the last token lexed was\n`:end_interpolation`.\n"],["alpha","Sass::Script::Functions","Sass/Script/Functions.html#method-i-alpha","(*args)","<p>Returns the alpha component (opacity) of a color. This is 1 unless\notherwise specified.\n<p>This function …\n"],["alpha","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-alpha","()","<p>The alpha channel (opacity) of the color. This is 1 unless otherwise\ndefined.\n<p>@return [Fixnum]\n"],["alpha?","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-alpha-3F","()","<p>Returns whether this color object is translucent; that is, whether the\nalpha channel is non-1.\n<p>@return …\n"],["ap_geq?","Sass::Util","Sass/Util.html#method-i-ap_geq-3F","(version)","<p>Returns whether this environment is using ActionPack of a version greater\nthan or equal to that specified. …\n"],["ap_geq_3?","Sass::Util","Sass/Util.html#method-i-ap_geq_3-3F","()","<p>Returns whether this environment is using ActionPack version 3.0.0 or\ngreater.\n<p>@return [Boolean]\n"],["append","Sass::Script::Functions","Sass/Script/Functions.html#method-i-append","(list, val, separator = identifier(\"auto\"))","<p>Appends a single value onto the end of a list.\n<p>Unless the `$separator` argument is passed, if the list …\n"],["append_children","Sass::Engine","Sass/Engine.html#method-i-append_children","(parent, children, root)",""],["arg_hash","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-arg_hash","(map)",""],["arglist","Sass::Script::Parser","Sass/Script/Parser.html#method-i-arglist","(subexpr, description)",""],["array_minus","Sass::Util","Sass/Util.html#method-i-array_minus","(minuend, subtrahend)","<p>Returns a sub-array of `minuend` containing only elements that are also in\n`subtrahend`. Ensures that …\n"],["as_stored","Sass::Util::NormalizedMap","Sass/Util/NormalizedMap.html#method-i-as_stored","()","<p>@return [Hash] Hash with the keys as they were stored (before\nnormalization).\n"],["assert_done","Sass::SCSS::ScriptParser","Sass/SCSS/ScriptParser.html#method-i-assert_done","()","<p>Instead of raising an error when the parser is done, rewind the\nStringScanner so that it hasn’t consumed …\n"],["assert_done","Sass::Script::Parser","Sass/Script/Parser.html#method-i-assert_done","()",""],["assert_expr","Sass::Script::Parser","Sass/Script/Parser.html#method-i-assert_expr","(name, expected = nil)",""],["assert_int!","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-assert_int-21","()","<p>@raise [Sass::SyntaxError] if this value isn’t an integer\n"],["assert_integer","Sass::Script::Functions::EvaluationContext","Sass/Script/Functions/EvaluationContext.html#method-i-assert_integer","(number, name = nil)","<p>Asserts that the value is an integer.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_integer</span> <span class=\"ruby-value\">2</span><span class=\"ruby-identifier\">px</span>\n<span class=\"ruby-identifier\">assert_integer</span> <span class=\"ruby-value\">2.5</span><span class=\"ruby-identifier\">px</span>\n  =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">SyntaxError</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["assert_tok","Sass::Script::Parser","Sass/Script/Parser.html#method-i-assert_tok","(name)",""],["assert_toks","Sass::Script::Parser","Sass/Script/Parser.html#method-i-assert_toks","(*names)",""],["assert_type","Sass::Script::Functions::EvaluationContext","Sass/Script/Functions/EvaluationContext.html#method-i-assert_type","(value, type, name = nil)","<p>Asserts that the type of a given SassScript value is the expected type\n(designated by a symbol).\n<p>Valid …\n"],["assert_unit","Sass::Script::Functions::EvaluationContext","Sass/Script/Functions/EvaluationContext.html#method-i-assert_unit","(number, unit, name = nil)","<p>Asserts that the unit of the number is as expected.\n<p>@example\n\n<pre>assert_unit number, &quot;px&quot;\nassert_unit number, ...</pre>\n"],["assert_valid_index","Sass::Script::Value::List","Sass/Script/Value/List.html#method-c-assert_valid_index","(list, n)","<p>Asserts an index is within the list.\n<p>@private\n<p>@param list [Sass::Script::Value::List] The list for which …\n"],["associative?","Sass::Script::Parser","Sass/Script/Parser.html#method-i-associative-3F","(op)","<p>Returns whether or not the given operation is associative.\n<p>@private\n"],["at_root_directive","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-at_root_directive","(start_pos)",""],["at_root_directive_list","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-at_root_directive_list","()",""],["at_root_query","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-at_root_query","()",""],["atomic_create_and_write_file","Sass::Util","Sass/Util.html#method-i-atomic_create_and_write_file","(filename, perms = 0666)","<p>This creates a temp file and yields it for writing. When the write is\ncomplete, the file is moved into …\n"],["attrib","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-attrib","()",""],["attrib_name!","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-attrib_name-21","()",""],["av_template_class","Sass::Util","Sass/Util.html#method-i-av_template_class","(name)","<p>Returns an ActionView::Template* class. In pre-3.0 versions of Rails, most\nof these classes were of the …\n"],["backtrace","Sass::SyntaxError","Sass/SyntaxError.html#method-i-backtrace","()","<p>Returns the standard exception backtrace, including the Sass backtrace.\n<p>@return [Array&lt;String&gt;] …\n"],["balance","Sass::Shared","Sass/Shared.html#method-i-balance","(scanner, start, finish, count = 0)","<p>Moves a scanner through a balanced pair of characters. For example:\n\n<pre>Foo (Bar (Baz bang) bop) (Bang (bop ...</pre>\n"],["balance","Sass::Tree::Node","Sass/Tree/Node.html#method-i-balance","(*args)","<p>@see Sass::Shared.balance @raise [Sass::SyntaxError] if the brackets aren’t\nbalanced\n"],["base","Sass::Selector::SimpleSequence","Sass/Selector/SimpleSequence.html#method-i-base","()","<p>Returns the element or universal selector in this sequence, if it exists.\n<p>@return [Element, Universal …\n"],["block","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-block","(node, context)",""],["block_child","Sass::SCSS::CssParser","Sass/SCSS/CssParser.html#method-i-block_child","(context)",""],["block_child","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-block_child","(context)",""],["block_contents","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-block_contents","(node, context)","<p>A block may contain declarations and/or rulesets\n"],["blue","Sass::Script::Functions","Sass/Script/Functions.html#method-i-blue","(color)","<p>Gets the blue component of a color. Calculated from HSL where necessary via\n[this algorithm].\n<p>[hsl-to-rgb]: …\n"],["blue","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-blue","()","<p>The blue component of the color.\n<p>@return [Fixnum]\n"],["bool","Sass::Script::Value::Helpers","Sass/Script/Value/Helpers.html#method-i-bool","(value)","<p>Construct a Sass Boolean.\n<p>@param value [Object] A ruby object that will be tested for truthiness.\n@return …\n"],["bubblable?","Sass::Tree::Visitors::Cssize","Sass/Tree/Visitors/Cssize.html#method-i-bubblable-3F","(node)","<p>Returns whether or not a node can be bubbled up through the syntax tree.\n<p>@param node [Sass::Tree::Node] …\n"],["bubble","Sass::Tree::Visitors::Cssize","Sass/Tree/Visitors/Cssize.html#method-i-bubble","(node)","<p>“Bubbles” `node` one level by copying the parent and wrapping `node`‘s\nchildren with it.\n<p>@param …\n"],["bubble_subject","Sass::CSS","Sass/CSS.html#method-i-bubble_subject","(root)",""],["bubbles?","Sass::Tree::AtRootNode","Sass/Tree/AtRootNode.html#method-i-bubbles-3F","()","<p>@see Node#bubbles?\n"],["bubbles?","Sass::Tree::DirectiveNode","Sass/Tree/DirectiveNode.html#method-i-bubbles-3F","()",""],["bubbles?","Sass::Tree::Node","Sass/Tree/Node.html#method-i-bubbles-3F","()","<p>Whether or not this node bubbles up through RuleNodes.\n<p>@return [Boolean]\n"],["bubbles?","Sass::Tree::Visitors::Cssize::Bubble","Sass/Tree/Visitors/Cssize/Bubble.html#method-i-bubbles-3F","()",""],["build_tree","Sass::CSS","Sass/CSS.html#method-i-build_tree","()","<p>Parses the CSS template and applies various transformations\n<p>@return [Tree::Node] The root node of the …\n"],["build_tree","Sass::Engine","Sass/Engine.html#method-i-build_tree","(parent, line, root = false)",""],["byte_matched_size","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-byte_matched_size","()",""],["byte_pos","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-byte_pos","()",""],["call","Sass::Plugin::Rack","Sass/Plugin/Rack.html#method-i-call","(env)","<p>Process a request, checking the Sass stylesheets for changes and updating\nthem if necessary.\n<p>@param env …\n"],["call","Sass::Script::Functions","Sass/Script/Functions.html#method-i-call","(name, *args)","<p>Dynamically calls a function. This can call user-defined functions,\nbuilt-in functions, or plain CSS …\n"],["caller","Sass::BaseEnvironment","Sass/BaseEnvironment.html#method-i-caller","()","<p>The environment of the caller of this environment’s mixin or function.\n@return {Environment?}\n"],["caller","Sass::ReadOnlyEnvironment","Sass/ReadOnlyEnvironment.html#method-i-caller","()","<p>The read-only environment of the caller of this environment’s mixin or\nfunction.\n<p>@see BaseEnvironment#caller …\n"],["caller_info","Sass::Util","Sass/Util.html#method-i-caller_info","(entry = nil)","<p>Returns information about the caller of the previous method.\n<p>@param entry [String] An entry in the `#caller` …\n"],["catch_error","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-catch_error","(&block)",""],["ceil","Sass::Script::Functions","Sass/Script/Functions.html#method-i-ceil","(number)","<p>Rounds a number up to the next whole number.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ceil</span>(<span class=\"ruby-value\">10.4</span><span class=\"ruby-identifier\">px</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">11</span><span class=\"ruby-identifier\">px</span>\n<span class=\"ruby-identifier\">ceil</span>(<span class=\"ruby-value\">10.6</span><span class=\"ruby-identifier\">px</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">11</span><span class=\"ruby-identifier\">px</span>\n</pre>\n"],["change_color","Sass::Script::Functions","Sass/Script/Functions.html#method-i-change_color","(color, kwargs)","<p>Changes one or more properties of a color. This can change the red, green,\nblue, hue, saturation, value, …\n"],["charset_directive","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-charset_directive","(start_pos)",""],["check","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-check","(pattern)",""],["check!","Sass::Tree::PropNode","Sass/Tree/PropNode.html#method-i-check-21","()",""],["check_directives_match!","Sass::Selector::SimpleSequence","Sass/Selector/SimpleSequence.html#method-i-check_directives_match-21","(extend, parent_directives)",""],["check_encoding","Sass::Util","Sass/Util.html#method-i-check_encoding","(str)","<p>Checks that the encoding of a string is valid in Ruby 1.9 and cleans up\npotential encoding gotchas like …\n"],["check_encoding!","Sass::CSS","Sass/CSS.html#method-i-check_encoding-21","()",""],["check_encoding!","Sass::Engine","Sass/Engine.html#method-i-check_encoding-21","()",""],["check_extends_fired!","Sass::Tree::Visitors::Extend","Sass/Tree/Visitors/Extend.html#method-c-check_extends_fired-21","(extends)",""],["check_for_no_children","Sass::Engine","Sass/Engine.html#method-i-check_for_no_children","(node)",""],["check_for_updates","Sass::Plugin","Sass/Plugin.html#method-i-check_for_updates","()","<p>Same as {#update_stylesheets}, but respects {#checked_for_updates} and the\n{file:SASS_REFERENCE.md#always_update-option …\n"],["check_range","Sass::Util","Sass/Util.html#method-i-check_range","(name, range, value, unit = '')","<p>Asserts that `value` falls within `range` (inclusive), leaving room for\nslight floating-point errors. …\n"],["check_sass_encoding","Sass::Util","Sass/Util.html#method-i-check_sass_encoding","(str, &block)","<p>Like {#check_encoding}, but also checks for a `@charset` declaration at the\nbeginning of the file and …\n"],["check_until","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-check_until","(pattern)",""],["child_of_directory?","Sass::Plugin::Compiler","Sass/Plugin/Compiler.html#method-i-child_of_directory-3F","(parent, child)",""],["children","Sass::Script::Tree::Funcall","Sass/Script/Tree/Funcall.html#method-i-children","()","<p>Returns the arguments to the function.\n<p>@return [Array&lt;Node&gt;] @see Node#children\n"],["children","Sass::Script::Tree::Interpolation","Sass/Script/Tree/Interpolation.html#method-i-children","()","<p>Returns the three components of the interpolation, `before`, `mid`, and\n`after`.\n<p>@return [Array&lt;Node&gt;] …\n"],["children","Sass::Script::Tree::ListLiteral","Sass/Script/Tree/ListLiteral.html#method-i-children","()","<p>@see Node#children\n"],["children","Sass::Script::Tree::Literal","Sass/Script/Tree/Literal.html#method-i-children","()","<p>@see Node#children\n"],["children","Sass::Script::Tree::MapLiteral","Sass/Script/Tree/MapLiteral.html#method-i-children","()","<p>@see Node#children\n"],["children","Sass::Script::Tree::Node","Sass/Script/Tree/Node.html#method-i-children","()","<p>Returns all child nodes of this node.\n<p>@return [Array&lt;Node&gt;]\n"],["children","Sass::Script::Tree::Operation","Sass/Script/Tree/Operation.html#method-i-children","()","<p>Returns the operands for this operation.\n<p>@return [Array&lt;Node&gt;] @see Node#children\n"],["children","Sass::Script::Tree::StringInterpolation","Sass/Script/Tree/StringInterpolation.html#method-i-children","()","<p>Returns the three components of the interpolation, `before`, `mid`, and\n`after`.\n<p>@return [Array&lt;Node&gt;] …\n"],["children","Sass::Script::Tree::UnaryOperation","Sass/Script/Tree/UnaryOperation.html#method-i-children","()","<p>Returns the operand of the operation.\n<p>@return [Array&lt;Node&gt;] @see Node#children\n"],["children","Sass::Script::Tree::Variable","Sass/Script/Tree/Variable.html#method-i-children","()","<p>Returns an empty array.\n<p>@return [Array&lt;Node&gt;] empty @see Node#children\n"],["children=","Sass::Tree::Node","Sass/Tree/Node.html#method-i-children-3D","(children)","<p>@private\n"],["chunks","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-i-chunks","(seq1, seq2)","<p>Takes initial subsequences of `seq1` and `seq2` and returns all orderings\nof those subsequences. The …\n"],["class_selector","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-class_selector","()",""],["cleanpath","Sass::Util","Sass/Util.html#method-i-cleanpath","(path)","<p>Like `Pathname#cleanpath`, but normalizes Windows paths to always use\nbackslash separators. Normally …\n"],["clear","OrderedHash","OrderedHash.html#method-i-clear","()",""],["clear","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-clear","()",""],["clear_callbacks!","Sass::Callbacks::InstanceMethods","Sass/Callbacks/InstanceMethods.html#method-i-clear_callbacks-21","()","<p>Removes all callbacks registered against this object.\n"],["coerce","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-coerce","(num_units, den_units)","<p>Returns this number converted to other units. The conversion takes into\naccount the relationship between …\n"],["coercion_factor","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-coercion_factor","(from_units, to_units)",""],["colon_path?","Sass::Exec::Sass","Sass/Exec/Sass.html#method-i-colon_path-3F","(path)","<p>@comment\n\n<pre>rubocop:enable MethodLength</pre>\n"],["color","Sass::Exec::Generic","Sass/Exec/Generic.html#method-i-color","(color, str)","<p>Wraps the given string in terminal escapes causing it to have the given\ncolor. If terminal esapes aren’t …\n"],["combinator","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-combinator","()",""],["comment?","Sass::Engine::Line","Sass/Engine/Line.html#method-i-comment-3F","()",""],["comparable","Sass::Script::Functions","Sass/Script/Functions.html#method-i-comparable","(number1, number2)","<p>Returns whether two numbers can added, subtracted, or compared.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">comparable</span>(<span class=\"ruby-value\">2</span><span class=\"ruby-identifier\">px</span>, <span class=\"ruby-value\">1</span><span class=\"ruby-identifier\">px</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">true</span>\n<span class=\"ruby-identifier\">comparable</span>(<span class=\"ruby-value\">100</span><span class=\"ruby-identifier\">px</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["comparable_to?","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-comparable_to-3F","(other)","<p>@param other [Number] A number to decide if it can be compared with this\nnumber. @return [Boolean] Whether …\n"],["compile","Sass","Sass.html#method-c-compile","(contents, options = {})","<p>Compile a Sass or SCSS string to CSS. Defaults to SCSS.\n<p>@param contents [String] The contents of the  …\n"],["compile_file","Sass","Sass.html#method-c-compile_file","(filename, *args)","<p>Compile a file on disk to CSS.\n<p>@raise [Sass::SyntaxError] if there’s an error in the document @raise\n[Encoding::UndefinedConversionError] …\n"],["compiler","Sass::Plugin","Sass/Plugin.html#method-i-compiler","()","<p>Returns the singleton compiler instance. This compiler has been\npre-configured according to the plugin …\n"],["complement","Sass::Script::Functions","Sass/Script/Functions.html#method-i-complement","(color)","<p>Returns the complement of a color. This is identical to `adjust-hue(color,\n180deg)`.\n<p>@see #adjust_hue …\n"],["compute_dependencies","Sass::Plugin::StalenessChecker","Sass/Plugin/StalenessChecker.html#method-i-compute_dependencies","(uri, importer)",""],["compute_units","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-compute_units","(this, other, operation)",""],["const_missing","Sass::Script","Sass/Script.html#method-c-const_missing","(name)","<p>@private\n"],["construct_ruby_args","Sass::Script::Tree::Funcall","Sass/Script/Tree/Funcall.html#method-i-construct_ruby_args","(name, args, splat, environment)",""],["content","Sass::BaseEnvironment","Sass/BaseEnvironment.html#method-i-content","()","<p>The content passed to this environment. This is naturally only set for\nmixin body environments with content …\n"],["content","Sass::ReadOnlyEnvironment","Sass/ReadOnlyEnvironment.html#method-i-content","()","<p>The read-only content passed to this environment.\n<p>@see BaseEnvironment#content @return {ReadOnlyEnvironment} …\n"],["content_directive","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-content_directive","(start_pos)",""],["continued?","Sass::Tree::RuleNode","Sass/Tree/RuleNode.html#method-i-continued-3F","()","<p>@return [Boolean] Whether or not this rule is continued on the next line\n"],["conversion_factor","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-conversion_factor","(from_unit, to_unit)",""],["convertable?","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-convertable-3F","(units)",""],["counter","Sass::Script::Functions","Sass/Script/Functions.html#method-i-counter","(*args)","<p>This function only exists as a workaround for IE7’s [`content: counter`\nbug](jes.st/2013/ie7s-css-breaking-content-counter-bug …\n"],["counters","Sass::Script::Functions","Sass/Script/Functions.html#method-i-counters","(*args)","<p>This function only exists as a workaround for IE7’s [`content: counter`\nbug](jes.st/2013/ie7s-css-breaking-content-counter-bug …\n"],["create_listener","Sass::Plugin::Compiler","Sass/Plugin/Compiler.html#method-i-create_listener","(*args, &block)",""],["css","Sass::Tree::Node","Sass/Tree/Node.html#method-i-css","()","<p>Computes the CSS corresponding to this static CSS tree.\n<p>@return [String] The resulting CSS @see Sass::Tree …\n"],["css_filename","Sass::Plugin::Compiler","Sass/Plugin/Compiler.html#method-i-css_filename","(name, path)",""],["css_import?","Sass::Tree::ImportNode","Sass/Tree/ImportNode.html#method-i-css_import-3F","()","<p>Returns whether or not this import should emit a CSS @import declaration\n<p>@return [Boolean] Whether or …\n"],["css_locations","Sass::Plugin::Compiler","Sass/Plugin/Compiler.html#method-i-css_locations","()",""],["css_tree","Sass::Tree::RootNode","Sass/Tree/RootNode.html#method-i-css_tree","()",""],["css_with_sourcemap","Sass::Tree::Node","Sass/Tree/Node.html#method-i-css_with_sourcemap","()","<p>Computes the CSS corresponding to this static CSS tree, along with the\nrespective source map.\n<p>@return …\n"],["darken","Sass::Script::Functions","Sass/Script/Functions.html#method-i-darken","(color, amount)","<p>Makes a color darker. Takes a color and a number between 0% and 100%, and\nreturns a color with the lightness …\n"],["dasherize","Sass::Script::Tree::Node","Sass/Script/Tree/Node.html#method-i-dasherize","(s, opts)","<p>Converts underscores to dashes if the :dasherize option is set.\n"],["dasherize","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-dasherize","(s)",""],["debubble","Sass::Tree::Visitors::Cssize","Sass/Tree/Visitors/Cssize.html#method-i-debubble","(children, parent = nil)","<p>Pops all bubbles in `children` and intersperses the results with the other\nvalues.\n<p>If `parent` is passed, …\n"],["debug_directive","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-debug_directive","(start_pos)",""],["debug_info","Sass::Tree::RuleNode","Sass/Tree/RuleNode.html#method-i-debug_info","()","<p>A hash that will be associated with this rule in the CSS document if the\n{file:SASS_REFERENCE.md#debug_info-option …\n"],["debug_info_rule","Sass::Tree::Visitors::ToCss","Sass/Tree/Visitors/ToCss.html#method-i-debug_info_rule","(debug_info, options)","<p>@comment\n\n<pre>rubocop:enable MethodLength</pre>\n"],["declaration","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-declaration","()",""],["declaration","Sass::Tree::PropNode","Sass/Tree/PropNode.html#method-i-declaration","(opts = {:old => @prop_syntax == :old}, fmt = :sass)","<p>Computes the Sass or SCSS code for the variable declaration. This is like\n{#to_scss} or {#to_sass}, except …\n"],["declaration_or_ruleset","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-declaration_or_ruleset","()","<p>This is a nasty hack, and the only place in the parser that requires a\nlarge amount of backtracking. …\n"],["declare","Sass::Script::Functions","Sass/Script/Functions.html#method-c-declare","(method_name, args, options = {})","<p>Declare a Sass signature for a Ruby-defined function. This includes the\nnames of the arguments, whether …\n"],["deep_copy","Sass::Media::Query","Sass/Media/Query.html#method-i-deep_copy","()","<p>Returns a deep copy of this query and all its children.\n<p>@return [Query]\n"],["deep_copy","Sass::Media::QueryList","Sass/Media/QueryList.html#method-i-deep_copy","()","<p>Returns a deep copy of this query list and all its children.\n<p>@return [QueryList]\n"],["deep_copy","Sass::Script::Tree::Funcall","Sass/Script/Tree/Funcall.html#method-i-deep_copy","()","<p>@see Node#deep_copy\n"],["deep_copy","Sass::Script::Tree::Interpolation","Sass/Script/Tree/Interpolation.html#method-i-deep_copy","()","<p>@see Node#deep_copy\n"],["deep_copy","Sass::Script::Tree::ListLiteral","Sass/Script/Tree/ListLiteral.html#method-i-deep_copy","()","<p>@see Node#deep_copy\n"],["deep_copy","Sass::Script::Tree::Literal","Sass/Script/Tree/Literal.html#method-i-deep_copy","()","<p>@see Node#deep_copy\n"],["deep_copy","Sass::Script::Tree::MapLiteral","Sass/Script/Tree/MapLiteral.html#method-i-deep_copy","()","<p>@see Node#deep_copy\n"],["deep_copy","Sass::Script::Tree::Node","Sass/Script/Tree/Node.html#method-i-deep_copy","()","<p>Returns a deep clone of this node. The child nodes are cloned, but options\nare not.\n<p>@return [Node]\n"],["deep_copy","Sass::Script::Tree::Operation","Sass/Script/Tree/Operation.html#method-i-deep_copy","()","<p>@see Node#deep_copy\n"],["deep_copy","Sass::Script::Tree::StringInterpolation","Sass/Script/Tree/StringInterpolation.html#method-i-deep_copy","()","<p>@see Node#deep_copy\n"],["deep_copy","Sass::Script::Tree::UnaryOperation","Sass/Script/Tree/UnaryOperation.html#method-i-deep_copy","()","<p>@see Node#deep_copy\n"],["deep_copy","Sass::Script::Tree::Variable","Sass/Script/Tree/Variable.html#method-i-deep_copy","()","<p>@see Node#deep_copy\n"],["deep_copy","Sass::Stack","Sass/Stack.html#method-i-deep_copy","()",""],["deep_copy","Sass::Supports::Condition","Sass/Supports/Condition.html#method-i-deep_copy","()","<p>Returns a deep copy of this condition and all its children.\n<p>@return [Condition]\n"],["deep_copy","Sass::Supports::Declaration","Sass/Supports/Declaration.html#method-i-deep_copy","()",""],["deep_copy","Sass::Supports::Interpolation","Sass/Supports/Interpolation.html#method-i-deep_copy","()",""],["deep_copy","Sass::Supports::Negation","Sass/Supports/Negation.html#method-i-deep_copy","()",""],["deep_copy","Sass::Supports::Operator","Sass/Supports/Operator.html#method-i-deep_copy","()",""],["deep_copy","Sass::Tree::Node","Sass/Tree/Node.html#method-i-deep_copy","()","<p>Return a deep clone of this node. The child nodes are cloned, but options\nare not.\n<p>@return [Node]\n"],["default_options","Sass::Plugin::Configuration","Sass/Plugin/Configuration.html#method-i-default_options","()","<p>Returns the default options for a {Sass::Plugin::Compiler}.\n<p>@return [{Symbol =&gt; Object}]\n"],["default_sass_path","Sass::Exec::Sass","Sass/Exec/Sass.html#method-i-default_sass_path","()",""],["define_callback","Sass::Callbacks","Sass/Callbacks.html#method-i-define_callback","(name)","<p>Define a callback with the given name. This will define an `on_#{name}`\nmethod that registers a block, …\n"],["define_logger","Sass::Logger::LogLevel::ClassMethods","Sass/Logger/LogLevel/ClassMethods.html#method-i-define_logger","(name, options = {})",""],["defn_arglist!","Sass::Script::Parser","Sass/Script/Parser.html#method-i-defn_arglist-21","(must_have_parens)",""],["delete","OrderedHash","OrderedHash.html#method-i-delete","(key)",""],["delete","Sass::Util::NormalizedMap","Sass/Util/NormalizedMap.html#method-i-delete","(k)","<p>@private\n"],["delete_if","OrderedHash","OrderedHash.html#method-i-delete_if","()",""],["denormalize","Sass::Util::NormalizedMap","Sass/Util/NormalizedMap.html#method-i-denormalize","(key)","<p>Returns the version of `key` as it was stored before normalization. If\n`key` isn’t in the map, returns …\n"],["dependencies","Sass::Engine","Sass/Engine.html#method-i-dependencies","()","<p>Gets a set of all the documents that are (transitive) dependencies of this\ndocument, not including the …\n"],["dependencies","Sass::Plugin::StalenessChecker","Sass/Plugin/StalenessChecker.html#method-i-dependencies","(uri, importer)",""],["dependencies_stale?","Sass::Plugin::StalenessChecker","Sass/Plugin/StalenessChecker.html#method-i-dependencies_stale-3F","(uri, importer, css_mtime)",""],["dependency_updated?","Sass::Plugin::StalenessChecker","Sass/Plugin/StalenessChecker.html#method-i-dependency_updated-3F","(css_mtime)",""],["deprecated","Sass::Util","Sass/Util.html#method-i-deprecated","(obj, message = nil)","<p>Prints a deprecation warning for the caller method.\n<p>@param obj [Object] `self` @param message [String] …\n"],["deprecation_warning","Sass::Importers::DeprecatedPath","Sass/Importers/DeprecatedPath.html#method-i-deprecation_warning","()","<p>@return [String] The deprecation warning that will be printed the first\n\n<pre>time an import occurs.</pre>\n"],["desaturate","Sass::Script::Functions","Sass/Script/Functions.html#method-i-desaturate","(color, amount)","<p>Makes a color less saturated. Takes a color and a number between 0% and\n100%, and returns a color with …\n"],["destructure","Sass::Util","Sass/Util.html#method-i-destructure","(val)","<p>Prepare a value for a destructuring assignment (e.g. `a, b = val`). This\nworks around a performance bug …\n"],["directive","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-directive","()",""],["directive_body","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-directive_body","(value, start_pos)",""],["directories_to_watch","Sass::Importers::Base","Sass/Importers/Base.html#method-i-directories_to_watch","()","<p>If the importer is based on files on the local filesystem this method\nshould return folders which should …\n"],["directories_to_watch","Sass::Importers::DeprecatedPath","Sass/Importers/DeprecatedPath.html#method-i-directories_to_watch","()","<p>@see Base#directories_to_watch\n"],["directories_to_watch","Sass::Importers::Filesystem","Sass/Importers/Filesystem.html#method-i-directories_to_watch","()","<p>@see Base#directories_to_watch\n"],["div","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-div","(other)","<p>The SassScript `/` operation.\n<p>@param other [Value] The right-hand side of the operator @return\n[Script::Value::String] …\n"],["div","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-div","(other)","<p>The SassScript `/` operation. Its functionality depends on the type of its\nargument:\n<p>{Number} : Divides …\n"],["div","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-div","(other)","<p>The SassScript `/` operation. Its functionality depends on the type of its\nargument:\n<p>{Number} : Divides …\n"],["do_extend","Sass::Selector::CommaSequence","Sass/Selector/CommaSequence.html#method-i-do_extend","(extends, parent_directives)","<p>Non-destrucively extends this selector with the extensions specified in a\nhash (which should come from …\n"],["do_extend","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-i-do_extend","(extends, parent_directives, seen = Set.new)","<p>Non-destructively extends this selector with the extensions specified in a\nhash (which should come from …\n"],["do_extend","Sass::Selector::SimpleSequence","Sass/Selector/SimpleSequence.html#method-i-do_extend","(extends, parent_directives, seen = Set.new)","<p>Non-destructively extends this selector with the extensions specified in a\nhash (which should come from …\n"],["done?","Sass::Script::Lexer","Sass/Script/Lexer.html#method-i-done-3F","()","<p>@return [Boolean] Whether or not there’s more source text to lex.\n"],["dump_selectors","Sass::CSS","Sass/CSS.html#method-i-dump_selectors","(root)","<p>Dump all the parsed {Sass::Tree::RuleNode} selectors to strings.\n<p>@param root [Tree::Node] The parent node …\n"],["dup","Sass::Util::NormalizedMap","Sass/Util/NormalizedMap.html#method-i-dup","()",""],["each","OrderedHash","OrderedHash.html#method-i-each","()",""],["each","Sass::Tree::Node","Sass/Tree/Node.html#method-i-each","()","<p>Iterates through each node in the tree rooted at this node in a pre-order\nwalk.\n<p>@yield node @yieldparam …\n"],["each","Sass::Util::NormalizedMap","Sass/Util/NormalizedMap.html#method-i-each","()",""],["each_directive","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-each_directive","(start_pos)",""],["each_key","OrderedHash","OrderedHash.html#method-i-each_key","()",""],["each_pair","OrderedHash","OrderedHash.html#method-i-each_pair","()",""],["each_value","OrderedHash","OrderedHash.html#method-i-each_value","()",""],["each_value","Sass::Util::SubsetMap","Sass/Util/SubsetMap.html#method-i-each_value","()","<p>Iterates over each value in the subset map. Ignores keys completely. If\nmultiple keys have the same value, …\n"],["element_name","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-element_name","()",""],["element_needs_parens?","Sass::Script::Value::List","Sass/Script/Value/List.html#method-i-element_needs_parens-3F","(element)",""],["else_block","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-else_block","(node)",""],["else_directive","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-else_directive","(start_pos)",""],["empty?","Sass::Util::NormalizedMap","Sass/Util/NormalizedMap.html#method-i-empty-3F","()",""],["empty?","Sass::Util::SubsetMap","Sass/Util/SubsetMap.html#method-i-empty-3F","()","<p>Whether or not this SubsetMap has any key-value pairs.\n<p>@return [Boolean]\n"],["encode_and_set_charset","Sass::Engine","Sass/Engine.html#method-i-encode_and_set_charset","(rendered)",""],["encode_vlq","Sass::Util","Sass/Util.html#method-i-encode_vlq","(value)","<p>Encodes `value` as VLQ (en.wikipedia.org/wiki/VLQ).\n<p>@param value [Fixnum] @return [String] The encoded …\n"],["engine_options","Sass::Plugin::Compiler","Sass/Plugin/Compiler.html#method-i-engine_options","(additional_options = {})","<p>Non-destructively modifies {#options} so that default values are properly\nset, and returns the result. …\n"],["enum_cons","Sass::Util","Sass/Util.html#method-i-enum_cons","(enum, n)","<p>A version of `Enumerable#enum_cons` that works in Ruby 1.8 and 1.9.\n<p>@param enum [Enumerable] The enumerable …\n"],["enum_slice","Sass::Util","Sass/Util.html#method-i-enum_slice","(enum, n)","<p>A version of `Enumerable#enum_slice` that works in Ruby 1.8 and 1.9.\n<p>@param enum [Enumerable] The enumerable …\n"],["enum_with_index","Sass::Util","Sass/Util.html#method-i-enum_with_index","(enum)","<p>A version of `Enumerable#enum_with_index` that works in Ruby 1.8 and 1.9.\n<p>@param enum [Enumerable] The …\n"],["eq","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-eq","(other)","<p>The SassScript `==` operation. **Note that this returns a\n{Sass::Script::Value::Bool} object, not a  …\n"],["eq","Sass::Script::Value::Bool","Sass/Script/Value/Bool.html#method-i-eq","(other)",""],["eq","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-eq","(other)","<p>The SassScript `==` operation. **Note that this returns a\n{Sass::Script::Value::Bool} object, not a  …\n"],["eq","Sass::Script::Value::DeprecatedFalse","Sass/Script/Value/DeprecatedFalse.html#method-i-eq","(other)",""],["eq","Sass::Script::Value::List","Sass/Script/Value/List.html#method-i-eq","(other)","<p>@see Value#eq\n"],["eq","Sass::Script::Value::Map","Sass/Script/Value/Map.html#method-i-eq","(other)","<p>@see Value#eq\n"],["eq","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-eq","(other)","<p>The SassScript `==` operation.\n<p>@param other [Value] The right-hand side of the operator @return [Boolean]\n…\n"],["eql?","Sass::Importers::Filesystem","Sass/Importers/Filesystem.html#method-i-eql-3F","(other)",""],["eql?","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-eql-3F","(other)",""],["eql?","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-eql-3F","(other)","<p>Hash-equality works differently than `==` equality for numbers.\nHash-equality must be transitive, so …\n"],["eql?","Sass::Selector::AbstractSequence","Sass/Selector/AbstractSequence.html#method-i-eql-3F","(other)","<p>Checks equality between this and another object.\n<p>Subclasses should define `#_eql?` rather than overriding …\n"],["eql?","Sass::Selector::Simple","Sass/Selector/Simple.html#method-i-eql-3F","(other)","<p>Checks equality between this and another object.\n<p>By default, this is based on the value of {#to_a}, so …\n"],["equality_key","Sass::Selector::Simple","Sass/Selector/Simple.html#method-i-equality_key","()","<p>Returns the key used for testing whether selectors are equal.\n<p>This is based on {#to_a}, with adjacent …\n"],["erase!","Sass::Tree::Visitors::ToCss","Sass/Tree/Visitors/ToCss.html#method-i-erase-21","(chars)","<p>Move the output cursor back `chars` characters.\n"],["err","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-err","(msg)",""],["escape_char","Sass::SCSS::RX","Sass/SCSS/RX.html#method-c-escape_char","(c)","<p>Escapes a single character for a CSS identifier.\n<p>@param c [String] The character to escape. Should have …\n"],["escape_glob_characters","Sass::Importers::Filesystem","Sass/Importers/Filesystem.html#method-i-escape_glob_characters","(name)",""],["escape_ident","Sass::SCSS::RX","Sass/SCSS/RX.html#method-c-escape_ident","(str)","<p>Takes a string and returns a CSS identifier that will have the value of the\ngiven string.\n<p>@param str [String] …\n"],["escape_uri","Sass::Util","Sass/Util.html#method-i-escape_uri","(string)","<p>URI-escape `string`.\n<p>@param string [String] @return [String]\n"],["exception_to_css","Sass::SyntaxError","Sass/SyntaxError.html#method-i-exception_to_css","(e, options)","<p>Returns an error report for an exception in CSS format.\n<p>@param e [Exception] @param options [{Symbol =&gt; …\n"],["exclude?","Sass::Tree::AtRootNode","Sass/Tree/AtRootNode.html#method-i-exclude-3F","(directive)","<p>Returns whether or not the given directive is excluded by this node.\n`directive` may be “rule”, …\n"],["exclude_node?","Sass::Tree::AtRootNode","Sass/Tree/AtRootNode.html#method-i-exclude_node-3F","(node)","<p>Returns whether the given node is excluded by this node.\n<p>@param node [Sass::Tree::Node] @return [Boolean] …\n"],["expand_commas","Sass::CSS","Sass/CSS.html#method-i-expand_commas","(root)","<p>Transform\n\n<pre>foo, bar, baz\n  color: blue</pre>\n<p>into\n"],["expected","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-expected","(name)",""],["expected","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-c-expected","(scanner, expected, line)","<p>@private\n"],["expected!","Sass::Script::Lexer","Sass/Script/Lexer.html#method-i-expected-21","(name)","<p>Raise an error to the effect that `name` was expected in the input stream\nand wasn’t found.\n<p>This calls …\n"],["expr","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-expr","(allow_var = true)",""],["expr","Sass::Script::Parser","Sass/Script/Parser.html#method-i-expr","()",""],["expr!","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-expr-21","(name)",""],["extend_directive","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-extend_directive","(start_pos)",""],["extended","Sass::Callbacks","Sass/Callbacks.html#method-c-extended","(base)","<p>Automatically includes {InstanceMethods} when something extends this\nmodule.\n<p>@param base [Module]\n"],["extended_not_expanded_to_s","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-i-extended_not_expanded_to_s","(extended_not_expanded)",""],["extensions","Sass::Importers::Filesystem","Sass/Importers/Filesystem.html#method-i-extensions","()","<p>A hash from file extensions to the syntaxes for those extensions. The\nsyntaxes must be `:sass` or `:scss`. …\n"],["extract!","Sass::Util","Sass/Util.html#method-i-extract-21","(array)","<p>Destructively removes all elements from an array that match a block, and\nreturns the removed elements. …\n"],["extract_values","Sass::Util","Sass/Util.html#method-i-extract_values","(arr)","<p>Extracts the non-string vlaues from an array containing both strings and\nnon-strings. These values are …\n"],["fade_in","Sass::Script::Functions","Sass/Script/Functions.html#method-i-fade_in","(color, amount)",""],["fade_out","Sass::Script::Functions","Sass/Script/Functions.html#method-i-fade_out","(color, amount)",""],["feature_exists","Sass::Script::Functions","Sass/Script/Functions.html#method-i-feature_exists","(feature)","<p>Returns whether a feature exists in the current Sass runtime.\n<p>@example\n\n<pre>feature-exists(some-feature-that-exists) ...</pre>\n"],["filename","Sass::Tree::Node","Sass/Tree/Node.html#method-i-filename","()","<p>The name of the document on which this node appeared.\n<p>@return [String]\n"],["filename=","Sass::Selector::AbstractSequence","Sass/Selector/AbstractSequence.html#method-i-filename-3D","(filename)","<p>Sets the name of the file in which this selector was declared, or `nil` if\nit was not declared in a file …\n"],["filename=","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-i-filename-3D","(filename)","<p>Sets the name of the file in which this selector was declared, or `nil` if\nit was not declared in a file …\n"],["filename=","Sass::Tree::RuleNode","Sass/Tree/RuleNode.html#method-i-filename-3D","(filename)","<p>If we’ve precached the parsed selector, set the filename on it, too.\n"],["find","Sass::Importers::Base","Sass/Importers/Base.html#method-i-find","(uri, options)","<p>Find a Sass file, if it exists.\n<p>This is the primary entry point of the Importer. It corresponds directly …\n"],["find","Sass::Importers::DeprecatedPath","Sass/Importers/DeprecatedPath.html#method-i-find","(*args)","<p>@see Sass::Importers::Base#find\n"],["find","Sass::Importers::Filesystem","Sass/Importers/Filesystem.html#method-i-find","(name, options)","<p>@see Base#find\n"],["find_real_file","Sass::Importers::Filesystem","Sass/Importers/Filesystem.html#method-i-find_real_file","(dir, name, options)","<p>Given a base directory and an `@import`ed name, finds an existant file that\nmatches the name.\n<p>@param dir …\n"],["find_relative","Sass::Importers::Base","Sass/Importers/Base.html#method-i-find_relative","(uri, base, options)","<p>Find a Sass file relative to another file. Importers without a notion of\n“relative paths” should …\n"],["find_relative","Sass::Importers::Filesystem","Sass/Importers/Filesystem.html#method-i-find_relative","(name, base, options)","<p>@see Base#find_relative\n"],["first_seq","Sass::CSS","Sass/CSS.html#method-i-first_seq","(rule)","<p>Return the first {Sass::Selector::Sequence} in a {Sass::Tree::RuleNode}.\n<p>@param rule [Sass::Tree::RuleNode] …\n"],["first_simple_sel","Sass::CSS","Sass/CSS.html#method-i-first_simple_sel","(rule)","<p>Return the first {Sass::Selector::Simple} in a {Sass::Tree::RuleNode},\nunless the rule begins with a …\n"],["first_sseq","Sass::CSS","Sass/CSS.html#method-i-first_sseq","(rule)","<p>Return the first {Sass::Selector::SimpleSequence} in a\n{Sass::Tree::RuleNode}.\n<p>@param rule [Sass::Tree::RuleNode] …\n"],["flatten","Sass::Util","Sass/Util.html#method-i-flatten","(arr, n)","<p>Flattens the first `n` nested arrays in a cross-version manner.\n<p>@param arr [Array] The array to flatten …\n"],["flatten_rule","Sass::CSS","Sass/CSS.html#method-i-flatten_rule","(rule)","<p>Flattens a single rule.\n<p>@param rule [Tree::RuleNode] The candidate for flattening @see\n#flatten_rules …\n"],["flatten_rules","Sass::CSS","Sass/CSS.html#method-i-flatten_rules","(root)","<p>Flatten rules so that\n\n<pre>foo\n  bar\n    color: red</pre>\n<p>becomes\n"],["flatten_vertically","Sass::Util","Sass/Util.html#method-i-flatten_vertically","(arrs)","<p>Flattens the first level of nested arrays in `arrs`. Unlike\n`Array#flatten`, this orders the result by …\n"],["floor","Sass::Script::Functions","Sass/Script/Functions.html#method-i-floor","(number)","<p>Rounds a number down to the previous whole number.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">floor</span>(<span class=\"ruby-value\">10.4</span><span class=\"ruby-identifier\">px</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">10</span><span class=\"ruby-identifier\">px</span>\n<span class=\"ruby-identifier\">floor</span>(<span class=\"ruby-value\">10.6</span><span class=\"ruby-identifier\">px</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">10</span><span class=\"ruby-identifier\">px</span>\n</pre>\n"],["fn_arglist","Sass::Script::Parser","Sass/Script/Parser.html#method-i-fn_arglist","()",""],["fold_commas","Sass::CSS","Sass/CSS.html#method-i-fold_commas","(root)","<p>Transform\n\n<pre>foo\n  bar\n    color: blue\n  baz\n    color: blue</pre>\n<p>into\n"],["for_directive","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-for_directive","(start_pos)",""],["for_file","Sass::Engine","Sass/Engine.html#method-c-for_file","(filename, options)","<p>Returns the {Sass::Engine} for the given file. This is preferable to\nSass::Engine.new when reading from …\n"],["for_node","Sass::Tree::Visitors::ToCss","Sass/Tree/Visitors/ToCss.html#method-i-for_node","(node, attr_prefix = nil)","<p>Associate all output produced in a block with a given node. Used for source\nmapping.\n"],["force_update_stylesheets","Sass::Plugin","Sass/Plugin.html#method-i-force_update_stylesheets","(individual_files = [])","<p>Updates all stylesheets, even those that aren’t out-of-date. Ignores the\ncache.\n<p>@param individual_files …\n"],["format_comment_text","Sass::Engine","Sass/Engine.html#method-i-format_comment_text","(text, silent)",""],["from_hex","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-c-from_hex","(hex_string, alpha = nil)","<p>Create a new color from a valid CSS hex string.\n<p>The leading hash is optional.\n<p>@return [Color]\n"],["from_node","Sass::Tree::TraceNode","Sass/Tree/TraceNode.html#method-c-from_node","(name, node)","<p>Initializes this node from an existing node. @param name [String] The name\nof the trace entry to add. …\n"],["full_line_range","Sass::Engine","Sass/Engine.html#method-i-full_line_range","(line)",""],["funcall","Sass::Script::Parser","Sass/Script/Parser.html#method-i-funcall","()",""],["function","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-function","(allow_var)",""],["function_directive","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-function_directive","(start_pos)",""],["function_exists","Sass::Script::Functions","Sass/Script/Functions.html#method-i-function_exists","(name)","<p>Check whether a function with the given name exists.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">function</span><span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">exists</span>(<span class=\"ruby-identifier\">lighten</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">true</span>\n\n<span class=\"ruby-ivar\">@function</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["get","Sass::Util::SubsetMap","Sass/Util/SubsetMap.html#method-i-get","(set)","<p>Returns all values associated with subsets of `set`.\n<p>In the worst case, this runs in `O(m*max(n, log m))` …\n"],["get_byte","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-get_byte","()",""],["get_line","Sass::Exec::Generic","Sass/Exec/Generic.html#method-i-get_line","(exception)","<p>Finds the line of the source template on which an exception was raised.\n<p>@param exception [Exception]  …\n"],["getbyte","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-getbyte","()",""],["getch","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-getch","()",""],["glob","Sass::Util","Sass/Util.html#method-i-glob","(path)","<p>Like `Dir.glob`, but works with backslash-separated paths on Windows.\n<p>@param path [String]\n"],["global_env","Sass::BaseEnvironment","Sass/BaseEnvironment.html#method-i-global_env","()","<p>The top-level Environment object.\n<p>@return [Environment]\n"],["global_variable_exists","Sass::Script::Functions","Sass/Script/Functions.html#method-i-global_variable_exists","(name)","<p>Check whether a variable with the given name exists in the global scope (at\nthe top level of the file). …\n"],["grayscale","Sass::Script::Functions","Sass/Script/Functions.html#method-i-grayscale","(color)","<p>Converts a color to grayscale. This is identical to `desaturate(color,\n100%)`.\n<p>@see #desaturate @overload …\n"],["green","Sass::Script::Functions","Sass/Script/Functions.html#method-i-green","(color)","<p>Gets the green component of a color. Calculated from HSL where necessary\nvia [this algorithm].\n<p>[hsl-to-rgb]: …\n"],["green","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-green","()","<p>The green component of the color.\n<p>@return [Fixnum]\n"],["group_by_to_a","Sass::Util","Sass/Util.html#method-i-group_by_to_a","(enum)","<p>Performs the equivalent of `enum.group_by.to_a`, but with a guaranteed\norder. Unlike {Util#hash_to_a}, …\n"],["group_selectors","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-i-group_selectors","(seq)","<p>Groups a sequence into subsequences. The subsequences are determined by\nstrings; adjacent non-string …\n"],["gt","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-gt","(other)","<p>The SassScript `&gt;` operation.\n<p>@param other [Number] The right-hand side of the operator @return [Boolean]\n…\n"],["gte","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-gte","(other)","<p>The SassScript `&gt;=` operation.\n<p>@param other [Number] The right-hand side of the operator @return [Boolean]\n…\n"],["handle_import_loop!","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-handle_import_loop-21","(node)",""],["handle_interpolation","Sass::Shared","Sass/Shared.html#method-i-handle_interpolation","(str)","<p>Scans through a string looking for the interoplation-opening `#{` and, when\nit’s found, yields the scanner …\n"],["handle_load_error","Sass::Exec::Generic","Sass/Exec/Generic.html#method-i-handle_load_error","(err)",""],["has?","Sass::Util","Sass/Util.html#method-i-has-3F","(attr, klass, method)","<p>Checks to see if a class has a given method. For example:\n\n<pre>Sass::Util.has?(:public_instance_method, String, ...</pre>\n"],["has_children?","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-has_children-3F","(child_or_array)",""],["has_feature?","Sass::Features","Sass/Features.html#method-i-has_feature-3F","(feature_name)","<p>Check if a feature exists by name. This is used to implement the Sass\nfunction `feature-exists($feature)` …\n"],["has_key?","Sass::Util::NormalizedMap","Sass/Util/NormalizedMap.html#method-i-has_key-3F","(k)","<p>@private\n"],["has_placeholder?","Sass::Selector::AbstractSequence","Sass/Selector/AbstractSequence.html#method-i-has_placeholder-3F","()","<p>Whether or not this selector sequence contains a placeholder selector.\nChecks recursively.\n"],["hash","Sass::Importers::Filesystem","Sass/Importers/Filesystem.html#method-i-hash","()",""],["hash","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-hash","()","<p>Returns the hash code of this value. Two objects’ hash codes should be\nequal if the objects are equal. …\n"],["hash","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-hash","()",""],["hash","Sass::Script::Value::List","Sass/Script/Value/List.html#method-i-hash","()",""],["hash","Sass::Script::Value::Map","Sass/Script/Value/Map.html#method-i-hash","()",""],["hash","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-hash","()",""],["hash","Sass::Selector::AbstractSequence","Sass/Selector/AbstractSequence.html#method-i-hash","()","<p>Returns a hash code for this sequence.\n<p>Subclasses should define `#_hash` rather than overriding this method, …\n"],["hash","Sass::Selector::Simple","Sass/Selector/Simple.html#method-i-hash","()","<p>Returns a hash code for this selector object.\n<p>By default, this is based on the value of {#to_a}, so if …\n"],["hash_to_a","Sass::Util","Sass/Util.html#method-i-hash_to_a","(hash)","<p>Converts a Hash to an Array. This is usually identical to `Hash#to_a`, with\nthe following exceptions: …\n"],["header_string","Sass::SyntaxError","Sass/SyntaxError.html#method-i-header_string","(e, options)",""],["hex_color","Sass::Script::Value::Helpers","Sass/Script/Value/Helpers.html#method-i-hex_color","(value, alpha = nil)","<p>Construct a Sass Color from a hex color string.\n<p>@param value [::String] A string representing a hex color. …\n"],["hex_str","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-hex_str","()",""],["hsl","Sass::Script::Functions","Sass/Script/Functions.html#method-i-hsl","(hue, saturation, lightness)","<p>Creates a {Sass::Script::Value::Color Color} from hue, saturation, and\nlightness values. Uses the algorithm …\n"],["hsl","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-hsl","()","<p>Returns the hue, saturation, and lightness components of the color.\n<p>@return [Array&lt;Fixnum&gt;] A frozen …\n"],["hsl_color","Sass::Script::Value::Helpers","Sass/Script/Value/Helpers.html#method-i-hsl_color","(hue, saturation, lightness, alpha = nil)","<p>Construct a Sass Color from hsl values.\n<p>@param hue [::Number] The hue of the color in degrees.\n\n<pre>A non-negative ...</pre>\n"],["hsl_to_rgb!","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-hsl_to_rgb-21","()",""],["hsla","Sass::Script::Functions","Sass/Script/Functions.html#method-i-hsla","(hue, saturation, lightness, alpha)","<p>Creates a {Sass::Script::Value::Color Color} from hue, saturation,\nlightness, and alpha values. Uses …\n"],["hsla","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-hsla","()","<p>Returns the hue, saturation, lightness, and alpha components of the color.\n<p>@return [Array&lt;Fixnum&gt;] …\n"],["hue","Sass::Script::Functions","Sass/Script/Functions.html#method-i-hue","(color)","<p>Returns the hue component of a color. See [the CSS3 HSL specification].\nCalculated from RGB where necessary …\n"],["hue","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-hue","()","<p>The hue component of the color.\n<p>@return [Numeric]\n"],["hue_to_rgb","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-hue_to_rgb","(m1, m2, h)",""],["human_indentation","Sass::Shared","Sass/Shared.html#method-i-human_indentation","(indentation, was = false)","<p>Formats a string for use in error messages about indentation.\n<p>@param indentation [String] The string used …\n"],["id_selector","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-id_selector","()",""],["ident","Sass::Script::Lexer","Sass/Script/Lexer.html#method-i-ident","()",""],["ident","Sass::Script::Parser","Sass/Script/Parser.html#method-i-ident","()",""],["identifier","Sass::Script::Value::Helpers","Sass/Script/Value/Helpers.html#method-i-identifier","(str)",""],["ie_hex_str","Sass::Script::Functions","Sass/Script/Functions.html#method-i-ie_hex_str","(color)","<p>Converts a color into the format understood by IE filters.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ie</span><span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">hex</span><span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">str</span>(<span class=\"ruby-comment\">#abc) =&gt; #FFAABBCC</span>\n<span class=\"ruby-identifier\">ie</span><span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">hex</span><span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">str</span>(<span class=\"ruby-comment\">#3322BB) ...</span>\n</pre>\n"],["if","Sass::Script::Functions","Sass/Script/Functions.html#method-i-if","(condition, if_true, if_false)","<p>Returns one of two values, depending on whether or not `$condition` is\ntrue. Just like in `@if`, all …\n"],["if_directive","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-if_directive","(start_pos)",""],["import","Sass::Tree::ImportNode","Sass/Tree/ImportNode.html#method-i-import","()",""],["import_arg","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-import_arg","()",""],["import_directive","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-import_directive","(start_pos)",""],["important","Sass::Script::CssLexer","Sass/Script/CssLexer.html#method-i-important","()",""],["imported_file","Sass::Tree::ImportNode","Sass/Tree/ImportNode.html#method-i-imported_file","()","<p>Returns the imported file.\n<p>@return [Sass::Engine] @raise [Sass::SyntaxError] If no file could be found\n…\n"],["include","Sass::Script::Functions","Sass/Script/Functions.html#method-i-include","(*args)",""],["include_directive","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-include_directive","(start_pos)",""],["included","Sass::Logger::LogLevel","Sass/Logger/LogLevel.html#method-c-included","(base)",""],["index","Sass::Script::Functions","Sass/Script/Functions.html#method-i-index","(list, value)","<p>Returns the position of a value within a list. If the value isn’t found,\nreturns `null` instead.\n<p>Note …\n"],["inherited","Sass::Logger::LogLevel::ClassMethods","Sass/Logger/LogLevel/ClassMethods.html#method-i-inherited","(subclass)",""],["inherited","Sass::Tree::Node","Sass/Tree/Node.html#method-c-inherited","(base)",""],["inherited_hash_accessor","Sass::BaseEnvironment","Sass/BaseEnvironment.html#method-i-inherited_hash_accessor","(name)","<p>Note: when updating this, update sass/yard/inherited_hash.rb as well.\n"],["inherited_hash_reader","Sass::BaseEnvironment","Sass/BaseEnvironment.html#method-i-inherited_hash_reader","(name)",""],["inherited_hash_writer","Sass::BaseEnvironment","Sass/BaseEnvironment.html#method-i-inherited_hash_writer","(name)",""],["init_scanner!","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-init_scanner-21","()",""],["initialize_copy","OrderedHash","OrderedHash.html#method-i-initialize_copy","(other)",""],["inject_values","Sass::Util","Sass/Util.html#method-i-inject_values","(str, values)","<p>Undoes {#extract_values} by transforming a string with escape sequences\ninto an array of strings and …\n"],["inspect","OrderedHash","OrderedHash.html#method-i-inspect","()",""],["inspect","Sass::Script::Functions","Sass/Script/Functions.html#method-i-inspect","(value)","<p>Return a string containing the value as its Sass representation.\n<p>@overload inspect($value)\n\n<pre>@param $value ...</pre>\n"],["inspect","Sass::Script::Tree::Funcall","Sass/Script/Tree/Funcall.html#method-i-inspect","()","<p>@return [String] A string representation of the function call\n"],["inspect","Sass::Script::Tree::Interpolation","Sass/Script/Tree/Interpolation.html#method-i-inspect","()","<p>@return [String] A human-readable s-expression representation of the\ninterpolation\n"],["inspect","Sass::Script::Tree::ListLiteral","Sass/Script/Tree/ListLiteral.html#method-i-inspect","()",""],["inspect","Sass::Script::Tree::Literal","Sass/Script/Tree/Literal.html#method-i-inspect","()",""],["inspect","Sass::Script::Tree::MapLiteral","Sass/Script/Tree/MapLiteral.html#method-i-inspect","(opts = {})",""],["inspect","Sass::Script::Tree::Operation","Sass/Script/Tree/Operation.html#method-i-inspect","()","<p>@return [String] A human-readable s-expression representation of the\noperation\n"],["inspect","Sass::Script::Tree::StringInterpolation","Sass/Script/Tree/StringInterpolation.html#method-i-inspect","()","<p>@return [String] A human-readable s-expression representation of the\ninterpolation\n"],["inspect","Sass::Script::Tree::UnaryOperation","Sass/Script/Tree/UnaryOperation.html#method-i-inspect","()","<p>@return [String] A human-readable s-expression representation of the\noperation\n"],["inspect","Sass::Script::Tree::Variable","Sass/Script/Tree/Variable.html#method-i-inspect","(opts = {})","<p>@return [String] A string representation of the variable\n"],["inspect","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-inspect","()","<p>@return [String] A readable representation of the value\n"],["inspect","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-inspect","()","<p>Returns a string representation of the color.\n<p>@return [String] The hex value\n"],["inspect","Sass::Script::Value::List","Sass/Script/Value/List.html#method-i-inspect","()","<p>@see Value#inspect\n"],["inspect","Sass::Script::Value::Map","Sass/Script/Value/Map.html#method-i-inspect","(opts = {})",""],["inspect","Sass::Script::Value::Null","Sass/Script/Value/Null.html#method-i-inspect","()","<p>Returns a string representing a null value.\n<p>@return [String]\n"],["inspect","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-inspect","(opts = {})","<p>Returns a readable representation of this number.\n<p>This representation is valid CSS (and valid SassScript …\n"],["inspect","Sass::Selector::CommaSequence","Sass/Selector/CommaSequence.html#method-i-inspect","()","<p>Returns a string representation of the sequence. This is basically the\nselector string.\n<p>@return [String] …\n"],["inspect","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-i-inspect","()","<p>Returns a string representation of the sequence. This is basically the\nselector string.\n<p>@return [String] …\n"],["inspect","Sass::Selector::Simple","Sass/Selector/Simple.html#method-i-inspect","()","<p>Returns a string representation of the node. This is basically the selector\nstring.\n<p>@return [String]\n"],["inspect","Sass::Selector::SimpleSequence","Sass/Selector/SimpleSequence.html#method-i-inspect","()","<p>Returns a string representation of the sequence. This is basically the\nselector string.\n<p>@return [String] …\n"],["inspect","Sass::Source::Map::Mapping","Sass/Source/Map/Mapping.html#method-i-inspect","()",""],["inspect","Sass::Source::Position","Sass/Source/Position.html#method-i-inspect","()","<p>@return [String] A string representation of the source position.\n"],["inspect","Sass::Source::Range","Sass/Source/Range.html#method-i-inspect","()","<p>@return [String] A string representation of the source range.\n"],["inspect","Sass::Tree::Node","Sass/Tree/Node.html#method-i-inspect","()","<p>Returns a representation of the node for debugging purposes.\n<p>@return [String]\n"],["inspect","Sass::Tree::Visitors::Cssize::Bubble","Sass/Tree/Visitors/Cssize/Bubble.html#method-i-inspect","()",""],["inspect_obj","Sass::Util","Sass/Util.html#method-i-inspect_obj","(obj)","<p>Like `Object#inspect`, but preserves non-ASCII characters rather than\nescaping them under Ruby 1.9.2. …\n"],["int?","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-int-3F","()","<p>@return [Boolean] Whether or not this number is an integer.\n"],["int_to_rgba","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-c-int_to_rgba","(color)","<p>@private\n<p>Convert a ruby integer to a rgba components @param color [Fixnum] @return\n[Array&lt;Fixnum&gt;] …\n"],["interactive","Sass::Exec::Sass","Sass/Exec/Sass.html#method-i-interactive","()",""],["interp_ident","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-interp_ident","(start = IDENT)",""],["interp_ident","Sass::SCSS::StaticParser","Sass/SCSS/StaticParser.html#method-i-interp_ident","(ident = IDENT)",""],["interp_ident_or_var","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-interp_ident_or_var","()",""],["interp_name","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-interp_name","()",""],["interp_string","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-interp_string","()",""],["interp_string","Sass::SCSS::StaticParser","Sass/SCSS/StaticParser.html#method-i-interp_string","()",""],["interp_to_src","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-interp_to_src","(interp)",""],["interp_uri","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-interp_uri","()",""],["interp_uri","Sass::SCSS::StaticParser","Sass/SCSS/StaticParser.html#method-i-interp_uri","()",""],["interpolation","Sass::SCSS::CssParser","Sass/SCSS/CssParser.html#method-i-interpolation","()",""],["interpolation","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-interpolation","()",""],["interpolation","Sass::SCSS::StaticParser","Sass/SCSS/StaticParser.html#method-i-interpolation","()",""],["interpolation","Sass::Script::Parser","Sass/Script/Parser.html#method-i-interpolation","(first = space)",""],["interpolation_selector","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-interpolation_selector","()",""],["intersperse","Sass::Util","Sass/Util.html#method-i-intersperse","(enum, val)","<p>Intersperses a value in an enumerable, as would be done with `Array#join`\nbut without concatenating the …\n"],["invalid_charset_parent?","Sass::Tree::Visitors::CheckNesting","Sass/Tree/Visitors/CheckNesting.html#method-i-invalid_charset_parent-3F","(parent, child)",""],["invalid_content_parent?","Sass::Tree::Visitors::CheckNesting","Sass/Tree/Visitors/CheckNesting.html#method-i-invalid_content_parent-3F","(parent, child)",""],["invalid_extend_parent?","Sass::Tree::Visitors::CheckNesting","Sass/Tree/Visitors/CheckNesting.html#method-i-invalid_extend_parent-3F","(parent, child)",""],["invalid_function_child?","Sass::Tree::Visitors::CheckNesting","Sass/Tree/Visitors/CheckNesting.html#method-i-invalid_function_child-3F","(parent, child)",""],["invalid_function_parent?","Sass::Tree::Visitors::CheckNesting","Sass/Tree/Visitors/CheckNesting.html#method-i-invalid_function_parent-3F","(parent, child)",""],["invalid_import_parent?","Sass::Tree::Visitors::CheckNesting","Sass/Tree/Visitors/CheckNesting.html#method-i-invalid_import_parent-3F","(parent, child)",""],["invalid_mixindef_parent?","Sass::Tree::Visitors::CheckNesting","Sass/Tree/Visitors/CheckNesting.html#method-i-invalid_mixindef_parent-3F","(parent, child)",""],["invalid_prop_child?","Sass::Tree::Visitors::CheckNesting","Sass/Tree/Visitors/CheckNesting.html#method-i-invalid_prop_child-3F","(parent, child)",""],["invalid_prop_parent?","Sass::Tree::Visitors::CheckNesting","Sass/Tree/Visitors/CheckNesting.html#method-i-invalid_prop_parent-3F","(parent, child)",""],["invalid_return_parent?","Sass::Tree::Visitors::CheckNesting","Sass/Tree/Visitors/CheckNesting.html#method-i-invalid_return_parent-3F","(parent, child)",""],["invert","OrderedHash","OrderedHash.html#method-i-invert","()",""],["invert","Sass::Script::Functions","Sass/Script/Functions.html#method-i-invert","(color)","<p>Returns the inverse (negative) of a color. The red, green, and blue values\nare inverted, while the opacity …\n"],["invisible?","Sass::Tree::CharsetNode","Sass/Tree/CharsetNode.html#method-i-invisible-3F","()","<p>@see Node#invisible?\n"],["invisible?","Sass::Tree::CommentNode","Sass/Tree/CommentNode.html#method-i-invisible-3F","()","<p>Returns `true` if this is a silent comment or the current style doesn’t\nrender comments.\n<p>Comments starting …\n"],["invisible?","Sass::Tree::ImportNode","Sass/Tree/ImportNode.html#method-i-invisible-3F","()",""],["invisible?","Sass::Tree::MediaNode","Sass/Tree/MediaNode.html#method-i-invisible-3F","()","<p>True when the directive has no visible children.\n<p>@return [Boolean]\n"],["invisible?","Sass::Tree::Node","Sass/Tree/Node.html#method-i-invisible-3F","()","<p>True if {#to_s} will return `nil`; that is, if the node shouldn’t be\nrendered. Should only be called …\n"],["invisible?","Sass::Tree::PropNode","Sass/Tree/PropNode.html#method-i-invisible-3F","()","<p>A property node is invisible if its value is empty.\n<p>@return [Boolean]\n"],["invisible?","Sass::Tree::RuleNode","Sass/Tree/RuleNode.html#method-i-invisible-3F","()","<p>A rule node is invisible if it has only placeholder selectors.\n"],["invisible?","Sass::Tree::SupportsNode","Sass/Tree/SupportsNode.html#method-i-invisible-3F","()","<p>True when the directive has no visible children.\n<p>@return [Boolean]\n"],["ironruby?","Sass::Util","Sass/Util.html#method-i-ironruby-3F","()","<p>Whether or not this is running on IronRuby.\n<p>@return [Boolean]\n"],["is_a?","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-is_a-3F","(klass)",""],["is_any_of?","Sass::Tree::Visitors::CheckNesting","Sass/Tree/Visitors/CheckNesting.html#method-i-is_any_of-3F","(val, classes)",""],["is_base?","Sass::Stack::Frame","Sass/Stack/Frame.html#method-i-is_base-3F","()","<p>Whether this is the base frame.\n<p>@return [Boolean]\n"],["is_import?","Sass::Stack::Frame","Sass/Stack/Frame.html#method-i-is_import-3F","()","<p>Whether this frame represents an import.\n<p>@return [Boolean]\n"],["is_mixin?","Sass::Stack::Frame","Sass/Stack/Frame.html#method-i-is_mixin-3F","()","<p>Whether this frame represents a mixin.\n<p>@return [Boolean]\n"],["is_pseudo_map?","Sass::Script::Value::List","Sass/Script/Value/List.html#method-i-is_pseudo_map-3F","()","<p>Returns whether this is a list of pairs that can be used as a map.\n<p>@return [Boolean]\n"],["is_unit?","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-is_unit-3F","(unit)","<p>Checks whether the number has the numerator unit specified.\n<p>@example\n\n<pre>number = Sass::Script::Value::Number.new(10, ...</pre>\n"],["join","Sass::Script::Functions","Sass/Script/Functions.html#method-i-join","(list1, list2, separator = identifier(\"auto\"))","<p>Joins together two lists into one.\n<p>Unless `$separator` is passed, if one list is comma-separated and one …\n"],["jruby1_6?","Sass::Util","Sass/Util.html#method-i-jruby1_6-3F","()","<p>Wehter or not this is running under JRuby 1.6 or lower.\n"],["jruby?","Sass::Util","Sass/Util.html#method-i-jruby-3F","()","<p>Whether or not this is running on JRuby.\n<p>@return [Boolean]\n"],["jruby_version","Sass::Util","Sass/Util.html#method-i-jruby_version","()","<p>Returns an array of ints representing the JRuby version number.\n<p>@return [Array&lt;Fixnum&gt;]\n"],["json_escape_string","Sass::Util","Sass/Util.html#method-i-json_escape_string","(s)","<p>Escapes certain characters so that the result can be used as the JSON\nstring value. Returns the original …\n"],["json_value_of","Sass::Util","Sass/Util.html#method-i-json_value_of","(v)","<p>Converts the argument into a valid JSON value.\n<p>@param v [Fixnum, String, Array, Boolean, nil] @return …\n"],["key","Sass::CacheStores::Base","Sass/CacheStores/Base.html#method-i-key","(sass_dirname, sass_basename)","<p>Return the key for the sass file.\n<p>The `(sass_dirname, sass_basename)` pair should uniquely identify the …\n"],["key","Sass::Importers::Base","Sass/Importers/Base.html#method-i-key","(uri, options)","<p>Get the cache key pair for the given Sass URI. The URI need not be checked\nfor validity.\n<p>The only strict …\n"],["key","Sass::Importers::Filesystem","Sass/Importers/Filesystem.html#method-i-key","(name, options)","<p>@see Base#key\n"],["keys","OrderedHash","OrderedHash.html#method-i-keys","()",""],["keys","Sass::Util::NormalizedMap","Sass/Util/NormalizedMap.html#method-i-keys","()",""],["keywords","Sass::Script::Functions","Sass/Script/Functions.html#method-i-keywords","(args)","<p>Returns the map of named arguments passed to a function or mixin that takes\na variable argument list. …\n"],["keywords","Sass::Script::Value::ArgList","Sass/Script/Value/ArgList.html#method-i-keywords","()","<p>The keyword arguments attached to this list.\n<p>@return [NormalizedMap&lt;Value&gt;]\n"],["lcs","Sass::Util","Sass/Util.html#method-i-lcs","(x, y, &block)","<p>Computes a single longest common subsequence for `x` and `y`. If there are\nmore than one longest common …\n"],["lcs_backtrace","Sass::Util","Sass/Util.html#method-i-lcs_backtrace","(c, x, y, i, j, &block)","<p>Computes a single longest common subsequence for arrays x and y. Algorithm\nfrom\n[Wikipedia](en.wikipedia.org/wiki/Longest_common_subsequence_problem#Reading_out_an_LCS\n…\n"],["lcs_table","Sass::Util","Sass/Util.html#method-i-lcs_table","(x, y)","<p>Calculates the memoization table for the Least Common Subsequence\nalgorithm. Algorithm from [Wikipedia]( …\n"],["left_parens","Sass::Supports::Operator","Sass/Supports/Operator.html#method-i-left_parens","(str)",""],["legal_units?","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-legal_units-3F","()","<p>@return [Boolean] Whether or not this number has units that can be\nrepresented in CSS\n\n<pre>(that is, zero or ...</pre>\n"],["length","Sass::Script::Functions","Sass/Script/Functions.html#method-i-length","(list)","<p>Return the length of a list.\n<p>This can return the number of pairs in a map as well.\n<p>@example\n"],["lexer_class","Sass::SCSS::ScriptParser","Sass/SCSS/ScriptParser.html#method-i-lexer_class","()","<p>@private\n"],["lexer_class","Sass::Script::CssParser","Sass/Script/CssParser.html#method-i-lexer_class","()","<p>@private\n"],["lexer_class","Sass::Script::Parser","Sass/Script/Parser.html#method-i-lexer_class","()","<p>@private\n"],["lighten","Sass::Script::Functions","Sass/Script/Functions.html#method-i-lighten","(color, amount)","<p>Makes a color lighter. Takes a color and a number between `0%` and `100%`,\nand returns a color with the …\n"],["lightness","Sass::Script::Functions","Sass/Script/Functions.html#method-i-lightness","(color)","<p>Returns the lightness component of a color. See [the CSS3 HSL\nspecification]. Calculated from RGB where …\n"],["lightness","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-lightness","()","<p>The lightness component of the color.\n<p>@return [Numeric]\n"],["line","Sass::Script::Lexer","Sass/Script/Lexer.html#method-i-line","()","<p>The line number of the lexer’s current position.\n<p>@return [Fixnum]\n"],["line","Sass::Script::Parser","Sass/Script/Parser.html#method-i-line","()","<p>The line number of the parser’s current position.\n<p>@return [Fixnum]\n"],["line=","Sass::Selector::AbstractSequence","Sass/Selector/AbstractSequence.html#method-i-line-3D","(line)","<p>Sets the line of the Sass template on which this selector was declared.\nThis also sets the line for all …\n"],["line=","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-i-line-3D","(line)","<p>Sets the line of the Sass template on which this selector was declared.\nThis also sets the line for all …\n"],["line=","Sass::Tree::RuleNode","Sass/Tree/RuleNode.html#method-i-line-3D","(line)","<p>If we’ve precached the parsed selector, set the line on it, too.\n"],["lines","Sass::Tree::CommentNode","Sass/Tree/CommentNode.html#method-i-lines","()","<p>Returns the number of lines in the comment.\n<p>@return [Fixnum]\n"],["list","Sass::Script::Parser","Sass/Script/Parser.html#method-i-list","(first, start_pos)",""],["list","Sass::Script::Value::Helpers","Sass/Script/Value/Helpers.html#method-i-list","(*elements)","<p>@overload list(*elements, separator)\n\n<pre>Create a space-separated list from the arguments given.\n@param elements ...</pre>\n"],["list_separator","Sass::Script::Functions","Sass/Script/Functions.html#method-i-list_separator","(list)","<p>Returns the separator of a list. If the list doesn’t have a separator due\nto having fewer than two elements, …\n"],["listen_geq_2?","Sass::Util","Sass/Util.html#method-i-listen_geq_2-3F","()","<p>Returns whether this environment is using Listen version 2.0.0 or greater.\n<p>@return [Boolean]\n"],["listen_to","Sass::Plugin::Compiler","Sass/Plugin/Compiler.html#method-i-listen_to","(listener)",""],["literal","Sass::Script::Parser","Sass/Script/Parser.html#method-i-literal","()",""],["literal_node","Sass::Script::Parser","Sass/Script/Parser.html#method-i-literal_node","(value, source_range_or_start_pos, end_pos = source_position)","<p>@overload node(value, source_range)\n\n<pre>@param value [Sass::Script::Value::Base]\n@param source_range [Sass::Source::Range]</pre>\n"],["load_compass","Sass::Exec::Sass","Sass/Exec/Sass.html#method-i-load_compass","()",""],["load_listen!","Sass::Util","Sass/Util.html#method-i-load_listen-21","()",""],["load_paths","Sass","Sass.html#method-c-load_paths","()","<p>The global load paths for Sass files. This is meant for plugins and\nlibraries to register the paths to …\n"],["load_paths","Sass::Plugin::Compiler","Sass/Plugin/Compiler.html#method-i-load_paths","(opts = options)",""],["log","Sass::Logger::Base","Sass/Logger/Base.html#method-i-log","(level, message)",""],["log_level","Sass::Logger::LogLevel::ClassMethods","Sass/Logger/LogLevel/ClassMethods.html#method-i-log_level","(name, options = {})",""],["log_level?","Sass::Logger::LogLevel::ClassMethods","Sass/Logger/LogLevel/ClassMethods.html#method-i-log_level-3F","(level, min_level)",""],["log_levels","Sass::Logger::LogLevel::ClassMethods","Sass/Logger/LogLevel/ClassMethods.html#method-i-log_levels","()",""],["logging_level?","Sass::Logger::Base","Sass/Logger/Base.html#method-i-logging_level-3F","(level)",""],["lstrip","Sass::Tree::Visitors::ToCss","Sass/Tree/Visitors/ToCss.html#method-i-lstrip","()","<p>lstrip the first output in the given block.\n"],["lt","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-lt","(other)","<p>The SassScript `&lt;` operation.\n<p>@param other [Number] The right-hand side of the operator @return [Boolean]\n…\n"],["lte","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-lte","(other)","<p>The SassScript `&lt;=` operation.\n<p>@param other [Number] The right-hand side of the operator @return [Boolean]\n…\n"],["macruby?","Sass::Util","Sass/Util.html#method-i-macruby-3F","()","<p>Whether or not this is running under MacRuby.\n<p>@return [Boolean]\n"],["make_cseq","Sass::CSS","Sass/CSS.html#method-i-make_cseq","(*seqs)","<p>Create a {Sass::Selector::CommaSequence}.\n<p>@param seqs [Array&lt;Sass::Selector::Sequence&gt;] @return …\n"],["make_seq","Sass::CSS","Sass/CSS.html#method-i-make_seq","(*sseqs)","<p>Create a {Sass::Selector::CommaSequence} containing only a single\n{Sass::Selector::Sequence}.\n<p>@param sseqs …\n"],["make_sseq","Sass::CSS","Sass/CSS.html#method-i-make_sseq","(subject, *sseqs)","<p>Create a {Sass::Selector::CommaSequence} containing only a single\n{Sass::Selector::Sequence} which in …\n"],["map","Sass::Script::Parser","Sass/Script/Parser.html#method-i-map","()",""],["map","Sass::Script::Value::Helpers","Sass/Script/Value/Helpers.html#method-i-map","(hash)","<p>Construct a Sass map.\n<p>@param hash [Hash&lt;Sass::Script::Value::Base,\n\n<pre>Sass::Script::Value::Base&gt;] A Ruby ...</pre>\n"],["map","Sass::Util::NormalizedMap","Sass/Util/NormalizedMap.html#method-i-map","()",""],["map_get","Sass::Script::Functions","Sass/Script/Functions.html#method-i-map_get","(map, key)","<p>Returns the value in a map associated with the given key. If the map\ndoesn’t have such a key, returns …\n"],["map_has_key","Sass::Script::Functions","Sass/Script/Functions.html#method-i-map_has_key","(map, key)","<p>Returns whether a map has a value associated with a given key.\n<p>@example\n\n<pre>map-has-key((&quot;foo&quot;: 1, &quot;bar&quot;: 2), ...</pre>\n"],["map_hash","Sass::Util","Sass/Util.html#method-i-map_hash","(hash)","<p>Maps the key-value pairs of a hash according to a block.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">map_hash</span>({:<span class=\"ruby-identifier\">foo</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;bar&quot;</span>, :<span class=\"ruby-identifier\">baz</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;bang&quot;</span>}) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["map_keys","Sass::Script::Functions","Sass/Script/Functions.html#method-i-map_keys","(map)","<p>Returns a list of all keys in a map.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">map</span><span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">keys</span>((<span class=\"ruby-string\">&quot;foo&quot;</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-string\">&quot;bar&quot;</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-value\">2</span>)) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;foo&quot;</span>, <span class=\"ruby-string\">&quot;bar&quot;</span>\n</pre>\n"],["map_keys","Sass::Util","Sass/Util.html#method-i-map_keys","(hash)","<p>Maps the keys in a hash according to a block.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">map_keys</span>({:<span class=\"ruby-identifier\">foo</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;bar&quot;</span>, :<span class=\"ruby-identifier\">baz</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;bang&quot;</span>}) {<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">k</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">k</span>.<span class=\"ruby-identifier\">to_s</span>} <span class=\"ruby-operator\">...</span>\n</pre>\n"],["map_merge","Sass::Script::Functions","Sass/Script/Functions.html#method-i-map_merge","(map1, map2)","<p>Merges two maps together into a new map. Keys in `$map2` will take\nprecedence over keys in `$map1`.\n<p>This …\n"],["map_pair","Sass::Script::Parser","Sass/Script/Parser.html#method-i-map_pair","(key = nil)",""],["map_remove","Sass::Script::Functions","Sass/Script/Functions.html#method-i-map_remove","(map, key)","<p>Returns a new map with a key removed.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">map</span><span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">remove</span>((<span class=\"ruby-string\">&quot;foo&quot;</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-string\">&quot;bar&quot;</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-value\">2</span>), <span class=\"ruby-string\">&quot;bar&quot;</span>) =<span class=\"ruby-operator\">&gt;</span> (<span class=\"ruby-string\">&quot;foo&quot;</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-value\">1</span>)\n<span class=\"ruby-identifier\">map</span><span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">remove</span>((<span class=\"ruby-string\">&quot;foo&quot;</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["map_vals","Sass::Util","Sass/Util.html#method-i-map_vals","(hash)","<p>Maps the values in a hash according to a block.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">map_values</span>({:<span class=\"ruby-identifier\">foo</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;bar&quot;</span>, :<span class=\"ruby-identifier\">baz</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;bang&quot;</span>}) {<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">v</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["map_values","Sass::Script::Functions","Sass/Script/Functions.html#method-i-map_values","(map)","<p>Returns a list of all values in a map. This list may include duplicate\nvalues, if multiple keys have …\n"],["match?","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-match-3F","(pattern)",""],["matched_size","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-matched_size","()",""],["max","Sass::Script::Functions","Sass/Script/Functions.html#method-i-max","(*values)","<p>Finds the maximum of several numbers. This function takes any number of\narguments.\n<p>@example\n\n<pre>max(1px, 4px) ...</pre>\n"],["media_directive","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-media_directive","(start_pos)",""],["media_expr","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-media_expr","()","<p>Aliases allow us to use different descriptions if the same expression fails\nin different contexts.\n"],["media_query","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-media_query","()",""],["media_query_list","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-media_query_list","()","<p>www.w3.org/TR/css3-mediaqueries/#syntax\n"],["merge","OrderedHash","OrderedHash.html#method-i-merge","(other_hash)",""],["merge","Sass::Media::Query","Sass/Media/Query.html#method-i-merge","(other)","<p>Merges this query with another. The returned query queries for the\nintersection between the two inputs. …\n"],["merge","Sass::Media::QueryList","Sass/Media/QueryList.html#method-i-merge","(other)","<p>Merges this query list with another. The returned query list queries for\nthe intersection between the …\n"],["merge","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-merge","(arr)",""],["merge!","OrderedHash","OrderedHash.html#method-i-merge-21","(other_hash)",""],["merge_adjacent_strings","Sass::Util","Sass/Util.html#method-i-merge_adjacent_strings","(arr)","<p>Concatenates all strings that are adjacent in an array, while leaving other\nelements as they are.\n<p>@example …\n"],["merge_final_ops","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-i-merge_final_ops","(seq1, seq2, res = [])","<p>Extracts final selector combinators (`“+”`, `“&gt;”`, `“~”`) and the\nselectors …\n"],["merge_initial_ops","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-i-merge_initial_ops","(seq1, seq2)","<p>Extracts initial selector combinators (`“+”`, `“&gt;”`, `“~”`, and `“n”`) …\n"],["method_missing","Sass::Plugin","Sass/Plugin.html#method-i-method_missing","(method, *args, &block)","<p>All other method invocations are proxied to the {#compiler}.\n<p>@see #compiler @see Sass::Plugin::Compiler …\n"],["method_missing","Sass::Util::NormalizedMap","Sass/Util/NormalizedMap.html#method-i-method_missing","(method, *args, &block)",""],["method_missing","Sass::Util::StaticConditionalContext","Sass/Util/StaticConditionalContext.html#method-i-method_missing","(name, *args)","<p>Checks whether or not a variable is defined for this context.\n<p>@param name [Symbol] The name of the variable …\n"],["min","Sass::Script::Functions","Sass/Script/Functions.html#method-i-min","(*numbers)","<p>Finds the minimum of several numbers. This function takes any number of\narguments.\n<p>@example\n\n<pre>min(1px, 4px) ...</pre>\n"],["minus","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-minus","(other)","<p>The SassScript `-` operation.\n<p>@param other [Value] The right-hand side of the operator @return\n[Script::Value::String] …\n"],["minus","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-minus","(other)","<p>The SassScript `-` operation. Its functionality depends on the type of its\nargument:\n<p>{Number} : Subtracts …\n"],["minus","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-minus","(other)","<p>The SassScript binary `-` operation (e.g. `$a - $b`). Its functionality\ndepends on the type of its argument: …\n"],["mix","Sass::Script::Functions","Sass/Script/Functions.html#method-i-mix","(color1, color2, weight = number(50))","<p>Mixes two colors together. Specifically, takes the average of each of the\nRGB components, optionally …\n"],["mixin_arglist","Sass::Script::Parser","Sass/Script/Parser.html#method-i-mixin_arglist","()",""],["mixin_directive","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-mixin_directive","(start_pos)",""],["mixin_exists","Sass::Script::Functions","Sass/Script/Functions.html#method-i-mixin_exists","(name)","<p>Check whether a mixin with the given name exists.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">mixin</span><span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">exists</span>(<span class=\"ruby-identifier\">nonexistent</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">false</span>\n\n<span class=\"ruby-ivar\">@mixin</span> <span class=\"ruby-identifier\">red</span><span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">text</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["mod","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-mod","(other)","<p>The SassScript `%` operation. Its functionality depends on the type of its\nargument:\n<p>{Number} : Takes …\n"],["mod","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-mod","(other)","<p>The SassScript `%` operation.\n<p>@param other [Number] The right-hand side of the operator @return [Number]\n…\n"],["modify_backtrace","Sass::SyntaxError","Sass/SyntaxError.html#method-i-modify_backtrace","(attrs)","<p>Modify the top Sass backtrace entries (that is, the most deeply nested\nones) to have the given attributes. …\n"],["moz_document_function","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-moz_document_function","()",""],["moz_document_function","Sass::SCSS::StaticParser","Sass/SCSS/StaticParser.html#method-i-moz_document_function","()",""],["mtime","Sass::Importers::Base","Sass/Importers/Base.html#method-i-mtime","(uri, options)","<p>Returns the time the given Sass file was last modified.\n<p>If the given file has been deleted or the time …\n"],["mtime","Sass::Importers::Filesystem","Sass/Importers/Filesystem.html#method-i-mtime","(name, options)","<p>@see Base#mtime\n"],["mtime","Sass::Plugin::StalenessChecker","Sass/Plugin/StalenessChecker.html#method-i-mtime","(uri, importer)",""],["name","Sass::Tree::DirectiveNode","Sass/Tree/DirectiveNode.html#method-i-name","()","<p>@return [String] The name of the directive, including `@`.\n"],["name","Sass::Tree::MediaNode","Sass/Tree/MediaNode.html#method-i-name","()","<p>@see DirectiveNode#name\n"],["needs_map_warning?","Sass::Script::Value::List","Sass/Script/Value/List.html#method-i-needs_map_warning-3F","()","<p>Returns whether a warning still needs to be printed for this list being\nused as a map.\n<p>@return [Boolean] …\n"],["neq","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-neq","(other)","<p>The SassScript `!=` operation. **Note that this returns a\n{Sass::Script::Value::Bool} object, not a  …\n"],["neq","Sass::Script::Value::DeprecatedFalse","Sass/Script/Value/DeprecatedFalse.html#method-i-neq","(other)",""],["neq","Sass::Script::Value::Null","Sass/Script/Value/Null.html#method-i-neq","(other)",""],["nest_seqs","Sass::CSS","Sass/CSS.html#method-i-nest_seqs","(root)","<p>Make rules use nesting so that\n\n<pre>foo\n  color: green\nfoo bar\n  color: red\nfoo baz\n  color: blue</pre>\n<p>becomes\n"],["nested_properties!","Sass::SCSS::CssParser","Sass/SCSS/CssParser.html#method-i-nested_properties-21","(node, space)",""],["nested_properties!","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-nested_properties-21","(node, space)",""],["new","OrderedHash","OrderedHash.html#method-c-new","(*args)","<p>In MRI the Hash class is core and written in C. In particular, methods are\nprogrammed with explicit  …\n"],["new","Sass::BaseEnvironment","Sass/BaseEnvironment.html#method-c-new","(parent = nil, options = nil)","<p>@param options [{Symbol =&gt; Object}] The options hash. See\n\n<pre>{file:SASS_REFERENCE.md#sass_options the ...</pre>\n"],["new","Sass::CSS","Sass/CSS.html#method-c-new","(template, options = {})","<p>@param template [String] The CSS stylesheet.\n\n<pre>This stylesheet can be encoded using any encoding\nthat can ...</pre>\n"],["new","Sass::CacheStores::Chain","Sass/CacheStores/Chain.html#method-c-new","(*caches)","<p>Create a new cache chaining the given caches.\n<p>@param caches [Array&lt;Sass::CacheStores::Base&gt;] The …\n"],["new","Sass::CacheStores::Filesystem","Sass/CacheStores/Filesystem.html#method-c-new","(cache_location)","<p>@param cache_location [String] see {#cache_location}\n"],["new","Sass::CacheStores::Memory","Sass/CacheStores/Memory.html#method-c-new","()","<p>Create a new, empty cache store.\n"],["new","Sass::CacheStores::Null","Sass/CacheStores/Null.html#method-c-new","()",""],["new","Sass::Engine","Sass/Engine.html#method-c-new","(template, options = {})","<p>Creates a new Engine. Note that Engine should only be used directly when\ncompiling in-memory Sass code. …\n"],["new","Sass::Exec::Generic","Sass/Exec/Generic.html#method-c-new","(args)","<p>@param args [Array&lt;String&gt;] The command-line arguments\n"],["new","Sass::Exec::Sass","Sass/Exec/Sass.html#method-c-new","(args)","<p>@param args [Array&lt;String&gt;] The command-line arguments\n"],["new","Sass::Exec::SassConvert","Sass/Exec/SassConvert.html#method-c-new","(args)","<p>@param args [Array&lt;String&gt;] The command-line arguments\n"],["new","Sass::Exec::Scss","Sass/Exec/Scss.html#method-c-new","(args)","<p>@param args [Array&lt;String&gt;] The command-line arguments\n"],["new","Sass::Importers::DeprecatedPath","Sass/Importers/DeprecatedPath.html#method-c-new","(root)","<p>@param root [String] The absolute, expanded path to the folder that is\ndeprecated.\n"],["new","Sass::Importers::Filesystem","Sass/Importers/Filesystem.html#method-c-new","(root)","<p>Creates a new filesystem importer that imports files relative to a given\npath.\n<p>@param root [String] The …\n"],["new","Sass::Logger::Base","Sass/Logger/Base.html#method-c-new","(log_level = :debug)",""],["new","Sass::Media::Query","Sass/Media/Query.html#method-c-new","(modifier, type, expressions)","<p>@param modifier [Array&lt;String, Sass::Script::Tree::Node&gt;] See\n{#modifier} @param type [Array&lt;String, …\n"],["new","Sass::Media::QueryList","Sass/Media/QueryList.html#method-c-new","(queries)","<p>@param queries [Array&lt;Query&gt;] See {#queries}\n"],["new","Sass::Plugin::Compiler","Sass/Plugin/Compiler.html#method-c-new","(opts = {})","<p>Creates a new compiler.\n<p>@param opts [{Symbol =&gt; Object}]\n\n<pre>See {file:SASS_REFERENCE.md#sass_options the ...</pre>\n"],["new","Sass::Plugin::Rack","Sass/Plugin/Rack.html#method-c-new","(app, dwell = 1.0)","<p>Initialize the middleware.\n<p>@param app [#call] The Rack application @param dwell [Float] See {#dwell}\n"],["new","Sass::Plugin::StalenessChecker","Sass/Plugin/StalenessChecker.html#method-c-new","(options)","<p>Creates a new StalenessChecker for checking the staleness of several\nstylesheets at once.\n<p>@param options …\n"],["new","Sass::Repl","Sass/Repl.html#method-c-new","(options = {})","<p>@param options [{Symbol =&gt; Object}] An options hash.\n"],["new","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-c-new","(str, filename, importer, line = 1, offset = 1)","<p>@param str [String, StringScanner] The source document to parse.\n\n<pre>Note that `Parser` *won't* raise a nice ...</pre>\n"],["new","Sass::Script::Functions::EvaluationContext","Sass/Script/Functions/EvaluationContext.html#method-c-new","(environment)","<p>@param environment [Environment] See {#environment}\n"],["new","Sass::Script::Lexer","Sass/Script/Lexer.html#method-c-new","(str, line, offset, options)","<p>@param str [String, StringScanner] The source text to lex @param line\n[Fixnum] The 1-based line on which …\n"],["new","Sass::Script::Parser","Sass/Script/Parser.html#method-c-new","(str, line, offset, options = {})","<p>@param str [String, StringScanner] The source text to parse @param line\n[Fixnum] The line on which the …\n"],["new","Sass::Script::Tree::Funcall","Sass/Script/Tree/Funcall.html#method-c-new","(name, args, keywords, splat, kwarg_splat)","<p>@param name [String] See {#name} @param args [Array&lt;Node&gt;] See\n{#args} @param keywords [Sass::Util::NormalizedMap&lt;Node&gt;] …\n"],["new","Sass::Script::Tree::Interpolation","Sass/Script/Tree/Interpolation.html#method-c-new","(before, mid, after, wb, wa, originally_text = false)","<p>Interpolation in a property is of the form `before #{mid} after`.\n<p>@param before [Node] See {Interpolation#before} …\n"],["new","Sass::Script::Tree::ListLiteral","Sass/Script/Tree/ListLiteral.html#method-c-new","(elements, separator)","<p>Creates a new list literal.\n<p>@param elements [Array&lt;Node&gt;] See {#elements} @param separator\n[Symbol] …\n"],["new","Sass::Script::Tree::Literal","Sass/Script/Tree/Literal.html#method-c-new","(value)","<p>Creates a new literal value.\n<p>@param value [Sass::Script::Value::Base] @see #value\n"],["new","Sass::Script::Tree::MapLiteral","Sass/Script/Tree/MapLiteral.html#method-c-new","(pairs)","<p>Creates a new map literal.\n<p>@param pairs [Array&lt;(Node, Node)&gt;] See {#pairs}\n"],["new","Sass::Script::Tree::Operation","Sass/Script/Tree/Operation.html#method-c-new","(operand1, operand2, operator)","<p>@param operand1 [Sass::Script::Tree::Node] The parse-tree node\n\n<pre>for the right-hand side of the operator</pre>\n"],["new","Sass::Script::Tree::StringInterpolation","Sass/Script/Tree/StringInterpolation.html#method-c-new","(before, mid, after)","<p>Interpolation in a string is of the form `“before #{mid} after”`, where\n`before` and `after` …\n"],["new","Sass::Script::Tree::UnaryOperation","Sass/Script/Tree/UnaryOperation.html#method-c-new","(operand, operator)","<p>@param operand [Script::Node] See {#operand} @param operator [Symbol] See\n{#operator}\n"],["new","Sass::Script::Tree::Variable","Sass/Script/Tree/Variable.html#method-c-new","(name)","<p>@param name [String] See {#name}\n"],["new","Sass::Script::Value::ArgList","Sass/Script/Value/ArgList.html#method-c-new","(value, keywords, separator)","<p>Creates a new argument list.\n<p>@param value [Array&lt;Value&gt;] See {List#value}. @param keywords\n[Hash&lt;String, …\n"],["new","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-c-new","(value = nil)","<p>Creates a new value.\n<p>@param value [Object] The object for {#value}\n"],["new","Sass::Script::Value::Bool","Sass/Script/Value/Bool.html#method-c-new","(value)","<p>We override object creation so that users of the core API will not need to\nknow that booleans are specific …\n"],["new","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-c-new","(attrs, allow_both_rgb_and_hsl = false)","<p>Constructs an RGB or HSL color object, optionally with an alpha channel.\n<p>The RGB values must be between …\n"],["new","Sass::Script::Value::DeprecatedFalse","Sass/Script/Value/DeprecatedFalse.html#method-c-new","(environment)",""],["new","Sass::Script::Value::DeprecatedFalse","Sass/Script/Value/DeprecatedFalse.html#method-c-new","(environment)",""],["new","Sass::Script::Value::List","Sass/Script/Value/List.html#method-c-new","(value, separator)","<p>Creates a new list.\n<p>@param value [Array&lt;Value&gt;] See {#value} @param separator [Symbol]\nSee {#separator} …\n"],["new","Sass::Script::Value::Map","Sass/Script/Value/Map.html#method-c-new","(hash)","<p>Creates a new map.\n<p>@param hash [Hash&lt;Node, Node&gt;]\n"],["new","Sass::Script::Value::Null","Sass/Script/Value/Null.html#method-c-new","()","<p>We override object creation so that users of the core API will not need to\nknow that null is a specific …\n"],["new","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-c-new","(value, numerator_units = NO_UNITS, denominator_units = NO_UNITS)","<p>@param value [Numeric] The value of the number @param numerator_units\n[::String, Array&lt;::String&gt;] …\n"],["new","Sass::Script::Value::String","Sass/Script/Value/String.html#method-c-new","(value, type = :identifier)","<p>Creates a new string.\n<p>@param value [String] See {#value} @param type [Symbol] See {#type}\n"],["new","Sass::Selector::Attribute","Sass/Selector/Attribute.html#method-c-new","(name, namespace, operator, value, flags)","<p>@param name [Array&lt;String, Sass::Script::Tree::Node&gt;] The attribute\nname @param namespace [Array&lt;String, …\n"],["new","Sass::Selector::Class","Sass/Selector/Class.html#method-c-new","(name)","<p>@param name [Array&lt;String, Sass::Script::Tree::Node&gt;] The class name\n"],["new","Sass::Selector::CommaSequence","Sass/Selector/CommaSequence.html#method-c-new","(seqs)","<p>@param seqs [Array&lt;Sequence&gt;] See {#members}\n"],["new","Sass::Selector::Element","Sass/Selector/Element.html#method-c-new","(name, namespace)","<p>@param name [Array&lt;String, Sass::Script::Tree::Node&gt;] The element\nname @param namespace [Array&lt;String, …\n"],["new","Sass::Selector::Id","Sass/Selector/Id.html#method-c-new","(name)","<p>@param name [Array&lt;String, Sass::Script::Tree::Node&gt;] The id name\n"],["new","Sass::Selector::Interpolation","Sass/Selector/Interpolation.html#method-c-new","(script)","<p>@param script [Sass::Script::Tree::Node] The script to run\n"],["new","Sass::Selector::Parent","Sass/Selector/Parent.html#method-c-new","(suffix = [])","<p>@param name [Array&lt;String, Sass::Script::Tree::Node&gt;] See {#suffix}\n"],["new","Sass::Selector::Placeholder","Sass/Selector/Placeholder.html#method-c-new","(name)","<p>@param name [Array&lt;String, Sass::Script::Tree::Node&gt;] The placeholder\nname\n"],["new","Sass::Selector::Pseudo","Sass/Selector/Pseudo.html#method-c-new","(type, name, arg)","<p>@param type [Symbol] See {#type} @param name [Array&lt;String,\nSass::Script::Tree::Node&gt;] The name …\n"],["new","Sass::Selector::SelectorPseudoClass","Sass/Selector/SelectorPseudoClass.html#method-c-new","(name, selector)","<p>@param name [String] The name of the pseudoclass @param selector\n[Selector::CommaSequence] The selector …\n"],["new","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-c-new","(seqs_and_ops)","<p>@param seqs_and_ops [Array&lt;SimpleSequence,\nString|Array&lt;Sass::Tree::Node, String&gt;&gt;]\n\n<pre>See \\{#members}</pre>\n"],["new","Sass::Selector::SimpleSequence","Sass/Selector/SimpleSequence.html#method-c-new","(selectors, subject, source_range = nil)","<p>@param selectors [Array&lt;Simple&gt;] See {#members} @param subject\n[Boolean] See {#subject?} @param …\n"],["new","Sass::Selector::Universal","Sass/Selector/Universal.html#method-c-new","(namespace)","<p>@param namespace [Array&lt;String, Sass::Script::Tree::Node&gt;, nil] See\n{#namespace}\n"],["new","Sass::Source::Map","Sass/Source/Map.html#method-c-new","()",""],["new","Sass::Source::Position","Sass/Source/Position.html#method-c-new","(line, offset)","<p>@param line [Fixnum] The source line @param offset [Fixnum] The source\noffset\n"],["new","Sass::Source::Range","Sass/Source/Range.html#method-c-new","(start_pos, end_pos, file, importer = nil)","<p>@param start_pos [Sass::Source::Position] See {#start_pos} @param end_pos\n[Sass::Source::Position] See …\n"],["new","Sass::Stack","Sass/Stack.html#method-c-new","()",""],["new","Sass::Stack::Frame","Sass/Stack/Frame.html#method-c-new","(filename, line, type, name = nil)",""],["new","Sass::Supports::Declaration","Sass/Supports/Declaration.html#method-c-new","(name, value)",""],["new","Sass::Supports::Interpolation","Sass/Supports/Interpolation.html#method-c-new","(value)",""],["new","Sass::Supports::Negation","Sass/Supports/Negation.html#method-c-new","(condition)",""],["new","Sass::Supports::Operator","Sass/Supports/Operator.html#method-c-new","(left, right, op)",""],["new","Sass::SyntaxError","Sass/SyntaxError.html#method-c-new","(msg, attrs = {})","<p>@param msg [String] The error message @param attrs [{Symbol =&gt; Object}]\nThe information in the backtrace …\n"],["new","Sass::Tree::AtRootNode","Sass/Tree/AtRootNode.html#method-c-new","(query = nil)",""],["new","Sass::Tree::CharsetNode","Sass/Tree/CharsetNode.html#method-c-new","(name)","<p>@param name [String] see {#name}\n"],["new","Sass::Tree::CommentNode","Sass/Tree/CommentNode.html#method-c-new","(value, type)","<p>@param value [Array&lt;String, Sass::Script::Tree::Node&gt;] See {#value}\n@param type [Symbol] See { …\n"],["new","Sass::Tree::CssImportNode","Sass/Tree/CssImportNode.html#method-c-new","(uri, query = [])","<p>@param uri [String, Sass::Script::Tree::Node] See {#uri} @param query\n[Array&lt;String, Sass::Script::Tree::Node&gt;] …\n"],["new","Sass::Tree::DebugNode","Sass/Tree/DebugNode.html#method-c-new","(expr)","<p>@param expr [Script::Tree::Node] The expression to print\n"],["new","Sass::Tree::DirectiveNode","Sass/Tree/DirectiveNode.html#method-c-new","(value)","<p>@param value [Array&lt;String, Sass::Script::Tree::Node&gt;] See {#value}\n"],["new","Sass::Tree::EachNode","Sass/Tree/EachNode.html#method-c-new","(vars, list)","<p>@param vars [Array&lt;String&gt;] The names of the loop variables @param\nlist [Script::Tree::Node] The …\n"],["new","Sass::Tree::ExtendNode","Sass/Tree/ExtendNode.html#method-c-new","(selector, optional, selector_source_range)","<p>@param selector [Array&lt;String, Sass::Script::Tree::Node&gt;]\n\n<pre>The CSS selector to extend,\ninterspersed ...</pre>\n"],["new","Sass::Tree::ForNode","Sass/Tree/ForNode.html#method-c-new","(var, from, to, exclusive)","<p>@param var [String] See {#var} @param from [Script::Tree::Node] See {#from}\n@param to [Script::Tree::Node] …\n"],["new","Sass::Tree::FunctionNode","Sass/Tree/FunctionNode.html#method-c-new","(name, args, splat)","<p>@param name [String] The function name @param args\n[Array&lt;(Script::Tree::Node, Script::Tree::Node …\n"],["new","Sass::Tree::IfNode","Sass/Tree/IfNode.html#method-c-new","(expr)","<p>@param expr [Script::Expr] See {#expr}\n"],["new","Sass::Tree::ImportNode","Sass/Tree/ImportNode.html#method-c-new","(imported_filename)","<p>@param imported_filename [String] The name of the imported file\n"],["new","Sass::Tree::MediaNode","Sass/Tree/MediaNode.html#method-c-new","(query)","<p>@param query [Array&lt;String, Sass::Script::Tree::Node&gt;] See {#query}\n"],["new","Sass::Tree::MixinDefNode","Sass/Tree/MixinDefNode.html#method-c-new","(name, args, splat)","<p>@param name [String] The mixin name @param args\n[Array&lt;(Script::Tree::Node, Script::Tree::Node)&gt;] …\n"],["new","Sass::Tree::MixinNode","Sass/Tree/MixinNode.html#method-c-new","(name, args, keywords, splat, kwarg_splat)","<p>@param name [String] The name of the mixin @param args\n[Array&lt;Script::Tree::Node&gt;] See {#args} …\n"],["new","Sass::Tree::Node","Sass/Tree/Node.html#method-c-new","()",""],["new","Sass::Tree::PropNode","Sass/Tree/PropNode.html#method-c-new","(name, value, prop_syntax)","<p>@param name [Array&lt;String, Sass::Script::Tree::Node&gt;] See {#name}\n@param value [Sass::Script::Tree::Node] …\n"],["new","Sass::Tree::ReturnNode","Sass/Tree/ReturnNode.html#method-c-new","(expr)","<p>@param expr [Script::Tree::Node] The expression to return\n"],["new","Sass::Tree::RootNode","Sass/Tree/RootNode.html#method-c-new","(template)","<p>@param template [String] The Sass template from which this node was created\n"],["new","Sass::Tree::RuleNode","Sass/Tree/RuleNode.html#method-c-new","(rule, selector_source_range = nil)","<p>@param rule [Array&lt;String, Sass::Script::Tree::Node&gt;] @param\nselector_source_range [Sass::Source::Range] …\n"],["new","Sass::Tree::SupportsNode","Sass/Tree/SupportsNode.html#method-c-new","(name, condition)","<p>@param condition [Sass::Supports::Condition] See {#condition}\n"],["new","Sass::Tree::TraceNode","Sass/Tree/TraceNode.html#method-c-new","(name)","<p>@param name [String] The name of the trace entry to add.\n"],["new","Sass::Tree::VariableNode","Sass/Tree/VariableNode.html#method-c-new","(name, expr, guarded, global)","<p>@param name [String] The name of the variable @param expr\n[Script::Tree::Node] See {#expr} @param guarded …\n"],["new","Sass::Tree::Visitors::CheckNesting","Sass/Tree/Visitors/CheckNesting.html#method-c-new","()",""],["new","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-c-new","(options, format)",""],["new","Sass::Tree::Visitors::Cssize","Sass/Tree/Visitors/Cssize.html#method-c-new","()",""],["new","Sass::Tree::Visitors::Cssize::Bubble","Sass/Tree/Visitors/Cssize/Bubble.html#method-c-new","(node)",""],["new","Sass::Tree::Visitors::Extend","Sass/Tree/Visitors/Extend.html#method-c-new","(extends)",""],["new","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-c-new","(env)","<p>@comment\n\n<pre>rubocop:enable MethodLength</pre>\n"],["new","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-c-new","(options)",""],["new","Sass::Tree::Visitors::ToCss","Sass/Tree/Visitors/ToCss.html#method-c-new","(build_source_mapping = false)","<p>@param build_source_mapping [Boolean] Whether to build a\n\n<pre>\\{Sass::Source::Map} while creating the CSS output. ...</pre>\n"],["new","Sass::Tree::WarnNode","Sass/Tree/WarnNode.html#method-c-new","(expr)","<p>@param expr [Script::Tree::Node] The expression to print\n"],["new","Sass::Tree::WhileNode","Sass/Tree/WhileNode.html#method-c-new","(expr)","<p>@param expr [Script::Tree::Node] See {#expr}\n"],["new","Sass::Util::CrossPlatformRandom","Sass/Util/CrossPlatformRandom.html#method-c-new","(seed = nil)",""],["new","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-c-new","(str)",""],["new","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-c-new","(str)",""],["new","Sass::Util::NormalizedMap","Sass/Util/NormalizedMap.html#method-c-new","(map = nil)","<p>Create a normalized map\n"],["new","Sass::Util::StaticConditionalContext","Sass/Util/StaticConditionalContext.html#method-c-new","(set)","<p>@param set [#include?] The set of variables that are defined for this\ncontext.\n"],["new","Sass::Util::SubsetMap","Sass/Util/SubsetMap.html#method-c-new","()","<p>Creates a new, empty SubsetMap.\n"],["next","Sass::Script::Lexer","Sass/Script/Lexer.html#method-i-next","()","<p>Moves the lexer forward one token.\n<p>@return [Token] The token that was moved past\n"],["node","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-node","(node, start_pos, end_pos = source_position)",""],["node","Sass::Script::Parser","Sass/Script/Parser.html#method-i-node","(node, source_range_or_start_pos, end_pos = source_position)","<p>@overload node(node, source_range)\n\n<pre>@param node [Sass::Script::Tree::Node]\n@param source_range [Sass::Source::Range]</pre>\n"],["node_name","Sass::Tree::Visitors::Base","Sass/Tree/Visitors/Base.html#method-c-node_name","(node)","<p>Returns the name of a node as used in the `visit_*` method.\n<p>@param [Tree::Node] node The node. @return …\n"],["normalize","Sass::Util::NormalizedMap","Sass/Util/NormalizedMap.html#method-i-normalize","(key)","<p>Specifies how to transform the key.\n<p>This can be overridden to create other normalization behaviors.\n"],["normalize!","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-normalize-21","()",""],["normalize_indentation","Sass::Tree::CommentNode","Sass/Tree/CommentNode.html#method-i-normalize_indentation","(str)",""],["normalize_options","Sass::Engine","Sass/Engine.html#method-c-normalize_options","(options)","<p>Converts a Sass options hash into a standard form, filling in default\nvalues and resolving aliases.\n<p>@param …\n"],["normalize_template_location!","Sass::Plugin::Configuration","Sass/Plugin/Configuration.html#method-i-normalize_template_location-21","()",""],["normalized_load_paths","Sass::Plugin::Compiler","Sass/Plugin/Compiler.html#method-i-normalized_load_paths","()",""],["nth","Sass::Script::Functions","Sass/Script/Functions.html#method-i-nth","(list, n)","<p>Gets the nth item in a list.\n<p>Note that unlike some languages, the first item in a Sass list is number …\n"],["null","Sass::Script::Value::Helpers","Sass/Script/Value/Helpers.html#method-i-null","()","<p>Create a sass null value.\n<p>@return [Sass::Script::Value::Null]\n"],["null?","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-null-3F","()","<p>Returns whether or not this object is null.\n<p>@return [Boolean] `false`\n"],["null?","Sass::Script::Value::Null","Sass/Script/Value/Null.html#method-i-null-3F","()","<p>@return [Boolean] `true`\n"],["number","Sass::Script::Parser","Sass/Script/Parser.html#method-i-number","()",""],["number","Sass::Script::Value::Helpers","Sass/Script/Value/Helpers.html#method-i-number","(number, unit_string = nil)","<p>Construct a Sass Number from a ruby number.\n<p>@param number [::Number] A numeric value. @param unit_string …\n"],["numeric_transformation","Sass::Script::Functions","Sass/Script/Functions.html#method-i-numeric_transformation","(value)","<p>This method implements the pattern of transforming a numeric value into\nanother numeric value with the …\n"],["offset","Sass::Script::Lexer","Sass/Script/Lexer.html#method-i-offset","()","<p>The number of bytes into the current line of the lexer’s current position\n(1-based).\n<p>@return [Fixnum] …\n"],["offset","Sass::Script::Parser","Sass/Script/Parser.html#method-i-offset","()","<p>The column number of the parser’s current position.\n<p>@return [Fixnum]\n"],["on_file_changed","Sass::Plugin::Compiler","Sass/Plugin/Compiler.html#method-i-on_file_changed","(individual_files, modified, added, removed)",""],["opacify","Sass::Script::Functions","Sass/Script/Functions.html#method-i-opacify","(color, amount)","<p>Makes a color more opaque. Takes a color and a number between 0 and 1, and\nreturns a color with the opacity …\n"],["opacity","Sass::Script::Functions","Sass/Script/Functions.html#method-i-opacity","(color)","<p>Returns the alpha component (opacity) of a color. This is 1 unless\notherwise specified.\n<p>@overload opacity($color) …\n"],["open_file","Sass::Exec::Generic","Sass/Exec/Generic.html#method-i-open_file","(filename, flag = 'r')",""],["operand_to_sass","Sass::Script::Tree::Operation","Sass/Script/Tree/Operation.html#method-i-operand_to_sass","(op, side, opts)",""],["operate","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-operate","(other, operation)",""],["operator","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-operator","()",""],["optional?","Sass::Tree::ExtendNode","Sass/Tree/ExtendNode.html#method-i-optional-3F","()","<p>Whether the `@extend` is allowed to match no selectors or not.\n<p>@return [Boolean]\n"],["options","Sass::Plugin","Sass/Plugin.html#method-i-options","()","<p>There’s a small speedup by not using method missing for frequently\ndelegated methods.\n"],["options","Sass::Plugin::Configuration","Sass/Plugin/Configuration.html#method-i-options","()","<p>An options hash. See {file:SASS_REFERENCE.md#sass_options the Sass options\ndocumentation}.\n<p>@return [{Symbol …\n"],["options","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-options","()","<p>Returns the options hash for this node.\n<p>@return [{Symbol =&gt; Object}] @raise [Sass::SyntaxError] if …\n"],["options=","Sass::Script::Tree::Literal","Sass/Script/Tree/Literal.html#method-i-options-3D","(options)","<p>@see Node#options=\n"],["options=","Sass::Script::Tree::Node","Sass/Script/Tree/Node.html#method-i-options-3D","(options)","<p>Sets the options hash for this node, as well as for all child nodes. See\n{file:SASS_REFERENCE.md#sass_options …\n"],["options=","Sass::Script::Value::List","Sass/Script/Value/List.html#method-i-options-3D","(options)","<p>@see Value#options=\n"],["options=","Sass::Script::Value::Map","Sass/Script/Value/Map.html#method-i-options-3D","(options)","<p>@see Value#options=\n"],["options=","Sass::Supports::Condition","Sass/Supports/Condition.html#method-i-options-3D","(options)","<p>Sets the options hash for the script nodes in the supports condition.\n<p>@param options [{Symbol =&gt; Object}] …\n"],["options=","Sass::Supports::Declaration","Sass/Supports/Declaration.html#method-i-options-3D","(options)",""],["options=","Sass::Supports::Interpolation","Sass/Supports/Interpolation.html#method-i-options-3D","(options)",""],["options=","Sass::Supports::Negation","Sass/Supports/Negation.html#method-i-options-3D","(options)",""],["options=","Sass::Supports::Operator","Sass/Supports/Operator.html#method-i-options-3D","(options)",""],["options=","Sass::Tree::Node","Sass/Tree/Node.html#method-i-options-3D","(options)","<p>Sets the options hash for the node and all its children.\n<p>@param options [{Symbol =&gt; Object}] The options …\n"],["options_for_importer","Sass::Tree::ImportNode","Sass/Tree/ImportNode.html#method-i-options_for_importer","()",""],["opts","Sass::Script::Tree::Node","Sass/Script/Tree/Node.html#method-i-opts","(value)","<p>Sets the {#options} field on the given value and returns it.\n<p>@param value [Sass::Script::Value] @return …\n"],["ord","Sass::Util","Sass/Util.html#method-i-ord","(c)","<p>Returns the ASCII code of the given character.\n<p>@param c [String] All characters but the first are ignored. …\n"],["ordered_hash","Sass::Util","Sass/Util.html#method-i-ordered_hash","(*pairs_or_hash)","<p>Converts a hash or a list of pairs into an order-preserving hash.\n<p>On Ruby 1.8.7, this uses the orderedhash …\n"],["output","Sass::Tree::Visitors::ToCss","Sass/Tree/Visitors/ToCss.html#method-i-output","(s)","<p>Add `s` to the output string and update the line and offset information\naccordingly.\n"],["paren","Sass::Script::CssParser","Sass/Script/CssParser.html#method-i-paren","()",""],["paren","Sass::Script::Parser","Sass/Script/Parser.html#method-i-paren","()",""],["parens","Sass::Supports::Negation","Sass/Supports/Negation.html#method-i-parens","(str)",""],["parent","Sass::Tree::Visitors::Cssize","Sass/Tree/Visitors/Cssize.html#method-i-parent","()","<p>Returns the immediate parent of the current node. @return [Tree::Node]\n"],["parent_ref_rules","Sass::CSS","Sass/CSS.html#method-i-parent_ref_rules","(root)","<p>Make rules use parent refs so that\n\n<pre>foo\n  color: green\nfoo.bar\n  color: blue</pre>\n<p>becomes\n"],["parent_selector","Sass::SCSS::CssParser","Sass/SCSS/CssParser.html#method-i-parent_selector","()",""],["parent_selector","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-parent_selector","()",""],["parent_superselector?","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-i-parent_superselector-3F","(seq1, seq2)","<p>Like {#_superselector?}, but compares the selectors in the context of\nparent selectors, as though they …\n"],["parse","Sass::Exec::Generic","Sass/Exec/Generic.html#method-i-parse","()","<p>Parses the command-line arguments and runs the executable. This does not\nhandle exceptions or exit the …\n"],["parse","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-parse","()","<p>Parses an SCSS document.\n<p>@return [Sass::Tree::RootNode] The root node of the document tree @raise\n[Sass::SyntaxError] …\n"],["parse","Sass::Script","Sass/Script.html#method-c-parse","(value, line, offset, options = {})","<p>Parses a string of SassScript\n<p>@param value [String] The SassScript @param line [Fixnum] The number of …\n"],["parse","Sass::Script::Parser","Sass/Script/Parser.html#method-c-parse","(*args)","<p>Parses a SassScript expression.\n<p>@overload parse(str, line, offset, filename = nil) @return\n[Script::Tree::Node] …\n"],["parse","Sass::Script::Parser","Sass/Script/Parser.html#method-i-parse","()","<p>Parses a SassScript expression.\n<p>@return [Script::Tree::Node] The root node of the parse tree @raise\n[Sass::SyntaxError] …\n"],["parse!","Sass::Exec::Generic","Sass/Exec/Generic.html#method-i-parse-21","()","<p>Parses the command-line arguments and runs the executable. Calls\n`Kernel#exit` at the end, so it never …\n"],["parse_at_root_directive","Sass::Engine","Sass/Engine.html#method-i-parse_at_root_directive","(parent, line, root, value, offset)",""],["parse_at_root_query","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-parse_at_root_query","()","<p>Parses an at-root query.\n<p>@return [Array&lt;String, Sass::Script;:Tree::Node&gt;] The interpolated\nquery. …\n"],["parse_charset_directive","Sass::Engine","Sass/Engine.html#method-i-parse_charset_directive","(parent, line, root, value, offset)",""],["parse_comment","Sass::Engine","Sass/Engine.html#method-i-parse_comment","(line)",""],["parse_content_directive","Sass::Engine","Sass/Engine.html#method-i-parse_content_directive","(parent, line, root, value, offset)",""],["parse_debug_directive","Sass::Engine","Sass/Engine.html#method-i-parse_debug_directive","(parent, line, root, value, offset)",""],["parse_directive","Sass::Engine","Sass/Engine.html#method-i-parse_directive","(parent, line, root)","<p>@comment\n\n<pre>rubocop:disable MethodLength</pre>\n"],["parse_each_directive","Sass::Engine","Sass/Engine.html#method-i-parse_each_directive","(parent, line, root, value, offset)",""],["parse_else_directive","Sass::Engine","Sass/Engine.html#method-i-parse_else_directive","(parent, line, root, value, offset)",""],["parse_extend_directive","Sass::Engine","Sass/Engine.html#method-i-parse_extend_directive","(parent, line, root, value, offset)",""],["parse_for_directive","Sass::Engine","Sass/Engine.html#method-i-parse_for_directive","(parent, line, root, value, offset)",""],["parse_function_definition_arglist","Sass::Script::Parser","Sass/Script/Parser.html#method-i-parse_function_definition_arglist","()","<p>Parses the argument list for a function definition.\n<p>@return [(Array&lt;Script::Tree::Node&gt;, Script::Tree::Node …\n"],["parse_function_directive","Sass::Engine","Sass/Engine.html#method-i-parse_function_directive","(parent, line, root, value, offset)",""],["parse_if_directive","Sass::Engine","Sass/Engine.html#method-i-parse_if_directive","(parent, line, root, value, offset)",""],["parse_import_arg","Sass::Engine","Sass/Engine.html#method-i-parse_import_arg","(scanner, offset)","<p>@comment\n\n<pre>rubocop:disable MethodLength</pre>\n"],["parse_import_directive","Sass::Engine","Sass/Engine.html#method-i-parse_import_directive","(parent, line, root, value, offset)",""],["parse_include_directive","Sass::Engine","Sass/Engine.html#method-i-parse_include_directive","(parent, line, root, value, offset)",""],["parse_input","Sass::Repl","Sass/Repl.html#method-i-parse_input","(environment, text)",""],["parse_interp","Sass::Engine","Sass/Engine.html#method-i-parse_interp","(text, offset = 0)",""],["parse_interp","Sass::Engine","Sass/Engine.html#method-c-parse_interp","(text, line, offset, options)","<p>It’s important that this have strings (at least) at the beginning, the end,\nand between each Script::Tree::Node …\n"],["parse_interp_ident","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-parse_interp_ident","()","<p>Parses an identifier with interpolation. Note that this won’t assert that\nthe identifier takes up the …\n"],["parse_interpolated","Sass::Script::Parser","Sass/Script/Parser.html#method-i-parse_interpolated","()","<p>Parses a SassScript expression within an interpolated segment (`#{}`). This\nmeans that it stops when …\n"],["parse_line","Sass::Engine","Sass/Engine.html#method-i-parse_line","(parent, line, root)",""],["parse_media_directive","Sass::Engine","Sass/Engine.html#method-i-parse_media_directive","(parent, line, root, value, offset)",""],["parse_media_query_list","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-parse_media_query_list","()","<p>Parses a media query list.\n<p>@return [Sass::Media::QueryList] The parsed query list @raise\n[Sass::SyntaxError] …\n"],["parse_mixin_definition","Sass::Engine","Sass/Engine.html#method-i-parse_mixin_definition","(line)",""],["parse_mixin_definition_arglist","Sass::Script::Parser","Sass/Script/Parser.html#method-i-parse_mixin_definition_arglist","()","<p>Parses the argument list for a mixin definition.\n<p>@return [(Array&lt;Script::Tree::Node&gt;, Script::Tree::Node …\n"],["parse_mixin_directive","Sass::Engine","Sass/Engine.html#method-i-parse_mixin_directive","(parent, line, root, value, offset)","<p>@comment\n\n<pre>rubocop:enable MethodLength</pre>\n"],["parse_mixin_include","Sass::Engine","Sass/Engine.html#method-i-parse_mixin_include","(line, root)",""],["parse_mixin_include_arglist","Sass::Script::Parser","Sass/Script/Parser.html#method-i-parse_mixin_include_arglist","()","<p>Parses the argument list for a mixin include.\n<p>@return [(Array&lt;Script::Tree::Node&gt;,\n\n<pre>       {String ...</pre>\n"],["parse_property","Sass::Engine","Sass/Engine.html#method-i-parse_property","(name, parsed_name, value, prop, line, start_offset)","<p>@comment\n\n<pre>rubocop:disable ParameterLists</pre>\n"],["parse_property_or_rule","Sass::Engine","Sass/Engine.html#method-i-parse_property_or_rule","(line)",""],["parse_return_directive","Sass::Engine","Sass/Engine.html#method-i-parse_return_directive","(parent, line, root, value, offset)",""],["parse_script","Sass::Engine","Sass/Engine.html#method-i-parse_script","(script, options = {})",""],["parse_selector","Sass::SCSS::StaticParser","Sass/SCSS/StaticParser.html#method-i-parse_selector","()","<p>Parses the text as a selector.\n<p>@param filename [String, nil] The file in which the selector appears,\n\n<pre>or ...</pre>\n"],["parse_selectors","Sass::CSS","Sass/CSS.html#method-i-parse_selectors","(root)","<p>Parse all the selectors in the document and assign them to\n{Sass::Tree::RuleNode#parsed_rules}.\n<p>@param …\n"],["parse_static_at_root_query","Sass::SCSS::StaticParser","Sass/SCSS/StaticParser.html#method-i-parse_static_at_root_query","()","<p>Parses a static at-root query.\n<p>@return [(Symbol, Array&lt;String&gt;)] The type of the query\n\n<pre>(`:with` or ...</pre>\n"],["parse_str","Sass::Script::Tree::StringInterpolation","Sass/Script/Tree/StringInterpolation.html#method-i-parse_str","(str)",""],["parse_string","Sass::Script::Parser","Sass/Script/Parser.html#method-i-parse_string","()","<p>Parse a single string value, possibly containing interpolation. Doesn’t\nassert that the scanner is finished …\n"],["parse_supports_condition","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-parse_supports_condition","()","<p>Parses a supports query condition.\n<p>@return [Sass::Supports::Condition] The parsed condition @raise\n[Sass::SyntaxError] …\n"],["parse_unit_string","Sass::Script::Value::Helpers","Sass/Script/Value/Helpers.html#method-i-parse_unit_string","(unit_string)","<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">parse_unit_string</span>(<span class=\"ruby-string\">&quot;em*px/in*%&quot;</span>) <span class=\"ruby-comment\"># =&gt; [[&quot;em&quot;, &quot;px], [&quot;in&quot;, &quot;%&quot;]]</span>\n</pre>\n<p>@param unit_string [String] A …\n"],["parse_until","Sass::Script::Parser","Sass/Script/Parser.html#method-i-parse_until","(tokens)","<p>Parses a SassScript expression, ending it when it encounters one of the\ngiven identifier tokens.\n<p>@param …\n"],["parse_variable","Sass::Engine","Sass/Engine.html#method-i-parse_variable","(line)",""],["parse_warn_directive","Sass::Engine","Sass/Engine.html#method-i-parse_warn_directive","(parent, line, root, value, offset)","<p>@comment\n\n<pre>rubocop:enable MethodLength</pre>\n"],["parse_while_directive","Sass::Engine","Sass/Engine.html#method-i-parse_while_directive","(parent, line, root, value, offset)",""],["path_has_two_subjects?","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-i-path_has_two_subjects-3F","(path)",""],["path_to","Sass::CacheStores::Filesystem","Sass/CacheStores/Filesystem.html#method-i-path_to","(key)","<p>Returns the path to a file for the given key.\n<p>@param key [String] @return [String] The path to the cache …\n"],["pathname","Sass::Util","Sass/Util.html#method-i-pathname","(path)","<p>Like `Pathname.new`, but normalizes Windows paths to always use backslash\nseparators.\n<p>`Pathname#relative_path_from` …\n"],["paths","Sass::Util","Sass/Util.html#method-i-paths","(arrs)","<p>Return an array of all possible paths through the given arrays.\n<p>@param arrs [Array&lt;Array&gt;] @return …\n"],["peek","Sass::Script::Lexer","Sass/Script/Lexer.html#method-i-peek","()","<p>Returns the next token without moving the lexer forward.\n<p>@return [Token] The next token\n"],["peek","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-peek","(len)",""],["peep","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-peep","(len)",""],["percentage","Sass::Script::Functions","Sass/Script/Functions.html#method-i-percentage","(number)","<p>Converts a unitless number to a percentage.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">percentage</span>(<span class=\"ruby-value\">0.2</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">20</span><span class=\"ruby-operator\">%</span>\n<span class=\"ruby-identifier\">percentage</span>(<span class=\"ruby-value\">100</span><span class=\"ruby-identifier\">px</span> <span class=\"ruby-operator\">/</span> <span class=\"ruby-value\">50</span><span class=\"ruby-identifier\">px</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["perform","Sass::Script::Functions::EvaluationContext","Sass/Script/Functions/EvaluationContext.html#method-i-perform","(node, env = environment.caller)","<p>Performs a node that has been delayed for execution.\n<p>@private @param node [Sass::Script::Tree::Node,\n\n<pre>Sass::Script::Value::Base] ...</pre>\n"],["perform","Sass::Script::Tree::Node","Sass/Script/Tree/Node.html#method-i-perform","(environment)","<p>Evaluates the node.\n<p>{#perform} shouldn’t be overridden directly; instead, override {#_perform}.\n<p>@param …\n"],["perform","Sass::Supports::Condition","Sass/Supports/Condition.html#method-i-perform","(environment)","<p>Runs the SassScript in the supports condition.\n<p>@param environment [Sass::Environment] The environment …\n"],["perform","Sass::Supports::Declaration","Sass/Supports/Declaration.html#method-i-perform","(env)",""],["perform","Sass::Supports::Interpolation","Sass/Supports/Interpolation.html#method-i-perform","(env)",""],["perform","Sass::Supports::Negation","Sass/Supports/Negation.html#method-i-perform","(env)",""],["perform","Sass::Supports::Operator","Sass/Supports/Operator.html#method-i-perform","(env)",""],["perform_arg","Sass::Script::Tree::Funcall","Sass/Script/Tree/Funcall.html#method-i-perform_arg","(argument, environment, name)",""],["perform_arguments","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-perform_arguments","(callable, args, splat)","<p>@api private @comment\n\n<pre>rubocop:disable MethodLength</pre>\n"],["perform_sass_fn","Sass::Script::Tree::Funcall","Sass/Script/Tree/Funcall.html#method-i-perform_sass_fn","(function, args, splat, environment)",""],["perform_splat","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-perform_splat","(splat, performed_keywords, kwarg_splat, environment)","<p>@api private @return [Sass::Script::Value::ArgList]\n"],["piecewise","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-piecewise","(other, operation)",""],["placeholder_selector","Sass::SCSS::CssParser","Sass/SCSS/CssParser.html#method-i-placeholder_selector","()",""],["placeholder_selector","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-placeholder_selector","()",""],["plus","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-plus","(other)","<p>The SassScript `+` operation.\n<p>@param other [Value] The right-hand side of the operator @return\n[Script::Value::String] …\n"],["plus","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-plus","(other)","<p>The SassScript `+` operation. Its functionality depends on the type of its\nargument:\n<p>{Number} : Adds the …\n"],["plus","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-plus","(other)","<p>The SassScript `+` operation. Its functionality depends on the type of its\nargument:\n<p>{Number} : Adds the …\n"],["plus","Sass::Script::Value::String","Sass/Script/Value/String.html#method-i-plus","(other)","<p>@see Value#plus\n"],["pointer","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-pointer","()",""],["pos","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-pos","()",""],["pos=","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-pos-3D","(n)",""],["possible_files","Sass::Importers::Filesystem","Sass/Importers/Filesystem.html#method-i-possible_files","(name)","<p>Given an `@import`ed path, returns an array of possible on-disk filenames\nand their corresponding syntaxes …\n"],["powerset","Sass::Util","Sass/Util.html#method-i-powerset","(arr)","<p>Computes the powerset of the given array. This is the set of all subsets of\nthe array.\n<p>@example\n\n<pre>powerset([1, ...</pre>\n"],["precedence_of","Sass::Script::Parser","Sass/Script/Parser.html#method-i-precedence_of","(op)","<p>Returns an integer representing the precedence of the given operator. A\nlower integer indicates a looser …\n"],["precision","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-c-precision","()",""],["precision=","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-c-precision-3D","(digits)","<p>Sets the number of digits of precision For example, if this is `3`,\n`3.1415926` will be printed as `3.142`. …\n"],["precision_factor","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-c-precision_factor","()","<p>the precision factor used in numeric output it is derived from the\n`precision` method.\n"],["prefixed_directive","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-prefixed_directive","(name, start_pos)",""],["prepend!","Sass::Tree::Visitors::ToCss","Sass/Tree/Visitors/ToCss.html#method-i-prepend-21","(prefix)","<p>Prepend `prefix` to the output string.\n"],["probably_dest_dir?","Sass::Exec::Sass","Sass/Exec/Sass.html#method-i-probably_dest_dir-3F","(path)","<p>Whether path is likely to be meant as the destination in a source:dest\npair.\n"],["process_comment","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-process_comment","(text, node)",""],["process_directory","Sass::Exec::SassConvert","Sass/Exec/SassConvert.html#method-i-process_directory","()",""],["process_file","Sass::Exec::SassConvert","Sass/Exec/SassConvert.html#method-i-process_file","(input, output)",""],["process_result","Sass::Exec::Generic","Sass/Exec/Generic.html#method-i-process_result","()","<p>Processes the options set by the command-line arguments. In particular,\nsets `@options` and `@options …\n"],["process_result","Sass::Exec::Sass","Sass/Exec/Sass.html#method-i-process_result","()","<p>Processes the options set by the command-line arguments, and runs the Sass\ncompiler appropriately.\n"],["process_result","Sass::Exec::SassConvert","Sass/Exec/SassConvert.html#method-i-process_result","()","<p>Processes the options set by the command-line arguments, and runs the CSS\ncompiler appropriately.\n"],["production","Sass::Script::Parser","Sass/Script/Parser.html#method-i-production","(name, sub, *ops)","<p>Defines a simple left-associative production. name is the name of the\nproduction, sub is the name of …\n"],["pseudo","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-pseudo","()",""],["pseudo_arg","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-pseudo_arg","()",""],["pseudo_class_selector_message","Sass::Tree::PropNode","Sass/Tree/PropNode.html#method-i-pseudo_class_selector_message","()","<p>Returns a appropriate message indicating how to escape pseudo-class\nselectors. This only applies for …\n"],["pseudo_elements","Sass::Selector::SimpleSequence","Sass/Selector/SimpleSequence.html#method-i-pseudo_elements","()",""],["pseudo_expr","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-pseudo_expr","()",""],["pseudo_expr_token","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-pseudo_expr_token","()",""],["public_url","Sass::Importers::Base","Sass/Importers/Base.html#method-i-public_url","(uri, sourcemap_directory = nil)","<p>Get the publicly-visible URL for an imported file. This URL is used by\nsource maps to link to the source …\n"],["public_url","Sass::Importers::Filesystem","Sass/Importers/Filesystem.html#method-i-public_url","(name, sourcemap_directory = nil)",""],["puts","Sass::Exec::Generic","Sass/Exec/Generic.html#method-i-puts","(*args)","<p>Same as `Kernel.puts`, but doesn’t print anything if the `–quiet` option is\nset.\n<p>@param args [Array] …\n"],["puts_action","Sass::Exec::Generic","Sass/Exec/Generic.html#method-i-puts_action","(name, color, arg)","<p>Prints a status message about performing the given action, colored using\nthe given color (via terminal …\n"],["qualified_name","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-qualified_name","(allow_star_name = false)",""],["query_expr","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-query_expr","()",""],["query_interp_to_src","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-query_interp_to_src","(interp)","<p>Like interp_to_src, but removes the unnecessary `#{}` around the keys and\nvalues in query expressions. …\n"],["quote","Sass::SCSS::RX","Sass/SCSS/RX.html#method-c-quote","(str, flags = 0)","<p>Creates a Regexp from a plain text string, escaping all significant\ncharacters.\n<p>@param str [String] The …\n"],["quote","Sass::Script::Functions","Sass/Script/Functions.html#method-i-quote","(string)","<p>Add quotes to a string if the string isn’t quoted, or returns the same\nstring if it is.\n<p>@see #unquote …\n"],["quoted_string","Sass::Script::Value::Helpers","Sass/Script/Value/Helpers.html#method-i-quoted_string","(str)","<p>Create a quoted string.\n<p>@param str [::String] A ruby string. @return [Sass::Script::Value::String]\nA quoted …\n"],["rails_env","Sass::Util","Sass/Util.html#method-i-rails_env","()","<p>Returns the environment of the Rails application, if this is running in a\nRails context. Returns `nil` …\n"],["rails_root","Sass::Util","Sass/Util.html#method-i-rails_root","()","<p>Returns the root of the Rails application, if this is running in a Rails\ncontext. Returns `nil` if no …\n"],["rand","Sass::Util::CrossPlatformRandom","Sass/Util/CrossPlatformRandom.html#method-i-rand","(*args)",""],["random","Sass::Script::Functions","Sass/Script/Functions.html#method-i-random","(limit = nil)","<p>@overload random()\n\n<pre>Return a decimal between 0 and 1, inclusive of 0 but not 1.\n@return [Sass::Script::Value::Number] ...</pre>\n"],["random_number_generator","Sass::Script::Functions","Sass/Script/Functions.html#method-c-random_number_generator","()","<p>Get Sass’s internal random number generator.\n<p>@return [Random]\n"],["random_seed=","Sass::Script::Functions","Sass/Script/Functions.html#method-c-random_seed-3D","(seed)","<p>Sets the random seed used by Sass’s internal random number generator.\n<p>This can be used to ensure consistent …\n"],["range","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-range","(start_pos, end_pos = source_position)",""],["range","Sass::Script::Parser","Sass/Script/Parser.html#method-i-range","(start_pos, end_pos = source_position)",""],["raw","Sass::Script::Parser","Sass/Script/Parser.html#method-i-raw","()",""],["rbx?","Sass::Util","Sass/Util.html#method-i-rbx-3F","()","<p>Whether or not this is running on Rubinius.\n<p>@return [Boolean]\n"],["read_token","Sass::Script::Lexer","Sass/Script/Lexer.html#method-i-read_token","()",""],["red","Sass::Script::Functions","Sass/Script/Functions.html#method-i-red","(color)","<p>Gets the red component of a color. Calculated from HSL where necessary via\n[this algorithm].\n<p>[hsl-to-rgb]: …\n"],["red","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-red","()","<p>The red component of the color.\n<p>@return [Fixnum]\n"],["reference_combinator","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-reference_combinator","()",""],["reformat_argument_error","Sass::Script::Tree::Funcall","Sass/Script/Tree/Funcall.html#method-i-reformat_argument_error","(e)",""],["reject","OrderedHash","OrderedHash.html#method-i-reject","()",""],["reject!","OrderedHash","OrderedHash.html#method-i-reject-21","()",""],["relative_to_pwd","Sass::Plugin::Compiler","Sass/Plugin/Compiler.html#method-i-relative_to_pwd","(f)",""],["remove_redundant_directories","Sass::Plugin::Compiler","Sass/Plugin/Compiler.html#method-i-remove_redundant_directories","(directories)",""],["remove_root","Sass::Importers::Filesystem","Sass/Importers/Filesystem.html#method-i-remove_root","(name)","<p>If a full uri is passed, this removes the root from it otherwise returns\nthe name unchanged\n"],["remove_template_location","Sass::Plugin::Configuration","Sass/Plugin/Configuration.html#method-i-remove_template_location","(template_location, css_location = options[:css_location])","<p>Removes a template-location/css-location mapping. This means that Sass/SCSS\nfiles in `template_location` …\n"],["render","Sass::CSS","Sass/CSS.html#method-i-render","(fmt = :sass)","<p>Converts the CSS template into Sass or SCSS code.\n<p>@param fmt [Symbol] `:sass` or `:scss`, designating …\n"],["render","Sass::Engine","Sass/Engine.html#method-i-render","()","<p>Render the template to CSS.\n<p>@return [String] The CSS @raise [Sass::SyntaxError] if there’s an error in\n…\n"],["render","Sass::Tree::RootNode","Sass/Tree/RootNode.html#method-i-render","()","<p>Runs the dynamic Sass code and computes the CSS for the tree.\n<p>@return [String] The compiled CSS.\n"],["render_with_sourcemap","Sass::Engine","Sass/Engine.html#method-i-render_with_sourcemap","(sourcemap_uri)","<p>Render the template to CSS and return the source map.\n<p>@param sourcemap_uri [String] The sourcemap URI …\n"],["render_with_sourcemap","Sass::Tree::RootNode","Sass/Tree/RootNode.html#method-i-render_with_sourcemap","()","<p>Runs the dynamic Sass code and computes the CSS for the tree, along with\nthe sourcemap.\n<p>@return [(String, …\n"],["replace","OrderedHash","OrderedHash.html#method-i-replace","(other)","<p>When replacing with another hash, the initial order of our keys must come\nfrom the other hash – ordered …\n"],["replace_subseq","Sass::Util","Sass/Util.html#method-i-replace_subseq","(arr, subseq, replacement)","<p>Non-destructively replaces all occurrences of a subsequence in an array\nwith another subsequence.\n<p>@example …\n"],["reset","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-reset","()",""],["reset!","Sass::CacheStores::Memory","Sass/CacheStores/Memory.html#method-i-reset-21","()","<p>Destructively clear the cache.\n"],["reset!","Sass::Plugin::Configuration","Sass/Plugin/Configuration.html#method-i-reset-21","()","<p>Resets the options and {Sass::Callbacks::InstanceMethods#clear_callbacks!\nclears all callbacks}.\n"],["resolve_parent_refs","Sass::Selector::CommaSequence","Sass/Selector/CommaSequence.html#method-i-resolve_parent_refs","(super_cseq, implicit_parent = true)","<p>Resolves the {Parent} selectors within this selector by replacing them with\nthe given parent selector, …\n"],["resolve_parent_refs","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-i-resolve_parent_refs","(super_cseq, implicit_parent)","<p>Resolves the {Parent} selectors within this selector by replacing them with\nthe given parent selector, …\n"],["resolve_parent_refs","Sass::Selector::SimpleSequence","Sass/Selector/SimpleSequence.html#method-i-resolve_parent_refs","(super_cseq)","<p>Resolves the {Parent} selectors within this selector by replacing them with\nthe given parent selector, …\n"],["resolved","Sass::Tree::CssImportNode","Sass/Tree/CssImportNode.html#method-c-resolved","(uri)","<p>@param uri [String] See {#resolved_uri} @return [CssImportNode]\n"],["resolved","Sass::Tree::DirectiveNode","Sass/Tree/DirectiveNode.html#method-c-resolved","(value)","<p>@param value [String] See {#resolved_value} @return [DirectiveNode]\n"],["resolved_modifier","Sass::Media::Query","Sass/Media/Query.html#method-i-resolved_modifier","()","<p>See {#modifier}. @return [String]\n"],["resolved_type","Sass::Media::Query","Sass/Media/Query.html#method-i-resolved_type","()","<p>See {#type}. @return [String]\n"],["resolved_value","Sass::Tree::CssImportNode","Sass/Tree/CssImportNode.html#method-i-resolved_value","()","<p>@see DirectiveNode#resolved_value\n"],["resolved_value","Sass::Tree::MediaNode","Sass/Tree/MediaNode.html#method-i-resolved_value","()","<p>@see DirectiveNode#resolved_value\n"],["resolved_value","Sass::Tree::SupportsNode","Sass/Tree/SupportsNode.html#method-i-resolved_value","()","<p>@see DirectiveNode#resolved_value\n"],["respond_to?","Sass::Plugin","Sass/Plugin.html#method-i-respond_to-3F","(method)","<p>For parity with method_missing\n"],["respond_to?","Sass::Util::NormalizedMap","Sass/Util/NormalizedMap.html#method-i-respond_to-3F","(method, include_private = false)",""],["respond_to_missing?","Sass::Util::NormalizedMap","Sass/Util/NormalizedMap.html#method-i-respond_to_missing-3F","(method, include_private = false)",""],["rest","Sass::Selector::SimpleSequence","Sass/Selector/SimpleSequence.html#method-i-rest","()","<p>Returns the non-base, non-pseudo-class selectors in this sequence.\n<p>@return [Set&lt;Simple&gt;]\n"],["rest_size","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-rest_size","()",""],["restrict","Sass::Util","Sass/Util.html#method-i-restrict","(value, range)","<p>Restricts a number to falling within a given range. Returns the number if\nit falls within the range, …\n"],["rethrow","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-rethrow","(err)",""],["retrieve","Sass::CacheStores::Base","Sass/CacheStores/Base.html#method-i-retrieve","(key, sha)","<p>Retrieve a {Sass::Tree::RootNode}.\n<p>@param key [String] The key the root element was stored under. @param …\n"],["retrieve","Sass::CacheStores::Chain","Sass/CacheStores/Chain.html#method-i-retrieve","(key, sha)","<p>@see Base#retrieve\n"],["retrieve","Sass::CacheStores::Memory","Sass/CacheStores/Memory.html#method-i-retrieve","(key, sha)","<p>@see Base#retrieve\n"],["return_directive","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-return_directive","(start_pos)",""],["revision_number","Sass::Version","Sass/Version.html#method-i-revision_number","()","<p>rubocop:enable ClassVars\n"],["rgb","Sass::Script::Functions","Sass/Script/Functions.html#method-i-rgb","(red, green, blue)","<p>Creates a {Sass::Script::Value::Color Color} object from red, green, and\nblue values.\n<p>@see #rgba @overload …\n"],["rgb","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-rgb","()","<p>Returns the red, green, and blue components of the color.\n<p>@return [Array&lt;Fixnum&gt;] A frozen three-element …\n"],["rgb_color","Sass::Script::Value::Helpers","Sass/Script/Value/Helpers.html#method-i-rgb_color","(red, green, blue, alpha = nil)","<p>Construct a Sass Color from rgb values.\n<p>@param red [::Number] The red component. Must be between 0 and …\n"],["rgb_to_hsl!","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-rgb_to_hsl-21","()",""],["rgba","Sass::Script::Functions","Sass/Script/Functions.html#method-i-rgba","(*args)","<p>Creates a {Sass::Script::Value::Color Color} from red, green, blue, and\nalpha values. @see #rgb\n<p>@overload …\n"],["rgba","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-rgba","()","<p>Returns the red, green, blue, and alpha components of the color.\n<p>@return [Array&lt;Fixnum&gt;] A frozen …\n"],["rgba_str","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-rgba_str","()",""],["right_parens","Sass::Supports::Operator","Sass/Supports/Operator.html#method-i-right_parens","(str)",""],["round","Sass::Script::Functions","Sass/Script/Functions.html#method-i-round","(number)","<p>Rounds a number to the nearest whole number.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">round</span>(<span class=\"ruby-value\">10.4</span><span class=\"ruby-identifier\">px</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">10</span><span class=\"ruby-identifier\">px</span>\n<span class=\"ruby-identifier\">round</span>(<span class=\"ruby-value\">10.6</span><span class=\"ruby-identifier\">px</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">11</span><span class=\"ruby-identifier\">px</span>\n</pre>\n"],["round","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-c-round","(num)","<p>@private\n"],["rstrip!","Sass::Tree::Visitors::ToCss","Sass/Tree/Visitors/ToCss.html#method-i-rstrip-21","()","<p>Strip all trailing whitespace from the output string.\n"],["ruby1?","Sass::Util","Sass/Util.html#method-i-ruby1-3F","()","<p>Whether or not this is running under a Ruby version under 2.0.\n<p>@return [Boolean]\n"],["ruby1_8?","Sass::Util","Sass/Util.html#method-i-ruby1_8-3F","()","<p>Whether or not this is running under Ruby 1.8 or lower.\n<p>Note that IronRuby counts as Ruby 1.8, because …\n"],["ruby1_8_6?","Sass::Util","Sass/Util.html#method-i-ruby1_8_6-3F","()","<p>Whether or not this is running under Ruby 1.8.6 or lower. Note that lower\nversions are not officially …\n"],["ruby_name","Sass::Script::Tree::Funcall","Sass/Script/Tree/Funcall.html#method-i-ruby_name","()",""],["ruleset","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-ruleset","()",""],["run","Sass::Plugin::MerbBootLoader","Sass/Plugin/MerbBootLoader.html#method-c-run","()",""],["run","Sass::Repl","Sass/Repl.html#method-i-run","()","<p>Starts the read-eval-print loop.\n"],["run_interp","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-run_interp","(text)",""],["run_interp_no_strip","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-run_interp_no_strip","(text)",""],["s","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-s","(node)",""],["sans_common_units","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-sans_common_units","(units1, units2)",""],["sass_backtrace_str","Sass::SyntaxError","Sass/SyntaxError.html#method-i-sass_backtrace_str","(default_filename = \"an unknown file\")","<p>Returns a string representation of the Sass backtrace.\n<p>@param default_filename [String] The filename to …\n"],["sass_filename","Sass::SyntaxError","Sass/SyntaxError.html#method-i-sass_filename","()","<p>The name of the file in which the exception was raised. This could be `nil`\nif no filename is available. …\n"],["sass_line","Sass::SyntaxError","Sass/SyntaxError.html#method-i-sass_line","()","<p>The line of the Sass template on which the error occurred.\n<p>@return [Fixnum]\n"],["sass_mixin","Sass::SyntaxError","Sass/SyntaxError.html#method-i-sass_mixin","()","<p>The name of the mixin in which the error occurred. This could be `nil` if\nthe error occurred outside …\n"],["sass_script","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-sass_script","(*args)",""],["sass_warn","Sass::Util","Sass/Util.html#method-i-sass_warn","(msg)","<p>The same as `Kernel#warn`, but is silenced by {#silence_sass_warnings}.\n<p>@param msg [String]\n"],["sassc_key","Sass::Engine","Sass/Engine.html#method-i-sassc_key","()",""],["saturate","Sass::Script::Functions","Sass/Script/Functions.html#method-i-saturate","(color, amount = nil)","<p>Makes a color more saturated. Takes a color and a number between 0% and\n100%, and returns a color with …\n"],["saturation","Sass::Script::Functions","Sass/Script/Functions.html#method-i-saturation","(color)","<p>Returns the saturation component of a color. See [the CSS3 HSL\nspecification]. Calculated from RGB where …\n"],["saturation","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-saturation","()","<p>The saturation component of the color.\n<p>@return [Numeric]\n"],["scale_color","Sass::Script::Functions","Sass/Script/Functions.html#method-i-scale_color","(color, kwargs)","<p>Fluidly scales one or more properties of a color. Unlike {#adjust_color\nadjust-color}, which changes …\n"],["scan","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-scan","(pattern)",""],["scan_full","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-scan_full","(pattern, advance_pointer_p, return_string_p)",""],["scan_until","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-scan_until","(pattern)",""],["scope","Sass::Util","Sass/Util.html#method-i-scope","(file)","<p>Returns the path of a file relative to the Sass root directory.\n<p>@param file [String] The filename relative …\n"],["script_value","Sass::SCSS::StaticParser","Sass/SCSS/StaticParser.html#method-i-script_value","()",""],["search_full","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-search_full","(pattern, advance_pointer_p, return_string_p)",""],["selector","Sass::BaseEnvironment","Sass/BaseEnvironment.html#method-i-selector","()","<p>The selector for the current CSS rule, or nil if there is no current CSS\nrule.\n<p>@return [Selector::CommaSequence?] …\n"],["selector","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-selector","()",""],["selector","Sass::Script::Parser","Sass/Script/Parser.html#method-i-selector","()",""],["selector_comma_sequence","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-selector_comma_sequence","()",""],["selector_sequence","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-selector_sequence","()",""],["selector_to_sass","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-selector_to_sass","(sel)",""],["selector_to_scss","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-selector_to_scss","(sel)",""],["selector_to_src","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-selector_to_src","(sel)",""],["semi","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-semi","()",""],["sep_str","Sass::Script::Tree::ListLiteral","Sass/Script/Tree/ListLiteral.html#method-i-sep_str","(opts = options)",""],["sep_str","Sass::Script::Value::List","Sass/Script/Value/List.html#method-i-sep_str","(opts = options)",""],["separator","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-separator","()","<p>Returns the separator for this value. For non-list-like values or the empty\nlist, this will be `nil`. …\n"],["separator","Sass::Script::Value::Map","Sass/Script/Value/Map.html#method-i-separator","()","<p>@see Value#separator\n"],["set_eql?","Sass::Util","Sass/Util.html#method-i-set_eql-3F","(set1, set2)","<p>Tests the hash-equality of two sets in a cross-version manner.\nAggravatingly, this is order-dependent …\n"],["set_hash","Sass::Util","Sass/Util.html#method-i-set_hash","(set)","<p>Returns the hash code for a set in a cross-version manner. Aggravatingly,\nthis is order-dependent in …\n"],["set_nth","Sass::Script::Functions","Sass/Script/Functions.html#method-i-set_nth","(list, n, value)","<p>Return a new list, based on the list provided, but with the nth element\nchanged to the value given.\n<p>Note …\n"],["set_opts","Sass::Exec::Generic","Sass/Exec/Generic.html#method-i-set_opts","(opts)","<p>Tells optparse how to parse the arguments available for all executables.\n<p>This is meant to be overridden …\n"],["set_opts","Sass::Exec::Sass","Sass/Exec/Sass.html#method-i-set_opts","(opts)","<p>Tells optparse how to parse the arguments.\n<p>@param opts [OptionParser] @comment\n\n<pre>rubocop:disable MethodLength</pre>\n"],["set_opts","Sass::Exec::SassConvert","Sass/Exec/SassConvert.html#method-i-set_opts","(opts)","<p>Tells optparse how to parse the arguments.\n<p>@param opts [OptionParser] @comment\n\n<pre>rubocop:disable MethodLength</pre>\n"],["shift","OrderedHash","OrderedHash.html#method-i-shift","()",""],["shift_output_lines","Sass::Source::Map","Sass/Source/Map.html#method-i-shift_output_lines","(delta)","<p>Shifts all output source ranges forward one or more lines.\n<p>@param delta [Fixnum] The number of lines to …\n"],["shift_output_offsets","Sass::Source::Map","Sass/Source/Map.html#method-i-shift_output_offsets","(delta)","<p>Shifts any output source ranges that lie on the first line forward one or\nmore characters on that line. …\n"],["signature","Sass::Script::Functions","Sass/Script/Functions.html#method-c-signature","(method_name, arg_arity, kwarg_arity)","<p>Determine the correct signature for the number of arguments passed in for a\ngiven function. If no signatures …\n"],["signature","Sass::Script::Tree::Funcall","Sass/Script/Tree/Funcall.html#method-i-signature","()",""],["silence_sass_warnings","Sass::Util","Sass/Util.html#method-i-silence_sass_warnings","()","<p>Silences all Sass warnings within a block.\n<p>@yield A block in which no Sass warnings will be printed\n"],["silence_warnings","Sass::Util","Sass/Util.html#method-i-silence_warnings","()","<p>Silence all output to STDERR within a block.\n<p>@yield A block in which no output will be printed to STDERR …\n"],["simple_selector_sequence","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-simple_selector_sequence","()",""],["single_eq","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-single_eq","(other)","<p>The SassScript `=` operation (used for proprietary MS syntax like\n`alpha(opacity=20)`).\n<p>@param other [Value] …\n"],["size","Sass::Util::NormalizedMap","Sass/Util/NormalizedMap.html#method-i-size","()",""],["skip","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-skip","(pattern)",""],["skip","Sass::Util::Test","Sass/Util/Test.html#method-i-skip","(msg = nil, bt = caller)",""],["skip_until","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-skip_until","(pattern)",""],["slice_by","Sass::Util","Sass/Util.html#method-i-slice_by","(enum)",""],["smallest","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-smallest","()",""],["sort_by","Sass::Util::NormalizedMap","Sass/Util/NormalizedMap.html#method-i-sort_by","()",""],["source_encoding","Sass::CSS","Sass/CSS.html#method-i-source_encoding","()","<p>Returns the original encoding of the document, or `nil` under Ruby 1.8.\n<p>@return [Encoding, nil] @raise …\n"],["source_encoding","Sass::Engine","Sass/Engine.html#method-i-source_encoding","()","<p>Returns the original encoding of the document, or `nil` under Ruby 1.8.\n<p>@return [Encoding, nil] @raise …\n"],["source_position","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-source_position","()",""],["source_position","Sass::Script::Parser","Sass/Script/Parser.html#method-i-source_position","()",""],["sourcemap_name","Sass::Util","Sass/Util.html#method-i-sourcemap_name","(css)","<p>Builds a sourcemap file name given the generated CSS file name.\n<p>@param css [String] The generated CSS …\n"],["space","Sass::Script::Parser","Sass/Script/Parser.html#method-i-space","()",""],["special_directive","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-special_directive","(name, start_pos)",""],["special_directive","Sass::SCSS::StaticParser","Sass/SCSS/StaticParser.html#method-i-special_directive","(name, start_pos)",""],["special_fun","Sass::Script::Parser","Sass/Script/Parser.html#method-i-special_fun","()",""],["specificity","Sass::Selector::AbstractSequence","Sass/Selector/AbstractSequence.html#method-i-specificity","()","<p>Returns the specificity of the selector as an integer. The base is given by\n{Sass::Selector::SPECIFICITY_BASE}. …\n"],["specificity","Sass::Selector::Attribute","Sass/Selector/Attribute.html#method-i-specificity","()","<p>@see AbstractSequence#specificity\n"],["specificity","Sass::Selector::Class","Sass/Selector/Class.html#method-i-specificity","()","<p>@see AbstractSequence#specificity\n"],["specificity","Sass::Selector::Element","Sass/Selector/Element.html#method-i-specificity","()","<p>@see AbstractSequence#specificity\n"],["specificity","Sass::Selector::Id","Sass/Selector/Id.html#method-i-specificity","()","<p>@see AbstractSequence#specificity\n"],["specificity","Sass::Selector::Placeholder","Sass/Selector/Placeholder.html#method-i-specificity","()","<p>@see AbstractSequence#specificity\n"],["specificity","Sass::Selector::Pseudo","Sass/Selector/Pseudo.html#method-i-specificity","()","<p>@see AbstractSequence#specificity\n"],["specificity","Sass::Selector::SelectorPseudoClass","Sass/Selector/SelectorPseudoClass.html#method-i-specificity","()","<p>@see AbstractSequence#specificity\n"],["specificity","Sass::Selector::Universal","Sass/Selector/Universal.html#method-i-specificity","()","<p>@see AbstractSequence#specificity\n"],["split","Sass::Importers::Filesystem","Sass/Importers/Filesystem.html#method-i-split","(name)","<p>Splits a filename into three parts, a directory part, a basename, and an\nextension Only the known extensions …\n"],["split_colon_path","Sass::Exec::Sass","Sass/Exec/Sass.html#method-i-split_colon_path","(path)",""],["ss","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-ss","()",""],["ss_comments","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-ss_comments","(node)",""],["stack","Sass::BaseEnvironment","Sass/BaseEnvironment.html#method-i-stack","()","<p>The import/mixin stack.\n<p>@return [Sass::Stack]\n"],["store","Sass::CacheStores::Base","Sass/CacheStores/Base.html#method-i-store","(key, sha, root)","<p>Store a {Sass::Tree::RootNode}.\n<p>@param key [String] The key to store it under. @param sha [String] The …\n"],["store","Sass::CacheStores::Chain","Sass/CacheStores/Chain.html#method-i-store","(key, sha, obj)","<p>@see Base#store\n"],["store","Sass::CacheStores::Memory","Sass/CacheStores/Memory.html#method-i-store","(key, sha, obj)","<p>@see Base#store\n"],["str","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-str","()",""],["str","Sass::Script::Lexer","Sass/Script/Lexer.html#method-i-str","()","<p>Records all non-comment text the lexer consumes within the block and\nreturns it as a string.\n<p>@yield A …\n"],["str?","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-str-3F","()",""],["str_index","Sass::Script::Functions","Sass/Script/Functions.html#method-i-str_index","(string, substring)","<p>Returns the index of the first occurrence of `$substring` in `$string`. If\nthere is no such occurrence, …\n"],["str_insert","Sass::Script::Functions","Sass/Script/Functions.html#method-i-str_insert","(original, insert, index)","<p>Inserts `$insert` into `$string` at `$index`.\n<p>Note that unlike some languages, the first character in …\n"],["str_length","Sass::Script::Functions","Sass/Script/Functions.html#method-i-str_length","(string)","<p>Returns the number of characters in a string.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">str</span><span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">length</span>(<span class=\"ruby-string\">&quot;foo&quot;</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">3</span>\n</pre>\n"],["str_slice","Sass::Script::Functions","Sass/Script/Functions.html#method-i-str_slice","(string, start_at, end_at = nil)","<p>Extracts a substring from `$string`. The substring will begin at index\n`$start-at` and ends at index …\n"],["string","Sass::Script::CssLexer","Sass/Script/CssLexer.html#method-i-string","(re, *args)",""],["string","Sass::Script::CssParser","Sass/Script/CssParser.html#method-i-string","()",""],["string","Sass::Script::Lexer","Sass/Script/Lexer.html#method-i-string","(re, open)",""],["string","Sass::Script::Parser","Sass/Script/Parser.html#method-i-string","()",""],["string=","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-string-3D","(str)",""],["string_re","Sass::Script::Lexer","Sass/Script/Lexer.html#method-i-string_re","(open, close)",""],["strip_string_array","Sass::Util","Sass/Util.html#method-i-strip_string_array","(arr)","<p>Destructively strips whitespace from the beginning and end of the first and\nlast elements, respectively, …\n"],["style","Sass::Tree::Node","Sass/Tree/Node.html#method-i-style","()","<p>The output style. See {file:SASS_REFERENCE.md#sass_options the Sass options\ndocumentation}.\n<p>@return [Symbol] …\n"],["stylesheet","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-stylesheet","()",""],["stylesheet_modified_since?","Sass::Plugin::StalenessChecker","Sass/Plugin/StalenessChecker.html#method-c-stylesheet_modified_since-3F","(template_file, mtime, importer = nil)","<p>Returns whether a Sass or SCSS stylesheet has been modified since a given\ntime.\n<p>The distinction between …\n"],["stylesheet_modified_since?","Sass::Plugin::StalenessChecker","Sass/Plugin/StalenessChecker.html#method-i-stylesheet_modified_since-3F","(template_file, mtime, importer = nil)","<p>Returns whether a Sass or SCSS stylesheet has been modified since a given\ntime.\n<p>@param template_file [String] …\n"],["stylesheet_needs_update?","Sass::Plugin::Compiler","Sass/Plugin/Compiler.html#method-i-stylesheet_needs_update-3F","(css_file, template_file)","<p>Compass expects this to exist\n"],["stylesheet_needs_update?","Sass::Plugin::StalenessChecker","Sass/Plugin/StalenessChecker.html#method-i-stylesheet_needs_update-3F","(css_file, template_file, importer = nil)","<p>Returns whether or not a given CSS file is out of date and needs to be\nregenerated.\n<p>@param css_file [String] …\n"],["stylesheet_needs_update?","Sass::Plugin::StalenessChecker","Sass/Plugin/StalenessChecker.html#method-c-stylesheet_needs_update-3F","(css_file, template_file, importer = nil)","<p>Returns whether or not a given CSS file is out of date and needs to be\nregenerated.\n<p>The distinction between …\n"],["subject?","Sass::Selector::SimpleSequence","Sass/Selector/SimpleSequence.html#method-i-subject-3F","()","<p>Whether or not this compound selector is the subject of the parent\nselector; that is, whether it is prepended …\n"],["subsequence?","Sass::Util","Sass/Util.html#method-i-subsequence-3F","(seq1, seq2)","<p>Returns whether or not `seq1` is a subsequence of `seq2`. That is, whether\nor not `seq2` contains every …\n"],["substitute","Sass::Util","Sass/Util.html#method-i-substitute","(ary, from, to)","<p>Substitutes a sub-array of one array with another sub-array.\n<p>@param ary [Array] The array in which to …\n"],["subweave","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-i-subweave","(seq1, seq2)","<p>This interweaves two lists of selectors, returning all possible orderings\nof them (including using unification) …\n"],["superselector?","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-i-superselector-3F","(sseq)","<p>Returns whether or not this selector matches all elements that the given\nselector matches (as well as …\n"],["superselector?","Sass::Selector::SimpleSequence","Sass/Selector/SimpleSequence.html#method-i-superselector-3F","(sseq)","<p>Returns whether or not this selector matches all elements that the given\nselector matches (as well as …\n"],["supports_condition","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-supports_condition","()",""],["supports_condition_in_parens","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-supports_condition_in_parens","()",""],["supports_declaration_condition","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-supports_declaration_condition","()",""],["supports_directive","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-supports_directive","(name, start_pos)","<p>www.w3.org/TR/css3-conditional/\n"],["supports_interpolation","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-supports_interpolation","()",""],["supports_negation","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-supports_negation","()",""],["supports_operator","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-supports_operator","()",""],["sync_keys!","OrderedHash","OrderedHash.html#method-i-sync_keys-21","()",""],["tab_str","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-tab_str","()",""],["tabulate","Sass::Engine","Sass/Engine.html#method-i-tabulate","(string)",""],["template_location_array","Sass::Plugin::Configuration","Sass/Plugin/Configuration.html#method-i-template_location_array","()","<p>Returns the template locations configured for Sass as an array of\n`[template_location, css_location]` …\n"],["template_locations","Sass::Plugin::Compiler","Sass/Plugin/Compiler.html#method-i-template_locations","()",""],["term","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-term","(allow_var)",""],["terminate","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-terminate","()",""],["throw_error","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-throw_error","()",""],["times","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-times","(other)","<p>The SassScript `*` operation. Its functionality depends on the type of its\nargument:\n<p>{Number} : Multiplies …\n"],["times","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-times","(other)","<p>The SassScript `*` operation. Its functionality depends on the type of its\nargument:\n<p>{Number} : Multiplies …\n"],["to_a","OrderedHash","OrderedHash.html#method-i-to_a","()",""],["to_a","Sass::Media::Query","Sass/Media/Query.html#method-i-to_a","()","<p>@see {MediaQuery#to_a}\n"],["to_a","Sass::Media::QueryList","Sass/Media/QueryList.html#method-i-to_a","()","<p>Returns a representation of the query as an array of strings and\npotentially {Sass::Script::Tree::Node}s …\n"],["to_a","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-to_a","()","<p>Returns the value of this value as a list. Single values are considered the\nsame as single-element lists. …\n"],["to_a","Sass::Script::Value::Map","Sass/Script/Value/Map.html#method-i-to_a","()","<p>@see Value#to_a\n"],["to_a","Sass::Selector::Attribute","Sass/Selector/Attribute.html#method-i-to_a","()","<p>@see Selector#to_a\n"],["to_a","Sass::Selector::Class","Sass/Selector/Class.html#method-i-to_a","()","<p>@see Selector#to_a\n"],["to_a","Sass::Selector::CommaSequence","Sass/Selector/CommaSequence.html#method-i-to_a","()","<p>@see Simple#to_a\n"],["to_a","Sass::Selector::Element","Sass/Selector/Element.html#method-i-to_a","()","<p>@see Selector#to_a\n"],["to_a","Sass::Selector::Id","Sass/Selector/Id.html#method-i-to_a","()","<p>@see Selector#to_a\n"],["to_a","Sass::Selector::Interpolation","Sass/Selector/Interpolation.html#method-i-to_a","()","<p>@see Selector#to_a\n"],["to_a","Sass::Selector::Parent","Sass/Selector/Parent.html#method-i-to_a","()","<p>@see Selector#to_a\n"],["to_a","Sass::Selector::Placeholder","Sass/Selector/Placeholder.html#method-i-to_a","()","<p>@see Selector#to_a\n"],["to_a","Sass::Selector::Pseudo","Sass/Selector/Pseudo.html#method-i-to_a","()","<p>@see Selector#to_a\n"],["to_a","Sass::Selector::SelectorPseudoClass","Sass/Selector/SelectorPseudoClass.html#method-i-to_a","()","<p>@see Selector#to_a\n"],["to_a","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-i-to_a","()","<p>@see Simple#to_a\n"],["to_a","Sass::Selector::Simple","Sass/Selector/Simple.html#method-i-to_a","()","<p>Returns a representation of the node as an array of strings and potentially\n{Sass::Script::Tree::Node}s …\n"],["to_a","Sass::Selector::SimpleSequence","Sass/Selector/SimpleSequence.html#method-i-to_a","()","<p>@see Simple#to_a\n"],["to_a","Sass::Selector::Universal","Sass/Selector/Universal.html#method-i-to_a","()","<p>@see Selector#to_a\n"],["to_a","Sass::Util::NormalizedMap","Sass/Util/NormalizedMap.html#method-i-to_a","()",""],["to_bool","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-to_bool","()","<p>@return [Boolean] `true` (the Ruby boolean value)\n"],["to_bool","Sass::Script::Value::Null","Sass/Script/Value/Null.html#method-i-to_bool","()","<p>@return [Boolean] `false` (the Ruby boolean value)\n"],["to_css","Sass::Engine","Sass/Engine.html#method-i-to_css","()",""],["to_css","Sass::Media::Query","Sass/Media/Query.html#method-i-to_css","()","<p>Returns the CSS for the media query.\n<p>@return [String]\n"],["to_css","Sass::Media::QueryList","Sass/Media/QueryList.html#method-i-to_css","()","<p>Returns the CSS for the media query list.\n<p>@return [String]\n"],["to_css","Sass::Supports::Condition","Sass/Supports/Condition.html#method-i-to_css","()","<p>Returns the CSS for this condition.\n<p>@return [String]\n"],["to_css","Sass::Supports::Declaration","Sass/Supports/Declaration.html#method-i-to_css","()",""],["to_css","Sass::Supports::Interpolation","Sass/Supports/Interpolation.html#method-i-to_css","()",""],["to_css","Sass::Supports::Negation","Sass/Supports/Negation.html#method-i-to_css","()",""],["to_css","Sass::Supports::Operator","Sass/Supports/Operator.html#method-i-to_css","()",""],["to_h","Sass::Script::Functions","Sass/Script/Functions.html#method-i-to_h","(obj)",""],["to_h","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-to_h","()","<p>Returns the value of this value as a hash. Most values don’t have hash\nrepresentations, but [Map]s and …\n"],["to_h","Sass::Script::Value::List","Sass/Script/Value/List.html#method-i-to_h","()","<p>@see Value#to_h\n"],["to_hash","OrderedHash","OrderedHash.html#method-i-to_hash","()",""],["to_hash","Sass::Util","Sass/Util.html#method-i-to_hash","(arr)","<p>Converts an array of `[key, value]` pairs to a hash.\n<p>@example\n\n<pre>to_hash([[:foo, &quot;bar&quot;], [:baz, &quot;bang&quot;]]) ...</pre>\n"],["to_hash","Sass::Util::NormalizedMap","Sass/Util/NormalizedMap.html#method-i-to_hash","()",""],["to_i","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-to_i","()","<p>@return [Fixnum] The integer value of this value @raise [Sass::SyntaxError]\nif this value isn’t an integer …\n"],["to_i","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-to_i","()","<p>@return [Fixnum] The integer value of the number @raise [Sass::SyntaxError]\nif the number isn’t an integer …\n"],["to_json","Sass::Source::Map","Sass/Source/Map.html#method-i-to_json","(options)","<p>Returns the standard JSON representation of the source map.\n<p>If the `:css_uri` option isn’t specified, …\n"],["to_literal","Sass::Script::Tree::Funcall","Sass/Script/Tree/Funcall.html#method-i-to_literal","(args)","<p>Compass historically overrode this before it changed name to\n{Funcall#to_value}. We should get rid of …\n"],["to_lower_case","Sass::Script::Functions","Sass/Script/Functions.html#method-i-to_lower_case","(string)","<p>Convert a string to lower case,\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">to</span><span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">lower</span><span class=\"ruby-operator\">-</span><span class=\"ruby-keyword\">case</span>(<span class=\"ruby-constant\">ABCD</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">abcd</span>\n</pre>\n"],["to_parser_offset","Sass::Engine","Sass/Engine.html#method-i-to_parser_offset","(offset)","<p>Parser tracks 1-based line and offset, so our offset should be converted.\n"],["to_s","Sass::Exec::Generic","Sass/Exec/Generic.html#method-i-to_s","()","<p>@return [String] A description of the executable\n"],["to_s","Sass::Importers::Base","Sass/Importers/Base.html#method-i-to_s","()","<p>A string representation of the importer. Should be overridden by\nsubclasses.\n<p>This is used to help debugging, …\n"],["to_s","Sass::Importers::DeprecatedPath","Sass/Importers/DeprecatedPath.html#method-i-to_s","()","<p>@see Sass::Importers::Base#to_s\n"],["to_s","Sass::Importers::Filesystem","Sass/Importers/Filesystem.html#method-i-to_s","()","<p>@see Base#to_s\n"],["to_s","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-to_s","(opts = {})","<p>Returns the string representation of this value as it would be output to\nthe CSS document.\n<p>@return [String] …\n"],["to_s","Sass::Script::Value::Bool","Sass/Script/Value/Bool.html#method-i-to_s","(opts = {})","<p>@return [String] “true” or “false”\n"],["to_s","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-to_s","(opts = {})","<p>Returns a string representation of the color. This is usually the color’s\nhex value, but if the color …\n"],["to_s","Sass::Script::Value::List","Sass/Script/Value/List.html#method-i-to_s","(opts = {})","<p>@see Value#to_s\n"],["to_s","Sass::Script::Value::Map","Sass/Script/Value/Map.html#method-i-to_s","(opts = {})","<p>@see Value#to_s\n"],["to_s","Sass::Script::Value::Null","Sass/Script/Value/Null.html#method-i-to_s","(opts = {})","<p>@return [String] ” (An empty string)\n"],["to_s","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-to_s","(opts = {})","<p>@return [String] The CSS representation of this number @raise\n[Sass::SyntaxError] if this number has …\n"],["to_s","Sass::Script::Value::String","Sass/Script/Value/String.html#method-i-to_s","(opts = {})","<p>@see Value#to_s\n"],["to_s","Sass::Selector::AbstractSequence","Sass/Selector/AbstractSequence.html#method-i-to_s","()","<p>Converts the selector into a string. This is the standard selector string,\nalong with any SassScript …\n"],["to_s","Sass::Selector::Simple","Sass/Selector/Simple.html#method-i-to_s","()","<p>@see {#inspect} @return [String]\n"],["to_s","Sass::Stack","Sass/Stack.html#method-i-to_s","()",""],["to_s","Sass::SyntaxError","Sass/SyntaxError.html#method-i-to_s","()","<p>@return [String] The error message\n"],["to_sass","Sass::Script::Tree::Funcall","Sass/Script/Tree/Funcall.html#method-i-to_sass","(opts = {})","<p>@see Node#to_sass\n"],["to_sass","Sass::Script::Tree::Interpolation","Sass/Script/Tree/Interpolation.html#method-i-to_sass","(opts = {})","<p>@see Node#to_sass\n"],["to_sass","Sass::Script::Tree::ListLiteral","Sass/Script/Tree/ListLiteral.html#method-i-to_sass","(opts = {})","<p>@see Value#to_sass\n"],["to_sass","Sass::Script::Tree::Literal","Sass/Script/Tree/Literal.html#method-i-to_sass","(opts = {})","<p>@see Node#to_sass\n"],["to_sass","Sass::Script::Tree::MapLiteral","Sass/Script/Tree/MapLiteral.html#method-i-to_sass","(opts = {})","<p>@see Node#to_sass\n"],["to_sass","Sass::Script::Tree::Node","Sass/Script/Tree/Node.html#method-i-to_sass","(opts = {})","<p>Returns the text of this SassScript expression.\n<p>@return [String]\n"],["to_sass","Sass::Script::Tree::Operation","Sass/Script/Tree/Operation.html#method-i-to_sass","(opts = {})","<p>@see Node#to_sass\n"],["to_sass","Sass::Script::Tree::StringInterpolation","Sass/Script/Tree/StringInterpolation.html#method-i-to_sass","(opts = {})","<p>@see Node#to_sass\n"],["to_sass","Sass::Script::Tree::UnaryOperation","Sass/Script/Tree/UnaryOperation.html#method-i-to_sass","(opts = {})","<p>@see Node#to_sass\n"],["to_sass","Sass::Script::Tree::Variable","Sass/Script/Tree/Variable.html#method-i-to_sass","(opts = {})",""],["to_sass","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-to_sass","(opts = {})",""],["to_sass","Sass::Script::Value::Bool","Sass/Script/Value/Bool.html#method-i-to_sass","(opts = {})",""],["to_sass","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-to_sass","(opts = {})",""],["to_sass","Sass::Script::Value::List","Sass/Script/Value/List.html#method-i-to_sass","(opts = {})","<p>@see Value#to_sass\n"],["to_sass","Sass::Script::Value::Map","Sass/Script/Value/Map.html#method-i-to_sass","(opts = {})",""],["to_sass","Sass::Script::Value::Null","Sass/Script/Value/Null.html#method-i-to_sass","(opts = {})",""],["to_sass","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-to_sass","(opts = {})",""],["to_sass","Sass::Script::Value::String","Sass/Script/Value/String.html#method-i-to_sass","(opts = {})","<p>@see Value#to_sass\n"],["to_sass","Sass::Tree::Node","Sass/Tree/Node.html#method-i-to_sass","(options = {})","<p>Converts a node to Sass code that will generate it.\n<p>@param options [{Symbol =&gt; Object}] An options …\n"],["to_scss","Sass::Tree::Node","Sass/Tree/Node.html#method-i-to_scss","(options = {})","<p>Converts a node to SCSS code that will generate it.\n<p>@param options [{Symbol =&gt; Object}] An options …\n"],["to_src","Sass::Media::Query","Sass/Media/Query.html#method-i-to_src","(options)","<p>Returns the Sass/SCSS code for the media query.\n<p>@param options [{Symbol =&gt; Object}] An options hash …\n"],["to_src","Sass::Media::QueryList","Sass/Media/QueryList.html#method-i-to_src","(options)","<p>Returns the Sass/SCSS code for the media query list.\n<p>@param options [{Symbol =&gt; Object}] An options …\n"],["to_src","Sass::Supports::Condition","Sass/Supports/Condition.html#method-i-to_src","(options)","<p>Returns the Sass/CSS code for this condition.\n<p>@param options [{Symbol =&gt; Object}] An options hash (see …\n"],["to_src","Sass::Supports::Declaration","Sass/Supports/Declaration.html#method-i-to_src","(options)",""],["to_src","Sass::Supports::Interpolation","Sass/Supports/Interpolation.html#method-i-to_src","(options)",""],["to_src","Sass::Supports::Negation","Sass/Supports/Negation.html#method-i-to_src","(options)",""],["to_src","Sass::Supports::Operator","Sass/Supports/Operator.html#method-i-to_src","(options)",""],["to_tree","Sass::Engine","Sass/Engine.html#method-i-to_tree","()","<p>Parses the document into its parse tree. Memoized.\n<p>@return [Sass::Tree::Node] The root of the parse tree. …\n"],["to_upper_case","Sass::Script::Functions","Sass/Script/Functions.html#method-i-to_upper_case","(string)","<p>Converts a string to upper case.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">to</span><span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">upper</span><span class=\"ruby-operator\">-</span><span class=\"ruby-keyword\">case</span>(<span class=\"ruby-identifier\">abcd</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">ABCD</span>\n</pre>\n"],["to_value","Sass::Script::Tree::Funcall","Sass/Script/Tree/Funcall.html#method-i-to_value","(args)","<p>This method is factored out from `_perform` so that compass can override it\nwith a cross-browser implementation …\n"],["tok","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-tok","(rx, last_group_lookahead = false)",""],["tok!","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-tok-21","(rx)",""],["tok?","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-tok-3F","(rx)",""],["token","Sass::Script::CssLexer","Sass/Script/CssLexer.html#method-i-token","()",""],["token","Sass::Script::Lexer","Sass/Script/Lexer.html#method-i-token","()",""],["transparent_parent?","Sass::Tree::Visitors::CheckNesting","Sass/Tree/Visitors/CheckNesting.html#method-i-transparent_parent-3F","(parent, grandparent)","<p>Whether `parent` should be assigned to `@parent`.\n"],["transparentize","Sass::Script::Functions","Sass/Script/Functions.html#method-i-transparentize","(color, amount)","<p>Makes a color more transparent. Takes a color and a number between 0 and 1,\nand returns a color with …\n"],["tree","Sass::Engine","Sass/Engine.html#method-i-tree","(arr, i = 0)",""],["tree","Sass::Plugin::StalenessChecker","Sass/Plugin/StalenessChecker.html#method-i-tree","(uri, importer)",""],["trim","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-i-trim","(seqses)","<p>Removes redundant selectors from between multiple lists of selectors. This\ntakes a list of lists of selector …\n"],["try_comment","Sass::Engine","Sass/Engine.html#method-i-try_comment","(line, last, tab_str, comment_tab_str, index)","<p>@comment\n\n<pre>rubocop:disable ParameterLists</pre>\n"],["try_delete_css","Sass::Plugin::Compiler","Sass/Plugin/Compiler.html#method-i-try_delete_css","(css)",""],["try_op_before_interp","Sass::Script::Parser","Sass/Script/Parser.html#method-i-try_op_before_interp","(op, prev = nil)",""],["try_ops_after_interp","Sass::Script::Parser","Sass/Script/Parser.html#method-i-try_ops_after_interp","(ops, name, prev = nil)",""],["try_send","Sass::Tree::Visitors::CheckNesting","Sass/Tree/Visitors/CheckNesting.html#method-i-try_send","(method, *args)",""],["try_to_parse_non_interpolated_rules","Sass::Tree::RuleNode","Sass/Tree/RuleNode.html#method-i-try_to_parse_non_interpolated_rules","()",""],["try_tok","Sass::Script::Parser","Sass/Script/Parser.html#method-i-try_tok","(name)",""],["try_toks","Sass::Script::Parser","Sass/Script/Parser.html#method-i-try_toks","(*names)",""],["type","Sass::Selector::Pseudo","Sass/Selector/Pseudo.html#method-i-type","()","<p>The type of the selector. `:class` if this is a pseudoclass selector,\n`:element` if it’s a pseudoelement. …\n"],["type_of","Sass::Script::Functions","Sass/Script/Functions.html#method-i-type_of","(value)","<p>Returns the type of a value.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">type</span><span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">of</span>(<span class=\"ruby-value\">100</span><span class=\"ruby-identifier\">px</span>)  =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">number</span>\n<span class=\"ruby-identifier\">type</span><span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">of</span>(<span class=\"ruby-identifier\">asdf</span>)   =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">string</span>\n<span class=\"ruby-identifier\">type</span><span class=\"ruby-operator\">-</span><span class=\"ruby-identifier\">of</span>(<span class=\"ruby-string\">&quot;asdf&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["unary","Sass::Script::Parser","Sass/Script/Parser.html#method-i-unary","(op, sub)",""],["unary_div","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-unary_div","()","<p>The SassScript unary `/` operation (e.g. `/$a`).\n<p>@param other [Value] The right-hand side of the operator …\n"],["unary_minus","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-unary_minus","()","<p>The SassScript unary `-` operation (e.g. `-$a`).\n<p>@param other [Value] The right-hand side of the operator …\n"],["unary_minus","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-unary_minus","()","<p>The SassScript unary `-` operation (e.g. `-$a`).\n<p>@return [Number] The negative value of this number\n"],["unary_not","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-unary_not","()","<p>The SassScript `==` operation. **Note that this returns a\n{Sass::Script::Value::Bool} object, not a  …\n"],["unary_plus","Sass::Script::Value::Base","Sass/Script/Value/Base.html#method-i-unary_plus","()","<p>The SassScript unary `+` operation (e.g. `+$a`).\n<p>@param other [Value] The right-hand side of the operator …\n"],["unary_plus","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-unary_plus","()","<p>The SassScript unary `+` operation (e.g. `+$a`).\n<p>@return [Number] The value of this number\n"],["undefined_conversion_error_char","Sass::Util","Sass/Util.html#method-i-undefined_conversion_error_char","(e)","<p>Returns a string description of the character that caused an\n`Encoding::UndefinedConversionError`.\n<p>@param …\n"],["unify","Sass::Selector::Element","Sass/Selector/Element.html#method-i-unify","(sels)","<p>Unification of an element selector is somewhat complicated, especially when\na namespace is specified. …\n"],["unify","Sass::Selector::Id","Sass/Selector/Id.html#method-i-unify","(sels)","<p>Returns `nil` if `sels` contains an {Id} selector with a different name\nthan this one.\n<p>@see Selector#unify …\n"],["unify","Sass::Selector::Interpolation","Sass/Selector/Interpolation.html#method-i-unify","(sels)","<p>Always raises an exception.\n<p>@raise [Sass::SyntaxError] Interpolation selectors should be resolved\nbefore …\n"],["unify","Sass::Selector::Parent","Sass/Selector/Parent.html#method-i-unify","(sels)","<p>Always raises an exception.\n<p>@raise [Sass::SyntaxError] Parent selectors should be resolved before\nunification …\n"],["unify","Sass::Selector::Pseudo","Sass/Selector/Pseudo.html#method-i-unify","(sels)","<p>Returns `nil` if this is a pseudoelement selector and `sels` contains a\npseudoelement selector different …\n"],["unify","Sass::Selector::Simple","Sass/Selector/Simple.html#method-i-unify","(sels)","<p>Unifies this selector with a {SimpleSequence}‘s {SimpleSequence#members\nmembers array}, returning another …\n"],["unify","Sass::Selector::SimpleSequence","Sass/Selector/SimpleSequence.html#method-i-unify","(sels, other_subject)","<p>Unifies this selector with another {SimpleSequence}‘s\n{SimpleSequence#members members array}, returning …\n"],["unify","Sass::Selector::Universal","Sass/Selector/Universal.html#method-i-unify","(sels)","<p>Unification of a universal selector is somewhat complicated, especially\nwhen a namespace is specified. …\n"],["unify_namespaces","Sass::Selector::Simple","Sass/Selector/Simple.html#method-i-unify_namespaces","(ns1, ns2)","<p>Unifies two namespaces, returning a namespace that works for both of them\nif possible.\n<p>@param ns1 [String, …\n"],["unique_id","Sass::Script::Functions","Sass/Script/Functions.html#method-i-unique_id","()","<p>Returns a unique CSS identifier. The identifier is returned as an unquoted\nstring. The identifier returned …\n"],["unit","Sass::Script::Functions","Sass/Script/Functions.html#method-i-unit","(number)","<p>Returns the unit(s) associated with a number. Complex units are sorted in\nalphabetical order by numerator …\n"],["unit_str","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-unit_str","()","<p>Returns a human readable representation of the units in this number. For\ncomplex units this takes the …\n"],["unitless","Sass::Script::Functions","Sass/Script/Functions.html#method-i-unitless","(number)","<p>Returns whether a number has units.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">unitless</span>(<span class=\"ruby-value\">100</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">true</span>\n<span class=\"ruby-identifier\">unitless</span>(<span class=\"ruby-value\">100</span><span class=\"ruby-identifier\">px</span>) =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">false</span>\n</pre>\n"],["unitless?","Sass::Script::Value::Number","Sass/Script/Value/Number.html#method-i-unitless-3F","()","<p>@return [Boolean] Whether or not this number has no units.\n"],["unpeek!","Sass::Script::Lexer","Sass/Script/Lexer.html#method-i-unpeek-21","()","<p>Rewinds the underlying StringScanner to before the token returned by\n{#peek}.\n"],["unquote","Sass::Script::Functions","Sass/Script/Functions.html#method-i-unquote","(string)","<p>Removes quotes from a string. If the string is already unquoted, this will\nreturn it unmodified.\n<p>@see …\n"],["unquoted_string","Sass::Script::Value::Helpers","Sass/Script/Value/Helpers.html#method-i-unquoted_string","(str)","<p>Create an unquoted string.\n<p>@param str [::String] A ruby string. @return [Sass::Script::Value::String]\n…\n"],["unscan","Sass::Util::MultibyteStringScanner","Sass/Util/MultibyteStringScanner.html#method-i-unscan","()",""],["update","OrderedHash","OrderedHash.html#method-i-update","(other_hash)",""],["update","Sass::Util::NormalizedMap","Sass/Util/NormalizedMap.html#method-i-update","(map)",""],["update_stylesheet","Sass::Plugin::Compiler","Sass/Plugin/Compiler.html#method-i-update_stylesheet","(filename, css, sourcemap)",""],["update_stylesheets","Sass::Plugin","Sass/Plugin.html#method-i-update_stylesheets","(individual_files = [])","<p>Updates out-of-date stylesheets.\n<p>Checks each Sass/SCSS file in\n{file:SASS_REFERENCE.md#template_location-option …\n"],["update_stylesheets","Sass::Plugin::Compiler","Sass/Plugin/Compiler.html#method-i-update_stylesheets","(individual_files = [])","<p>Updates out-of-date stylesheets.\n<p>Checks each Sass/SCSS file in\n{file:SASS_REFERENCE.md#template_location-option …\n"],["use_css_import?","Sass::SCSS::CssParser","Sass/SCSS/CssParser.html#method-i-use_css_import-3F","()",""],["use_css_import?","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-use_css_import-3F","()",""],["use_css_import?","Sass::SCSS::StaticParser","Sass/SCSS/StaticParser.html#method-i-use_css_import-3F","()",""],["val_to_sass","Sass::Tree::PropNode","Sass/Tree/PropNode.html#method-i-val_to_sass","(value, opts)","<p>@private\n"],["val_to_sass_comma","Sass::Tree::PropNode","Sass/Tree/PropNode.html#method-i-val_to_sass_comma","(node, opts)",""],["val_to_sass_concat","Sass::Tree::PropNode","Sass/Tree/PropNode.html#method-i-val_to_sass_concat","(node, opts)",""],["val_to_sass_div","Sass::Tree::PropNode","Sass/Tree/PropNode.html#method-i-val_to_sass_div","(node, opts)",""],["validate_and_append_child","Sass::Engine","Sass/Engine.html#method-i-validate_and_append_child","(parent, child, line, root)",""],["value","Sass::Tree::CssImportNode","Sass/Tree/CssImportNode.html#method-i-value","()","<p>@see DirectiveNode#value\n"],["value","Sass::Tree::MediaNode","Sass/Tree/MediaNode.html#method-i-value","()","<p>@see DirectiveNode#value\n"],["value","Sass::Tree::SupportsNode","Sass/Tree/SupportsNode.html#method-i-value","()","<p>@see DirectiveNode#value\n"],["value!","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-value-21","()",""],["values","OrderedHash","OrderedHash.html#method-i-values","()",""],["values","Sass::Util::NormalizedMap","Sass/Util/NormalizedMap.html#method-i-values","()",""],["var_expr","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-var_expr","()",""],["var_expr","Sass::SCSS::StaticParser","Sass/SCSS/StaticParser.html#method-i-var_expr","()",""],["variable","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-variable","()",""],["variable","Sass::SCSS::ScriptLexer","Sass/SCSS/ScriptLexer.html#method-i-variable","()",""],["variable","Sass::SCSS::StaticParser","Sass/SCSS/StaticParser.html#method-i-variable","()",""],["variable","Sass::Script::Lexer","Sass/Script/Lexer.html#method-i-variable","()",""],["variable","Sass::Script::Parser","Sass/Script/Parser.html#method-i-variable","()",""],["variable_exists","Sass::Script::Functions","Sass/Script/Functions.html#method-i-variable_exists","(name)","<p>Check whether a variable with the given name exists in the current scope or\nin the global scope.\n<p>@example …\n"],["version","Sass::Version","Sass/Version.html#method-i-version","()","<p>Returns a hash representing the version of Sass. The `:major`, `:minor`,\nand `:teeny` keys have their …\n"],["version_date","Sass::Version","Sass/Version.html#method-i-version_date","()",""],["version_geq","Sass::Util","Sass/Util.html#method-i-version_geq","(v1, v2)","<p>Returns whether one version string represents the same or a more recent\nversion than another.\n<p>@param v1 …\n"],["version_gt","Sass::Util","Sass/Util.html#method-i-version_gt","(v1, v2)","<p>Returns whether one version string represents a more recent version than\nanother.\n<p>@param v1 [String]  …\n"],["visit","Sass::Tree::Visitors::Base","Sass/Tree/Visitors/Base.html#method-i-visit","(node)","<p>Runs the visitor on the given node. This can be overridden by subclasses\nthat need to do something for …\n"],["visit","Sass::Tree::Visitors::Base","Sass/Tree/Visitors/Base.html#method-c-visit","(root)","<p>Runs the visitor on a tree.\n<p>@param root [Tree::Node] The root node of the Sass tree. @return [Object] …\n"],["visit","Sass::Tree::Visitors::CheckNesting","Sass/Tree/Visitors/CheckNesting.html#method-i-visit","(node)",""],["visit","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-c-visit","(root, options, format)","<p>Runs the visitor on a tree.\n<p>@param root [Tree::Node] The root node of the Sass tree. @param options\n[{Symbol …\n"],["visit","Sass::Tree::Visitors::Cssize","Sass/Tree/Visitors/Cssize.html#method-i-visit","(node)","<p>If an exception is raised, this adds proper metadata to the backtrace.\n"],["visit","Sass::Tree::Visitors::Cssize","Sass/Tree/Visitors/Cssize.html#method-c-visit","(root)","<p>@param root [Tree::Node] The root node of the tree to visit. @return\n[(Tree::Node, Sass::Util::SubsetMap …\n"],["visit","Sass::Tree::Visitors::DeepCopy","Sass/Tree/Visitors/DeepCopy.html#method-i-visit","(node)",""],["visit","Sass::Tree::Visitors::Extend","Sass/Tree/Visitors/Extend.html#method-i-visit","(node)","<p>If an exception is raised, this adds proper metadata to the backtrace.\n"],["visit","Sass::Tree::Visitors::Extend","Sass/Tree/Visitors/Extend.html#method-c-visit","(root, extends)","<p>Performs the given extensions on the static CSS tree based in `root`, then\nvalidates that all extends …\n"],["visit","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit","(root, environment = nil)","<p>@param root [Tree::Node] The root node of the tree to visit. @param\nenvironment [Sass::Environment]  …\n"],["visit","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-i-visit","(node)",""],["visit","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-c-visit","(root, options)","<p>@param root [Tree::Node] The root node of the tree to visit. @param options\n[{Symbol =&gt; Object}]  …\n"],["visit","Sass::Tree::Visitors::ToCss","Sass/Tree/Visitors/ToCss.html#method-i-visit","(node)","<p>Runs the visitor on `node`.\n<p>@param node [Sass::Tree::Node] The root node of the tree to convert to\nCSS&gt; …\n"],["visit_atroot","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_atroot","(node)",""],["visit_atroot","Sass::Tree::Visitors::Cssize","Sass/Tree/Visitors/Cssize.html#method-i-visit_atroot","(node)",""],["visit_atroot","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_atroot","(node)","<p>Sets a variable that indicates that the first level of rule nodes shouldn’t\ninclude the parent selector …\n"],["visit_charset","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_charset","(node)",""],["visit_charset","Sass::Tree::Visitors::ToCss","Sass/Tree/Visitors/ToCss.html#method-i-visit_charset","(node)",""],["visit_children","Sass::Tree::Visitors::Base","Sass/Tree/Visitors/Base.html#method-i-visit_children","(parent)","<p>Visit the child nodes for a given node. This can be overridden by\nsubclasses that need to do something …\n"],["visit_children","Sass::Tree::Visitors::CheckNesting","Sass/Tree/Visitors/CheckNesting.html#method-i-visit_children","(parent)",""],["visit_children","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_children","(parent)",""],["visit_children","Sass::Tree::Visitors::Cssize","Sass/Tree/Visitors/Cssize.html#method-i-visit_children","(parent)","<p>Keeps track of the current parent node.\n"],["visit_children","Sass::Tree::Visitors::DeepCopy","Sass/Tree/Visitors/DeepCopy.html#method-i-visit_children","(parent)",""],["visit_children","Sass::Tree::Visitors::Extend","Sass/Tree/Visitors/Extend.html#method-i-visit_children","(parent)","<p>Keeps track of the current parent directives.\n"],["visit_children","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_children","(parent)","<p>Keeps track of the current environment.\n"],["visit_children_without_parent","Sass::Tree::Visitors::Cssize","Sass/Tree/Visitors/Cssize.html#method-i-visit_children_without_parent","(node)","<p>Like {#visit_children}, but doesn’t set {#parent}.\n<p>@param node [Sass::Tree::Node] @return [Array&lt;Sass::Tree::Node&gt;] …\n"],["visit_comment","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_comment","(node)",""],["visit_comment","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_comment","(node)","<p>Removes this node from the tree if it’s a silent comment.\n"],["visit_comment","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-i-visit_comment","(node)",""],["visit_comment","Sass::Tree::Visitors::ToCss","Sass/Tree/Visitors/ToCss.html#method-i-visit_comment","(node)",""],["visit_content","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_content","(node)",""],["visit_content","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_content","(node)",""],["visit_cssimport","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_cssimport","(node)",""],["visit_cssimport","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_cssimport","(node)",""],["visit_cssimport","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-i-visit_cssimport","(node)",""],["visit_cssimport","Sass::Tree::Visitors::ToCss","Sass/Tree/Visitors/ToCss.html#method-i-visit_cssimport","(node)",""],["visit_debug","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_debug","(node)",""],["visit_debug","Sass::Tree::Visitors::DeepCopy","Sass/Tree/Visitors/DeepCopy.html#method-i-visit_debug","(node)",""],["visit_debug","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_debug","(node)","<p>Prints the expression to STDERR.\n"],["visit_debug","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-i-visit_debug","(node)",""],["visit_directive","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_directive","(node)",""],["visit_directive","Sass::Tree::Visitors::Cssize","Sass/Tree/Visitors/Cssize.html#method-i-visit_directive","(node)","<p>Bubbles a directive up through RuleNodes.\n"],["visit_directive","Sass::Tree::Visitors::DeepCopy","Sass/Tree/Visitors/DeepCopy.html#method-i-visit_directive","(node)",""],["visit_directive","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_directive","(node)",""],["visit_directive","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-i-visit_directive","(node)",""],["visit_directive","Sass::Tree::Visitors::ToCss","Sass/Tree/Visitors/ToCss.html#method-i-visit_directive","(node)","<p>@comment\n\n<pre>rubocop:disable MethodLength</pre>\n"],["visit_each","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_each","(node)",""],["visit_each","Sass::Tree::Visitors::DeepCopy","Sass/Tree/Visitors/DeepCopy.html#method-i-visit_each","(node)",""],["visit_each","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_each","(node)","<p>Runs the child nodes once for each value in the list.\n"],["visit_each","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-i-visit_each","(node)",""],["visit_extend","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_extend","(node)",""],["visit_extend","Sass::Tree::Visitors::Cssize","Sass/Tree/Visitors/Cssize.html#method-i-visit_extend","(node)","<p>Registers an extension in the `@extends` subset map.\n"],["visit_extend","Sass::Tree::Visitors::DeepCopy","Sass/Tree/Visitors/DeepCopy.html#method-i-visit_extend","(node)",""],["visit_extend","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_extend","(node)","<p>Runs SassScript interpolation in the selector, and then parses the result\ninto a {Sass::Selector::CommaSequence}. …\n"],["visit_extend","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-i-visit_extend","(node)",""],["visit_for","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_for","(node)",""],["visit_for","Sass::Tree::Visitors::DeepCopy","Sass/Tree/Visitors/DeepCopy.html#method-i-visit_for","(node)",""],["visit_for","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_for","(node)","<p>Runs the child nodes once for each time through the loop, varying the\nvariable each time.\n"],["visit_for","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-i-visit_for","(node)",""],["visit_function","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_function","(node)",""],["visit_function","Sass::Tree::Visitors::DeepCopy","Sass/Tree/Visitors/DeepCopy.html#method-i-visit_function","(node)",""],["visit_function","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_function","(node)","<p>Loads the function into the environment.\n"],["visit_function","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-i-visit_function","(node)",""],["visit_if","Sass::Tree::Visitors::Base","Sass/Tree/Visitors/Base.html#method-i-visit_if","(node)","<p>`yield`s, then runs the visitor on the `@else` clause if the node has one.\nThis exists to ensure that …\n"],["visit_if","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_if","(node)",""],["visit_if","Sass::Tree::Visitors::DeepCopy","Sass/Tree/Visitors/DeepCopy.html#method-i-visit_if","(node)",""],["visit_if","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_if","(node)","<p>Runs the child nodes if the conditional expression is true; otherwise,\ntries the else nodes.\n"],["visit_if","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-i-visit_if","(node)",""],["visit_import","Sass::Tree::Visitors::CheckNesting","Sass/Tree/Visitors/CheckNesting.html#method-i-visit_import","(node)",""],["visit_import","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_import","(node)",""],["visit_import","Sass::Tree::Visitors::Cssize","Sass/Tree/Visitors/Cssize.html#method-i-visit_import","(node)","<p>Modifies exception backtraces to include the imported file.\n"],["visit_import","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_import","(node)","<p>Returns a static DirectiveNode if this is importing a CSS file, or parses\nand includes the imported  …\n"],["visit_import","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-i-visit_import","(node)",""],["visit_media","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_media","(node)",""],["visit_media","Sass::Tree::Visitors::Cssize","Sass/Tree/Visitors/Cssize.html#method-i-visit_media","(node)","<p>Bubbles the `@media` directive up through RuleNodes and merges it with\nother `@media` directives.\n"],["visit_media","Sass::Tree::Visitors::DeepCopy","Sass/Tree/Visitors/DeepCopy.html#method-i-visit_media","(node)",""],["visit_media","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_media","(node)",""],["visit_media","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-i-visit_media","(node)",""],["visit_media","Sass::Tree::Visitors::ToCss","Sass/Tree/Visitors/ToCss.html#method-i-visit_media","(node)","<p>@comment\n\n<pre>rubocop:enable MethodLength</pre>\n"],["visit_mixin","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_mixin","(node)",""],["visit_mixin","Sass::Tree::Visitors::DeepCopy","Sass/Tree/Visitors/DeepCopy.html#method-i-visit_mixin","(node)",""],["visit_mixin","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_mixin","(node)","<p>Runs a mixin.\n"],["visit_mixin","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-i-visit_mixin","(node)",""],["visit_mixindef","Sass::Tree::Visitors::CheckNesting","Sass/Tree/Visitors/CheckNesting.html#method-i-visit_mixindef","(node)",""],["visit_mixindef","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_mixindef","(node)",""],["visit_mixindef","Sass::Tree::Visitors::DeepCopy","Sass/Tree/Visitors/DeepCopy.html#method-i-visit_mixindef","(node)",""],["visit_mixindef","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_mixindef","(node)","<p>Loads a mixin into the environment.\n"],["visit_mixindef","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-i-visit_mixindef","(node)",""],["visit_prop","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_prop","(node)",""],["visit_prop","Sass::Tree::Visitors::Cssize","Sass/Tree/Visitors/Cssize.html#method-i-visit_prop","(node)","<p>Converts nested properties into flat properties and updates the indentation\nof the prop node based on …\n"],["visit_prop","Sass::Tree::Visitors::DeepCopy","Sass/Tree/Visitors/DeepCopy.html#method-i-visit_prop","(node)",""],["visit_prop","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_prop","(node)","<p>Runs any SassScript that may be embedded in a property.\n"],["visit_prop","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-i-visit_prop","(node)",""],["visit_prop","Sass::Tree::Visitors::ToCss","Sass/Tree/Visitors/ToCss.html#method-i-visit_prop","(node)",""],["visit_return","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_return","(node)",""],["visit_return","Sass::Tree::Visitors::DeepCopy","Sass/Tree/Visitors/DeepCopy.html#method-i-visit_return","(node)",""],["visit_return","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_return","(node)","<p>Returns the value of the expression.\n"],["visit_return","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-i-visit_return","(node)",""],["visit_root","Sass::Tree::Visitors::CheckNesting","Sass/Tree/Visitors/CheckNesting.html#method-i-visit_root","(node)",""],["visit_root","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_root","(node)","<p>Ensures proper spacing between top-level nodes.\n"],["visit_root","Sass::Tree::Visitors::Cssize","Sass/Tree/Visitors/Cssize.html#method-i-visit_root","(node)","<p>In Ruby 1.8, ensures that there’s only one `@charset` directive and that\nit’s at the top of the document. …\n"],["visit_root","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_root","(node)","<p>Sets the options on the environment if this is the top-level root.\n"],["visit_root","Sass::Tree::Visitors::ToCss","Sass/Tree/Visitors/ToCss.html#method-i-visit_root","(node)",""],["visit_rule","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_rule","(node)",""],["visit_rule","Sass::Tree::Visitors::Cssize","Sass/Tree/Visitors/Cssize.html#method-i-visit_rule","(node)","<p>Updates the indentation of the rule node based on the nesting level. The\nselectors were resolved in {Perform}. …\n"],["visit_rule","Sass::Tree::Visitors::DeepCopy","Sass/Tree/Visitors/DeepCopy.html#method-i-visit_rule","(node)",""],["visit_rule","Sass::Tree::Visitors::Extend","Sass/Tree/Visitors/Extend.html#method-i-visit_rule","(node)","<p>Applies the extend to a single rule’s selector.\n"],["visit_rule","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_rule","(node)","<p>Runs SassScript interpolation in the selector, and then parses the result\ninto a {Sass::Selector::CommaSequence}. …\n"],["visit_rule","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-i-visit_rule","(node)",""],["visit_rule","Sass::Tree::Visitors::ToCss","Sass/Tree/Visitors/ToCss.html#method-i-visit_rule","(node)","<p>@comment\n\n<pre>rubocop:disable MethodLength</pre>\n"],["visit_supports","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_supports","(node)",""],["visit_supports","Sass::Tree::Visitors::Cssize","Sass/Tree/Visitors/Cssize.html#method-i-visit_supports","(node)","<p>Bubbles the `@supports` directive up through RuleNodes.\n"],["visit_supports","Sass::Tree::Visitors::DeepCopy","Sass/Tree/Visitors/DeepCopy.html#method-i-visit_supports","(node)",""],["visit_supports","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_supports","(node)",""],["visit_supports","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-i-visit_supports","(node)",""],["visit_supports","Sass::Tree::Visitors::ToCss","Sass/Tree/Visitors/ToCss.html#method-i-visit_supports","(node)",""],["visit_trace","Sass::Tree::Visitors::Cssize","Sass/Tree/Visitors/Cssize.html#method-i-visit_trace","(node)","<p>Asserts that all the traced children are valid in their new location.\n"],["visit_variable","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_variable","(node)",""],["visit_variable","Sass::Tree::Visitors::DeepCopy","Sass/Tree/Visitors/DeepCopy.html#method-i-visit_variable","(node)",""],["visit_variable","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_variable","(node)","<p>Loads the new variable value into the environment.\n"],["visit_variable","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-i-visit_variable","(node)",""],["visit_warn","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_warn","(node)",""],["visit_warn","Sass::Tree::Visitors::DeepCopy","Sass/Tree/Visitors/DeepCopy.html#method-i-visit_warn","(node)",""],["visit_warn","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_warn","(node)","<p>Prints the expression to STDERR with a stylesheet trace.\n"],["visit_warn","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-i-visit_warn","(node)",""],["visit_while","Sass::Tree::Visitors::Convert","Sass/Tree/Visitors/Convert.html#method-i-visit_while","(node)",""],["visit_while","Sass::Tree::Visitors::DeepCopy","Sass/Tree/Visitors/DeepCopy.html#method-i-visit_while","(node)",""],["visit_while","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-visit_while","(node)","<p>Runs the child nodes until the continuation expression becomes false.\n"],["visit_while","Sass::Tree::Visitors::SetOptions","Sass/Tree/Visitors/SetOptions.html#method-i-visit_while","(node)",""],["warn_about_public_url","Sass::Importers::Filesystem","Sass/Importers/Filesystem.html#method-i-warn_about_public_url","(uri)","<p>Issues a warning about being unable to determine a public url.\n<p>@param uri [String] A URI known to be valid …\n"],["warn_directive","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-warn_directive","(start_pos)",""],["warned=","Sass::Script::Value::DeprecatedFalse","Sass/Script/Value/DeprecatedFalse.html#method-i-warned-3D","(value)",""],["warned?","Sass::Script::Value::DeprecatedFalse","Sass/Script/Value/DeprecatedFalse.html#method-i-warned-3F","()",""],["was_set?","Sass::CacheStores::Null","Sass/CacheStores/Null.html#method-i-was_set-3F","(key)",""],["watch","Sass::Plugin::Compiler","Sass/Plugin/Compiler.html#method-i-watch","(individual_files = [])","<p>Watches the template directory (or directories) and updates the CSS files\nwhenever the related Sass/SCSS …\n"],["watch_or_update","Sass::Exec::Sass","Sass/Exec/Sass.html#method-i-watch_or_update","()","<p>@comment\n\n<pre>rubocop:disable MethodLength</pre>\n"],["watched_file?","Sass::Importers::Base","Sass/Importers/Base.html#method-i-watched_file-3F","(filename)","<p>If this importer is based on files on the local filesystem This method\nshould return true if the file, …\n"],["watched_file?","Sass::Importers::Filesystem","Sass/Importers/Filesystem.html#method-i-watched_file-3F","(filename)","<p>@see Base#watched_file?\n"],["watched_file?","Sass::Plugin::Compiler","Sass/Plugin/Compiler.html#method-i-watched_file-3F","(file)",""],["watched_paths","Sass::Plugin::Compiler","Sass/Plugin/Compiler.html#method-i-watched_paths","()",""],["weave","Sass::Selector::Sequence","Sass/Selector/Sequence.html#method-i-weave","(path)","<p>Conceptually, this expands “parenthesized selectors”. That is, if we have\n`.A .B {@extend .C}` …\n"],["while_directive","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-while_directive","(start_pos)",""],["whitespace","Sass::SCSS::Parser","Sass/SCSS/Parser.html#method-i-whitespace","()",""],["whitespace","Sass::Script::Lexer","Sass/Script/Lexer.html#method-i-whitespace","()",""],["whitespace?","Sass::Script::Lexer","Sass/Script/Lexer.html#method-i-whitespace-3F","(tok = @tok)","<p>Returns whether or not there’s whitespace before the next token.\n<p>@return [Boolean]\n"],["windows?","Sass::Util","Sass/Util.html#method-i-windows-3F","()","<p>Whether or not this is running on Windows.\n<p>@return [Boolean]\n"],["with","Sass::Script::Value::Color","Sass/Script/Value/Color.html#method-i-with","(attrs)","<p>Returns a copy of this color with one or more channels changed. RGB or HSL\ncolors may be changed, but …\n"],["with_base","Sass::Stack","Sass/Stack.html#method-i-with_base","(filename, line)","<p>Pushes a base frame onto the stack.\n<p>@param filename [String] See {Frame#filename}. @param line [String] …\n"],["with_dependency_cache","Sass::Plugin::StalenessChecker","Sass/Plugin/StalenessChecker.html#method-i-with_dependency_cache","()","<p>Get access to the global dependency cache in a threadsafe manner. Inside\nthe block, no other thread can …\n"],["with_environment","Sass::Tree::Visitors::Perform","Sass/Tree/Visitors/Perform.html#method-i-with_environment","(env)","<p>Runs a block of code with the current environment replaced with the given\none.\n<p>@param env [Sass::Environment] …\n"],["with_extracted_values","Sass::Util","Sass/Util.html#method-i-with_extracted_values","(arr)","<p>Allows modifications to be performed on the string form of an array\ncontaining both strings and non-strings. …\n"],["with_frame","Sass::Stack","Sass/Stack.html#method-i-with_frame","(filename, line, type, name = nil)",""],["with_import","Sass::Stack","Sass/Stack.html#method-i-with_import","(filename, line)","<p>Pushes an import frame onto the stack.\n<p>@param filename [String] See {Frame#filename}. @param line [String] …\n"],["with_mixin","Sass::Stack","Sass/Stack.html#method-i-with_mixin","(filename, line, name)","<p>Pushes a mixin frame onto the stack.\n<p>@param filename [String] See {Frame#filename}. @param line [String] …\n"],["with_more_sources","Sass::Selector::SimpleSequence","Sass/Selector/SimpleSequence.html#method-i-with_more_sources","(sources)","<p>Return a copy of this simple sequence with `sources` merged into the\n{SimpleSequence#sources} set.\n<p>@param …\n"],["with_parent","Sass::Tree::Visitors::Cssize","Sass/Tree/Visitors/Cssize.html#method-i-with_parent","(parent)","<p>Runs a block of code with the current parent node replaced with the given\nnode.\n<p>@param parent [Tree::Node] …\n"],["with_tabs","Sass::Tree::Visitors::ToCss","Sass/Tree/Visitors/ToCss.html#method-i-with_tabs","(tabs)",""],["without_original","Sass::Script::Tree::Funcall","Sass/Script/Tree/Funcall.html#method-i-without_original","(value)",""],["write_file","Sass::Plugin::Compiler","Sass/Plugin/Compiler.html#method-i-write_file","(fileName, content)",""],["write_json_field","Sass::Source::Map","Sass/Source/Map.html#method-i-write_json_field","(out, name, value, is_first = false)","<p>@comment\n\n<pre>rubocop:enable MethodLength</pre>\n"],["write_output","Sass::Exec::Generic","Sass/Exec/Generic.html#method-i-write_output","(text, destination)",""],["zip","Sass::Script::Functions","Sass/Script/Functions.html#method-i-zip","(*lists)","<p>Combines several lists into a single multidimensional list. The nth value\nof the resulting list is a …\n"]]}}